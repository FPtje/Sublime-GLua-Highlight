{
  "scope": "source.lua - keyword.control.lua - constant.language.lua - string",
  "completions": [
    "in",
    "else",
    "return",
    "false",
    "true",
    "break",
    "or",
    "and",
    "AcceptInput",
    "ActionSignal",
    "AddDeathNotice",
    "AddGamemodeToolMenuCategories",
    "AddGamemodeToolMenuTabs",
    "AddToolMenuCategories",
    "AddToolMenuTabs",
    "AdjustMouseSensitivity",
    "AllowPlayerPickup",
    "AnimationThink",
    "ApplySchemeSettings",
    "BehaveStart",
    "BehaveUpdate",
    "Blocked",
    "BodyUpdate",
    "CalcAbsolutePosition",
    "CalcMainActivity",
    "CalcVehicleView",
    "CalcView",
    "CalcViewModelView",
    "CanDrive",
    "CanEditVariable",
    "CanExitVehicle",
    "CanPlayerEnterVehicle",
    "CanPlayerSuicide",
    "CanPlayerUnfreeze",
    "CanPrimaryAttack",
    "CanProperty",
    "CanSecondaryAttack",
    "CanTool",
    "CaptureVideo",
    "ChatText",
    "ChatTextChanged",
    "CheckPassword",
    "CloseDermaMenus",
    "ContentSidebarSelection",
    "ContextMenuCreated",
    "ContextMenuOpen",
    "CreateClientsideRagdoll",
    "CreateEntityRagdoll",
    "CreateMove",
    "CreateTeams",
    "CustomAmmoDisplay",
    "Deploy",
    "DoAnimationEvent",
    "DoDrawCrosshair",
    "DoImpactEffect",
    "DoingEngineSchedule",
    "DoPlayerDeath",
    "DoSchedule",
    "DragHoverClick",
    "Draw",
    "DrawDeathNotice",
    "DrawHUD",
    "DrawHUDBackground",
    "DrawMonitors",
    "DrawOverlay",
    "DrawPhysgunBeam",
    "DrawToolScreen",
    "DrawTranslucent",
    "DrawWeaponSelection",
    "DrawWorldModel",
    "DrawWorldModelTranslucent",
    "DroppedOn",
    "EndEntityDriving",
    "EndTouch",
    "EngineScheduleFinish",
    "EntityEmitSound",
    "EntityFireBullets",
    "EntityKeyValue",
    "EntityNetworkedVarChanged",
    "EntityRemoved",
    "EntityTakeDamage",
    "Equip",
    "EquipAmmo",
    "ExpressionFinished",
    "FindUseEntity",
    "FinishChat",
    "FinishMove",
    "FireAnimationEvent",
    "ForceDermaSkin",
    "FreezeMovement",
    "GameContentChanged",
    "GenerateExample",
    "GetAttackSpread",
    "GetCapabilities",
    "GetFallDamage",
    "GetGameDescription",
    "GetHandsModel",
    "GetMotionBlurValues",
    "GetPreferredCarryAngles",
    "GetRelationship",
    "GetRenderMesh",
    "GetTeamColor",
    "GetTeamNumColor",
    "GetTracerOrigin",
    "GetTracerShootPos",
    "GetViewModelPosition",
    "GrabEarAnimation",
    "GravGunOnDropped",
    "GravGunOnPickedUp",
    "GravGunPickupAllowed",
    "GravGunPunt",
    "GUIMouseDoublePressed",
    "GUIMousePressed",
    "GUIMouseReleased",
    "HandleAnimEvent",
    "HandlePlayerDriving",
    "HandlePlayerDucking",
    "HandlePlayerJumping",
    "HandlePlayerLanding",
    "HandlePlayerNoClipping",
    "HandlePlayerSwimming",
    "HandlePlayerVaulting",
    "HideTeam",
    "Holster",
    "HUDAmmoPickedUp",
    "HUDDrawPickupHistory",
    "HUDDrawScoreBoard",
    "HUDDrawTargetID",
    "HUDItemPickedUp",
    "HUDPaint",
    "HUDPaintBackground",
    "HUDShouldDraw",
    "HUDWeaponPickedUp",
    "ImpactTrace",
    "Init",
    "Initialize",
    "InitPostEntity",
    "InputMouseApply",
    "IsSpawnpointSuitable",
    "KeyPress",
    "KeyRelease",
    "KeyValue",
    "LeftClick",
    "LoadCookies",
    "LoadGModSave",
    "Loadout",
    "MenuStart",
    "MouthMoveAnimation",
    "Move",
    "NeedsDepthPass",
    "NetworkEntityCreated",
    "NetworkIDValidated",
    "NextTask",
    "NotifyShouldTransmit",
    "OnAchievementAchieved",
    "OnActivate",
    "OnChangeTargetURL",
    "OnChangeTitle",
    "OnChatTab",
    "OnChildAdded",
    "OnChildRemoved",
    "OnChildViewCreated",
    "OnCondition",
    "OnContact",
    "OnContextMenuClose",
    "OnContextMenuOpen",
    "OnCursorEntered",
    "OnCursorExited",
    "OnCursorMoved",
    "OnDamagedByExplosion",
    "OnDeactivate",
    "OnDocumentReady",
    "OnDrop",
    "OnDuplicated",
    "OnEntityCopyTableFinish",
    "OnEntityCreated",
    "OnFocusChanged",
    "OnGamemodeLoaded",
    "OnIgnite",
    "OnInjured",
    "OnKeyCodePressed",
    "OnKeyCodeReleased",
    "OnKilled",
    "OnLandOnGround",
    "OnLeaveGround",
    "OnLuaError",
    "OnMousePressed",
    "OnMouseReleased",
    "OnMouseWheeled",
    "OnNavAreaChanged",
    "OnNPCKilled",
    "OnOtherKilled",
    "OnPhysgunFreeze",
    "OnPhysgunPickup",
    "OnPhysgunReload",
    "OnPlayerChangedTeam",
    "OnPlayerChat",
    "OnPlayerHitGround",
    "OnReloaded",
    "OnRemove",
    "OnRestore",
    "OnScreenSizeChanged",
    "OnSizeChanged",
    "OnSpawnMenuClose",
    "OnSpawnMenuOpen",
    "OnStartDragging",
    "OnStopDragging",
    "OnStuck",
    "OnTakeDamage",
    "OnTaskComplete",
    "OnTextEntryGetFocus",
    "OnTextEntryLoseFocus",
    "OnUndo",
    "OnUnStuck",
    "OnViewModelChanged",
    "OwnerChanged",
    "Paint",
    "PaintNotes",
    "PaintOver",
    "PaintWorldTips",
    "PassesDamageFilter",
    "PassesFilter",
    "PassesTriggerFilters",
    "PerformLayout",
    "PersistenceLoad",
    "PersistenceSave",
    "PhysgunDrop",
    "PhysgunPickup",
    "PhysicsCollide",
    "PhysicsSimulate",
    "PhysicsUpdate",
    "PlayerAuthed",
    "PlayerBindPress",
    "PlayerButtonDown",
    "PlayerButtonUp",
    "PlayerCanHearPlayersVoice",
    "PlayerCanJoinTeam",
    "PlayerCanPickupItem",
    "PlayerCanPickupWeapon",
    "PlayerCanSeePlayersChat",
    "PlayerClassChanged",
    "PlayerConnect",
    "PlayerDeath",
    "PlayerDeathSound",
    "PlayerDeathThink",
    "PlayerDisconnected",
    "PlayerDriveAnimate",
    "PlayerDroppedWeapon",
    "PlayerEndVoice",
    "PlayerEnteredVehicle",
    "PlayerFootstep",
    "PlayerFrozeObject",
    "PlayerGiveSWEP",
    "PlayerHurt",
    "PlayerInitialSpawn",
    "PlayerJoinTeam",
    "PlayerLeaveVehicle",
    "PlayerLoadout",
    "PlayerNoClip",
    "PlayerPostThink",
    "PlayerRequestTeam",
    "PlayerSay",
    "PlayerSelectSpawn",
    "PlayerSelectTeamSpawn",
    "PlayerSetHandsModel",
    "PlayerSetModel",
    "PlayerShouldTakeDamage",
    "PlayerShouldTaunt",
    "PlayerSilentDeath",
    "PlayerSpawn",
    "PlayerSpawnAsSpectator",
    "PlayerSpawnedEffect",
    "PlayerSpawnedNPC",
    "PlayerSpawnedProp",
    "PlayerSpawnedRagdoll",
    "PlayerSpawnedSENT",
    "PlayerSpawnedSWEP",
    "PlayerSpawnedVehicle",
    "PlayerSpawnEffect",
    "PlayerSpawnNPC",
    "PlayerSpawnObject",
    "PlayerSpawnProp",
    "PlayerSpawnRagdoll",
    "PlayerSpawnSENT",
    "PlayerSpawnSWEP",
    "PlayerSpawnVehicle",
    "PlayerSpray",
    "PlayerStartTaunt",
    "PlayerStartVoice",
    "PlayerStepSoundTime",
    "PlayerSwitchFlashlight",
    "PlayerSwitchWeapon",
    "PlayerTick",
    "PlayerTraceAttack",
    "PlayerUnfrozeObject",
    "PlayerUse",
    "PopulateMenuBar",
    "PopulatePropMenu",
    "PopulateSTOOLMenu",
    "PopulateToolMenu",
    "PostAutoRefresh",
    "PostCleanupMap",
    "PostDrawEffects",
    "PostDrawHUD",
    "PostDrawOpaqueRenderables",
    "PostDrawPlayerHands",
    "PostDrawSkyBox",
    "PostDrawTranslucentRenderables",
    "PostDrawViewModel",
    "PostEntityCopy",
    "PostEntityPaste",
    "PostGamemodeLoaded",
    "PostPlayerDeath",
    "PostPlayerDraw",
    "PostProcessPermitted",
    "PostReloadToolsMenu",
    "PostRender",
    "PostRenderVGUI",
    "PreAutoRefresh",
    "PreCleanupMap",
    "PreDrawEffects",
    "PreDrawHalos",
    "PreDrawHUD",
    "PreDrawOpaqueRenderables",
    "PreDrawPlayerHands",
    "PreDrawSkyBox",
    "PreDrawTranslucentRenderables",
    "PreDrawViewModel",
    "PreEntityCopy",
    "PreGamemodeLoaded",
    "PrePlayerDraw",
    "PreReloadToolsMenu",
    "PreRender",
    "PreventScreenClicks",
    "PrimaryAttack",
    "PrintWeaponInfo",
    "PropBreak",
    "Reload",
    "Render",
    "RenderOverride",
    "RenderScene",
    "RenderScreen",
    "RenderScreenspaceEffects",
    "Restored",
    "RightClick",
    "RunAI",
    "RunBehaviour",
    "RunEngineTask",
    "RunTask",
    "Saved",
    "ScaleNPCDamage",
    "ScalePlayerDamage",
    "ScheduleFinished",
    "ScoreboardHide",
    "ScoreboardShow",
    "SecondaryAttack",
    "SelectSchedule",
    "SetAutomaticFrameAdvance",
    "SetDeploySpeed",
    "SetModel",
    "SetPlayerSpeed",
    "SetTask",
    "SetupDataTables",
    "SetupMove",
    "SetupPlayerVisibility",
    "SetupSkyboxFog",
    "SetupWorldFog",
    "SetWeaponHoldType",
    "ShootBullet",
    "ShootEffects",
    "ShouldCollide",
    "ShouldDrawLocalPlayer",
    "ShouldDropOnDie",
    "ShowHelp",
    "ShowTeam",
    "ShutDown",
    "Spawn",
    "SpawnFunction",
    "SpawniconGenerated",
    "SpawnMenuEnabled",
    "SpawnMenuOpen",
    "StartChat",
    "StartCommand",
    "StartEngineSchedule",
    "StartEngineTask",
    "StartEntityDriving",
    "StartGame",
    "StartMove",
    "StartSchedule",
    "StartTask",
    "StartTouch",
    "StoreOutput",
    "TakePrimaryAmmo",
    "TakeSecondaryAmmo",
    "TaskFinished",
    "TaskTime",
    "TestCollision",
    "Think",
    "Tick",
    "Touch",
    "TranslateActivity",
    "TranslateFOV",
    "TriggerOutput",
    "UpdateAnimation",
    "UpdateTransmitState",
    "Use",
    "VariableEdited",
    "VehicleMove",
    "VGUIMousePressAllowed",
    "VGUIMousePressed",
    "ViewModelChanged",
    "ViewModelDrawn",
    "WeaponEquip",
    "WorkshopDownloadedFile",
    "WorkshopDownloadFile",
    "WorkshopDownloadProgress",
    "WorkshopDownloadTotals",
    "WorkshopEnd",
    "WorkshopStart",
    "WorkshopSubscriptionsProgress",
    {
      "trigger": "Forward",
      "contents": "Forward()"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Angle angle})"
    },
    {
      "trigger": "Div",
      "contents": "Div(${1:number scalar})"
    },
    {
      "trigger": "IsZero",
      "contents": "IsZero()"
    },
    {
      "trigger": "Normalize",
      "contents": "Normalize()"
    },
    {
      "trigger": "Mul",
      "contents": "Mul(${1:number scalar})"
    },
    {
      "trigger": "Right",
      "contents": "Right()"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:Angle originalAngle})"
    },
    {
      "trigger": "RotateAroundAxis",
      "contents": "RotateAroundAxis(${1:Vector axis}, ${2:number rotation})"
    },
    {
      "trigger": "SnapTo",
      "contents": "SnapTo(${1:string axis}, ${2:number target})"
    },
    {
      "trigger": "Up",
      "contents": "Up()"
    },
    {
      "trigger": "Sub",
      "contents": "Sub(${1:Angle angle})"
    },
    {
      "trigger": "Zero",
      "contents": "Zero()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetAttachment",
      "contents": "GetAttachment()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetDamageType",
      "contents": "GetDamageType()"
    },
    {
      "trigger": "GetEntIndex",
      "contents": "GetEntIndex()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()"
    },
    {
      "trigger": "GetFlags",
      "contents": "GetFlags()"
    },
    {
      "trigger": "GetMagnitude",
      "contents": "GetMagnitude()"
    },
    {
      "trigger": "GetHitBox",
      "contents": "GetHitBox()"
    },
    {
      "trigger": "GetMaterialIndex",
      "contents": "GetMaterialIndex()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()"
    },
    {
      "trigger": "GetOrigin",
      "contents": "GetOrigin()"
    },
    {
      "trigger": "GetRadius",
      "contents": "GetRadius()"
    },
    {
      "trigger": "GetScale",
      "contents": "GetScale()"
    },
    {
      "trigger": "GetStart",
      "contents": "GetStart()"
    },
    {
      "trigger": "GetSurfaceProp",
      "contents": "GetSurfaceProp()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetAttachment",
      "contents": "SetAttachment(${1:number attachment})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:number color})"
    },
    {
      "trigger": "SetDamageType",
      "contents": "SetDamageType()"
    },
    {
      "trigger": "SetEntIndex",
      "contents": "SetEntIndex(${1:number entIndex})"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity entity})"
    },
    {
      "trigger": "SetFlags",
      "contents": "SetFlags(${1:number flags})"
    },
    {
      "trigger": "SetMagnitude",
      "contents": "SetMagnitude(${1:number magnitude})"
    },
    {
      "trigger": "SetHitBox",
      "contents": "SetHitBox(${1:number hitBoxIndex})"
    },
    {
      "trigger": "SetMaterialIndex",
      "contents": "SetMaterialIndex(${1:number materialIndex})"
    },
    {
      "trigger": "SetNormal",
      "contents": "SetNormal(${1:Vector normal})"
    },
    {
      "trigger": "SetOrigin",
      "contents": "SetOrigin(${1:Vector origin})"
    },
    {
      "trigger": "SetRadius",
      "contents": "SetRadius(${1:number radius})"
    },
    {
      "trigger": "SetScale",
      "contents": "SetScale(${1:number scale})"
    },
    {
      "trigger": "SetSurfaceProp",
      "contents": "SetSurfaceProp(${1:number surfaceProperties})"
    },
    {
      "trigger": "SetStart",
      "contents": "SetStart(${1:Vector start})"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Vector position})"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()"
    },
    {
      "trigger": "Finish",
      "contents": "Finish()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "GetNumActiveParticles",
      "contents": "GetNumActiveParticles()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "SetNearClip",
      "contents": "SetNearClip(${1:number distanceMin}, ${2:number distanceMax})"
    },
    {
      "trigger": "SetBBox",
      "contents": "SetBBox(${1:Vector mins}, ${2:Vector maxs})"
    },
    {
      "trigger": "SetNoDraw",
      "contents": "SetNoDraw(${1:boolean noDraw})"
    },
    {
      "trigger": "SetParticleCullRadius",
      "contents": "SetParticleCullRadius(${1:number radius})"
    },
    {
      "trigger": "Approach",
      "contents": "Approach(${1:Vector goal}, ${2:number goalweight})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})"
    },
    {
      "trigger": "ClearStuck",
      "contents": "ClearStuck()"
    },
    {
      "trigger": "GetAcceleration",
      "contents": "GetAcceleration()"
    },
    {
      "trigger": "FaceTowards",
      "contents": "FaceTowards(${1:Vector goal})"
    },
    {
      "trigger": "GetCurrentAcceleration",
      "contents": "GetCurrentAcceleration()"
    },
    {
      "trigger": "GetDeceleration",
      "contents": "GetDeceleration()"
    },
    {
      "trigger": "GetDeathDropHeight",
      "contents": "GetDeathDropHeight()"
    },
    {
      "trigger": "GetGroundMotionVector",
      "contents": "GetGroundMotionVector()"
    },
    {
      "trigger": "GetJumpHeight",
      "contents": "GetJumpHeight()"
    },
    {
      "trigger": "GetMaxJumpHeight",
      "contents": "GetMaxJumpHeight()"
    },
    {
      "trigger": "GetMaxYawRate",
      "contents": "GetMaxYawRate()"
    },
    {
      "trigger": "GetNextBot",
      "contents": "GetNextBot()"
    },
    {
      "trigger": "GetStepHeight",
      "contents": "GetStepHeight()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()"
    },
    {
      "trigger": "IsAreaTraversable",
      "contents": "IsAreaTraversable(${1:CNavArea area})"
    },
    {
      "trigger": "IsAttemptingToMove",
      "contents": "IsAttemptingToMove()"
    },
    {
      "trigger": "IsClimbingOrJumping",
      "contents": "IsClimbingOrJumping()"
    },
    {
      "trigger": "IsOnGround",
      "contents": "IsOnGround()"
    },
    {
      "trigger": "IsStuck",
      "contents": "IsStuck()"
    },
    {
      "trigger": "IsUsingLadder",
      "contents": "IsUsingLadder()"
    },
    {
      "trigger": "Jump",
      "contents": "Jump()"
    },
    {
      "trigger": "JumpAcrossGap",
      "contents": "JumpAcrossGap(${1:Vector landingGoal}, ${2:Vector landingForward})"
    },
    {
      "trigger": "SetAcceleration",
      "contents": "SetAcceleration(${1:number speed})"
    },
    {
      "trigger": "SetDeceleration",
      "contents": "SetDeceleration(${1:number deceleration})"
    },
    {
      "trigger": "SetJumpHeight",
      "contents": "SetJumpHeight(${1:number height})"
    },
    {
      "trigger": "SetMaxYawRate",
      "contents": "SetMaxYawRate(${1:number yawRate})"
    },
    {
      "trigger": "SetStepHeight",
      "contents": "SetStepHeight(${1:number height})"
    },
    {
      "trigger": "SetDeathDropHeight",
      "contents": "SetDeathDropHeight(${1:number height})"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetAirResistance",
      "contents": "GetAirResistance()"
    },
    {
      "trigger": "SetDesiredSpeed",
      "contents": "SetDesiredSpeed(${1:number speed})"
    },
    {
      "trigger": "GetBounce",
      "contents": "GetBounce()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetAngleVelocity",
      "contents": "GetAngleVelocity()"
    },
    {
      "trigger": "GetDieTime",
      "contents": "GetDieTime()"
    },
    {
      "trigger": "GetEndAlpha",
      "contents": "GetEndAlpha()"
    },
    {
      "trigger": "GetEndLength",
      "contents": "GetEndLength()"
    },
    {
      "trigger": "GetEndSize",
      "contents": "GetEndSize()"
    },
    {
      "trigger": "GetGravity",
      "contents": "GetGravity()"
    },
    {
      "trigger": "GetLifeTime",
      "contents": "GetLifeTime()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetRoll",
      "contents": "GetRoll()"
    },
    {
      "trigger": "GetRollDelta",
      "contents": "GetRollDelta()"
    },
    {
      "trigger": "GetStartAlpha",
      "contents": "GetStartAlpha()"
    },
    {
      "trigger": "GetStartLength",
      "contents": "GetStartLength()"
    },
    {
      "trigger": "GetStartSize",
      "contents": "GetStartSize()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()"
    },
    {
      "trigger": "SetAirResistance",
      "contents": "SetAirResistance(${1:number airResistance})"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetAngleVelocity",
      "contents": "SetAngleVelocity(${1:Angle angVel})"
    },
    {
      "trigger": "SetBounce",
      "contents": "SetBounce(${1:number bounce})"
    },
    {
      "trigger": "SetCollideCallback",
      "contents": "SetCollideCallback()"
    },
    {
      "trigger": "SetCollide",
      "contents": "SetCollide(${1:boolean shouldCollide})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:number r}, ${2:number g}, ${3:number b})"
    },
    {
      "trigger": "SetDieTime",
      "contents": "SetDieTime(${1:number dieTime})"
    },
    {
      "trigger": "SetEndLength",
      "contents": "SetEndLength(${1:number endLength})"
    },
    {
      "trigger": "SetEndAlpha",
      "contents": "SetEndAlpha(${1:number endAlpha})"
    },
    {
      "trigger": "SetEndSize",
      "contents": "SetEndSize(${1:number endSize})"
    },
    {
      "trigger": "SetGravity",
      "contents": "SetGravity(${1:Vector gravity})"
    },
    {
      "trigger": "SetLifeTime",
      "contents": "SetLifeTime(${1:number lifeTime})"
    },
    {
      "trigger": "SetLighting",
      "contents": "SetLighting(${1:boolean useLighting})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector pos})"
    },
    {
      "trigger": "SetNextThink",
      "contents": "SetNextThink(${1:number nextThink})"
    },
    {
      "trigger": "SetRoll",
      "contents": "SetRoll(${1:number roll})"
    },
    {
      "trigger": "SetStartAlpha",
      "contents": "SetStartAlpha(${1:number startAlpha})"
    },
    {
      "trigger": "SetRollDelta",
      "contents": "SetRollDelta(${1:number rollDelta})"
    },
    {
      "trigger": "SetStartLength",
      "contents": "SetStartLength(${1:number startLength})"
    },
    {
      "trigger": "SetStartSize",
      "contents": "SetStartSize(${1:number startSize})"
    },
    {
      "trigger": "SetThinkFunction",
      "contents": "SetThinkFunction()"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector vel})"
    },
    {
      "trigger": "SetVelocityScale",
      "contents": "SetVelocityScale(${1:boolean doScale = false})"
    },
    {
      "trigger": "AddKey",
      "contents": "AddKey()"
    },
    {
      "trigger": "GetAbsMoveAngles",
      "contents": "GetAbsMoveAngles()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetConstraintRadius",
      "contents": "GetConstraintRadius()"
    },
    {
      "trigger": "GetButtons",
      "contents": "GetButtons()"
    },
    {
      "trigger": "GetForwardSpeed",
      "contents": "GetForwardSpeed()"
    },
    {
      "trigger": "GetImpulseCommand",
      "contents": "GetImpulseCommand()"
    },
    {
      "trigger": "GetMaxClientSpeed",
      "contents": "GetMaxClientSpeed()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()"
    },
    {
      "trigger": "GetMoveAngles",
      "contents": "GetMoveAngles()"
    },
    {
      "trigger": "GetOldButtons",
      "contents": "GetOldButtons()"
    },
    {
      "trigger": "GetOldAngles",
      "contents": "GetOldAngles()"
    },
    {
      "trigger": "GetOrigin",
      "contents": "GetOrigin()"
    },
    {
      "trigger": "GetUpSpeed",
      "contents": "GetUpSpeed()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()"
    },
    {
      "trigger": "GetSideSpeed",
      "contents": "GetSideSpeed()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown()"
    },
    {
      "trigger": "KeyPressed",
      "contents": "KeyPressed()"
    },
    {
      "trigger": "KeyReleased",
      "contents": "KeyReleased()"
    },
    {
      "trigger": "KeyWasDown",
      "contents": "KeyWasDown()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetAbsMoveAngles",
      "contents": "SetAbsMoveAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetConstraintRadius",
      "contents": "SetConstraintRadius(${1:number radius})"
    },
    {
      "trigger": "SetButtons",
      "contents": "SetButtons()"
    },
    {
      "trigger": "SetForwardSpeed",
      "contents": "SetForwardSpeed(${1:number speed})"
    },
    {
      "trigger": "SetImpulseCommand",
      "contents": "SetImpulseCommand(${1:number impulse})"
    },
    {
      "trigger": "SetMaxSpeed",
      "contents": "SetMaxSpeed(${1:number maxSpeed})"
    },
    {
      "trigger": "SetMaxClientSpeed",
      "contents": "SetMaxClientSpeed(${1:number maxSpeed})"
    },
    {
      "trigger": "SetMoveAngles",
      "contents": "SetMoveAngles(${1:Angle dir})"
    },
    {
      "trigger": "SetOldAngles",
      "contents": "SetOldAngles(${1:Angle aimAng})"
    },
    {
      "trigger": "SetOldButtons",
      "contents": "SetOldButtons()"
    },
    {
      "trigger": "SetOrigin",
      "contents": "SetOrigin(${1:Vector pos})"
    },
    {
      "trigger": "SetSideSpeed",
      "contents": "SetSideSpeed(${1:number speed})"
    },
    {
      "trigger": "SetUpSpeed",
      "contents": "SetUpSpeed(${1:number speed})"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "AddHidingSpot",
      "contents": "AddHidingSpot(${1:Vector pos}, ${2:number flags = 7})"
    },
    {
      "trigger": "AddToClosedList",
      "contents": "AddToClosedList()"
    },
    {
      "trigger": "AddToOpenList",
      "contents": "AddToOpenList()"
    },
    {
      "trigger": "ClearSearchLists",
      "contents": "ClearSearchLists()"
    },
    {
      "trigger": "ComputeAdjacentConnectionHeightChange",
      "contents": "ComputeAdjacentConnectionHeightChange(${1:CNavArea navarea})"
    },
    {
      "trigger": "ComputeDirection",
      "contents": "ComputeDirection(${1:Vector pos})"
    },
    {
      "trigger": "ComputeGroundHeightChange",
      "contents": "ComputeGroundHeightChange(${1:CNavArea navArea})"
    },
    {
      "trigger": "ConnectTo",
      "contents": "ConnectTo()"
    },
    {
      "trigger": "Contains",
      "contents": "Contains(${1:Vector pos})"
    },
    {
      "trigger": "Disconnect",
      "contents": "Disconnect()"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()"
    },
    {
      "trigger": "DrawSpots",
      "contents": "DrawSpots()"
    },
    {
      "trigger": "GetAdjacentAreas",
      "contents": "GetAdjacentAreas()"
    },
    {
      "trigger": "GetAdjacentAreasAtSide",
      "contents": "GetAdjacentAreasAtSide()"
    },
    {
      "trigger": "GetAdjacentCount",
      "contents": "GetAdjacentCount()"
    },
    {
      "trigger": "GetAdjacentCountAtSide",
      "contents": "GetAdjacentCountAtSide()"
    },
    {
      "trigger": "GetCenter",
      "contents": "GetCenter()"
    },
    {
      "trigger": "GetAttributes",
      "contents": "GetAttributes()"
    },
    {
      "trigger": "GetClosestPointOnArea",
      "contents": "GetClosestPointOnArea(${1:Vector pos})"
    },
    {
      "trigger": "GetCorner",
      "contents": "GetCorner()"
    },
    {
      "trigger": "GetCostSoFar",
      "contents": "GetCostSoFar()"
    },
    {
      "trigger": "GetExposedSpots",
      "contents": "GetExposedSpots()"
    },
    {
      "trigger": "GetExtentInfo",
      "contents": "GetExtentInfo()"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()"
    },
    {
      "trigger": "GetHidingSpots",
      "contents": "GetHidingSpots(${1:number type = 1})"
    },
    {
      "trigger": "GetIncomingConnections",
      "contents": "GetIncomingConnections()"
    },
    {
      "trigger": "GetIncomingConnectionsAtSide",
      "contents": "GetIncomingConnectionsAtSide()"
    },
    {
      "trigger": "GetLaddersAtSide",
      "contents": "GetLaddersAtSide()"
    },
    {
      "trigger": "GetLadders",
      "contents": "GetLadders()"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()"
    },
    {
      "trigger": "GetParentHow",
      "contents": "GetParentHow()"
    },
    {
      "trigger": "GetPlace",
      "contents": "GetPlace()"
    },
    {
      "trigger": "GetRandomAdjacentAreaAtSide",
      "contents": "GetRandomAdjacentAreaAtSide()"
    },
    {
      "trigger": "GetRandomPoint",
      "contents": "GetRandomPoint()"
    },
    {
      "trigger": "GetSizeX",
      "contents": "GetSizeX()"
    },
    {
      "trigger": "GetSizeY",
      "contents": "GetSizeY()"
    },
    {
      "trigger": "GetTotalCost",
      "contents": "GetTotalCost()"
    },
    {
      "trigger": "GetZ",
      "contents": "GetZ(${1:Vector pos})"
    },
    {
      "trigger": "HasAttributes",
      "contents": "HasAttributes()"
    },
    {
      "trigger": "IsBlocked",
      "contents": "IsBlocked(${1:number teamID = -2}, ${2:boolean ignoreNavBlockers = false})"
    },
    {
      "trigger": "IsClosed",
      "contents": "IsClosed()"
    },
    {
      "trigger": "IsConnected",
      "contents": "IsConnected()"
    },
    {
      "trigger": "IsCoplanar",
      "contents": "IsCoplanar(${1:CNavArea navArea})"
    },
    {
      "trigger": "IsConnectedAtSide",
      "contents": "IsConnectedAtSide()"
    },
    {
      "trigger": "IsFlat",
      "contents": "IsFlat()"
    },
    {
      "trigger": "IsOpenListEmpty",
      "contents": "IsOpenListEmpty()"
    },
    {
      "trigger": "IsOpen",
      "contents": "IsOpen()"
    },
    {
      "trigger": "IsOverlapping",
      "contents": "IsOverlapping(${1:Vector pos}, ${2:number tolerance = 0})"
    },
    {
      "trigger": "IsOverlappingArea",
      "contents": "IsOverlappingArea()"
    },
    {
      "trigger": "IsRoughlySquare",
      "contents": "IsRoughlySquare()"
    },
    {
      "trigger": "IsUnderwater",
      "contents": "IsUnderwater()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "IsVisible",
      "contents": "IsVisible(${1:Vector pos})"
    },
    {
      "trigger": "PlaceOnGround",
      "contents": "PlaceOnGround()"
    },
    {
      "trigger": "PopOpenList",
      "contents": "PopOpenList()"
    },
    {
      "trigger": "RemoveFromClosedList",
      "contents": "RemoveFromClosedList()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "SetAttributes",
      "contents": "SetAttributes()"
    },
    {
      "trigger": "SetCorner",
      "contents": "SetCorner(${1:Vector position})"
    },
    {
      "trigger": "SetCostSoFar",
      "contents": "SetCostSoFar(${1:number cost})"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:CNavArea parent})"
    },
    {
      "trigger": "SetPlace",
      "contents": "SetPlace(${1:string place})"
    },
    {
      "trigger": "SetTotalCost",
      "contents": "SetTotalCost(${1:number cost})"
    },
    {
      "trigger": "UpdateOnOpenList",
      "contents": "UpdateOnOpenList()"
    },
    {
      "trigger": "ConnectTo",
      "contents": "ConnectTo(${1:CNavArea area})"
    },
    {
      "trigger": "Disconnect",
      "contents": "Disconnect()"
    },
    {
      "trigger": "GetBottom",
      "contents": "GetBottom()"
    },
    {
      "trigger": "GetBottomArea",
      "contents": "GetBottomArea()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()"
    },
    {
      "trigger": "GetPosAtHeight",
      "contents": "GetPosAtHeight(${1:number height})"
    },
    {
      "trigger": "GetTopBehindArea",
      "contents": "GetTopBehindArea()"
    },
    {
      "trigger": "GetTopForwardArea",
      "contents": "GetTopForwardArea()"
    },
    {
      "trigger": "GetTop",
      "contents": "GetTop()"
    },
    {
      "trigger": "GetTopLeftArea",
      "contents": "GetTopLeftArea()"
    },
    {
      "trigger": "GetTopRightArea",
      "contents": "GetTopRightArea()"
    },
    {
      "trigger": "IsConnectedAtSide",
      "contents": "IsConnectedAtSide()"
    },
    {
      "trigger": "GetWidth",
      "contents": "GetWidth()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "SetBottomArea",
      "contents": "SetBottomArea(${1:CNavArea area})"
    },
    {
      "trigger": "SetTopBehindArea",
      "contents": "SetTopBehindArea(${1:CNavArea area})"
    },
    {
      "trigger": "SetTopForwardArea",
      "contents": "SetTopForwardArea(${1:CNavArea area})"
    },
    {
      "trigger": "SetTopLeftArea",
      "contents": "SetTopLeftArea(${1:CNavArea area})"
    },
    {
      "trigger": "AddControlPoint",
      "contents": "AddControlPoint(${1:number cpID}, ${2:Entity ent}, ${3:number entAttachment = 0})"
    },
    {
      "trigger": "SetTopRightArea",
      "contents": "SetTopRightArea(${1:CNavArea area})"
    },
    {
      "trigger": "GetAutoUpdateBBox",
      "contents": "GetAutoUpdateBBox()"
    },
    {
      "trigger": "GetEffectName",
      "contents": "GetEffectName()"
    },
    {
      "trigger": "GetHighestControlPoint",
      "contents": "GetHighestControlPoint()"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "IsFinished",
      "contents": "IsFinished()"
    },
    {
      "trigger": "IsViewModelEffect",
      "contents": "IsViewModelEffect()"
    },
    {
      "trigger": "Restart",
      "contents": "Restart()"
    },
    {
      "trigger": "Render",
      "contents": "Render()"
    },
    {
      "trigger": "SetControlPoint",
      "contents": "SetControlPoint(${1:number cpID}, ${2:Vector value})"
    },
    {
      "trigger": "SetControlPointForwardVector",
      "contents": "SetControlPointForwardVector(${1:number cpID}, ${2:Vector forward})"
    },
    {
      "trigger": "SetControlPointEntity",
      "contents": "SetControlPointEntity(${1:number child}, ${2:Entity parent})"
    },
    {
      "trigger": "SetControlPointOrientation",
      "contents": "SetControlPointOrientation(${1:number cpID}, ${2:Vector forward}, ${3:Vector right}, ${4:Vector up})"
    },
    {
      "trigger": "SetControlPointParent",
      "contents": "SetControlPointParent(${1:number child}, ${2:number parent})"
    },
    {
      "trigger": "SetControlPointRightVector",
      "contents": "SetControlPointRightVector(${1:number cpID}, ${2:Vector right})"
    },
    {
      "trigger": "SetShouldDraw",
      "contents": "SetShouldDraw(${1:boolean should})"
    },
    {
      "trigger": "SetIsViewModelEffect",
      "contents": "SetIsViewModelEffect(${1:boolean isViewModel})"
    },
    {
      "trigger": "SetControlPointUpVector",
      "contents": "SetControlPointUpVector(${1:number cpID}, ${2:Vector upward})"
    },
    {
      "trigger": "StartEmission",
      "contents": "StartEmission(${1:boolean infiniteOnly = false})"
    },
    {
      "trigger": "SetSortOrigin",
      "contents": "SetSortOrigin(${1:Vector origin})"
    },
    {
      "trigger": "StopEmission",
      "contents": "StopEmission(${1:boolean infiniteOnly = false}, ${2:boolean removeAllParticles = false}, ${3:boolean wakeOnStop = false})"
    },
    {
      "trigger": "StopEmissionAndDestroyImmediately",
      "contents": "StopEmissionAndDestroyImmediately()"
    },
    {
      "trigger": "ToVector",
      "contents": "ToVector()"
    },
    {
      "trigger": "GetBool",
      "contents": "GetBool()"
    },
    {
      "trigger": "GetDefault",
      "contents": "GetDefault()"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat()"
    },
    {
      "trigger": "GetHelpText",
      "contents": "GetHelpText()"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetString",
      "contents": "GetString()"
    },
    {
      "trigger": "SetBool",
      "contents": "SetBool(${1:boolean value})"
    },
    {
      "trigger": "SetFloat",
      "contents": "SetFloat(${1:number value})"
    },
    {
      "trigger": "SetInt",
      "contents": "SetInt(${1:number value})"
    },
    {
      "trigger": "SetString",
      "contents": "SetString(${1:string value})"
    },
    {
      "trigger": "AddAllPlayers",
      "contents": "AddAllPlayers()"
    },
    {
      "trigger": "AddPAS",
      "contents": "AddPAS(${1:Vector pos})"
    },
    {
      "trigger": "AddPVS",
      "contents": "AddPVS(${1:Vector Position})"
    },
    {
      "trigger": "AddPlayer",
      "contents": "AddPlayer(${1:Player Player})"
    },
    {
      "trigger": "AddRecipientsByTeam",
      "contents": "AddRecipientsByTeam(${1:number teamid})"
    },
    {
      "trigger": "GetCount",
      "contents": "GetCount()"
    },
    {
      "trigger": "GetPlayers",
      "contents": "GetPlayers()"
    },
    {
      "trigger": "RemoveAllPlayers",
      "contents": "RemoveAllPlayers()"
    },
    {
      "trigger": "RemovePAS",
      "contents": "RemovePAS(${1:Vector position})"
    },
    {
      "trigger": "RemovePlayer",
      "contents": "RemovePlayer(${1:Player Player})"
    },
    {
      "trigger": "RemoveRecipientsByTeam",
      "contents": "RemoveRecipientsByTeam(${1:number teamid})"
    },
    {
      "trigger": "RemovePVS",
      "contents": "RemovePVS(${1:Vector pos})"
    },
    {
      "trigger": "RemoveRecipientsNotOnTeam",
      "contents": "RemoveRecipientsNotOnTeam(${1:number teamid})"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "ChangePitch",
      "contents": "ChangePitch(${1:number pitch}, ${2:number deltaTime = 0})"
    },
    {
      "trigger": "ChangeVolume",
      "contents": "ChangeVolume(${1:number volume}, ${2:number deltaTime = 0})"
    },
    {
      "trigger": "FadeOut",
      "contents": "FadeOut(${1:number seconds})"
    },
    {
      "trigger": "GetPitch",
      "contents": "GetPitch()"
    },
    {
      "trigger": "GetDSP",
      "contents": "GetDSP()"
    },
    {
      "trigger": "GetSoundLevel",
      "contents": "GetSoundLevel()"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()"
    },
    {
      "trigger": "IsPlaying",
      "contents": "IsPlaying()"
    },
    {
      "trigger": "Play",
      "contents": "Play()"
    },
    {
      "trigger": "PlayEx",
      "contents": "PlayEx(${1:number volume}, ${2:number pitch})"
    },
    {
      "trigger": "SetDSP",
      "contents": "SetDSP(${1:number dsp})"
    },
    {
      "trigger": "SetSoundLevel",
      "contents": "SetSoundLevel()"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()"
    },
    {
      "trigger": "AddDamage",
      "contents": "AddDamage(${1:number damageIncrease})"
    },
    {
      "trigger": "GetAmmoType",
      "contents": "GetAmmoType()"
    },
    {
      "trigger": "GetAttacker",
      "contents": "GetAttacker()"
    },
    {
      "trigger": "GetDamage",
      "contents": "GetDamage()"
    },
    {
      "trigger": "GetBaseDamage",
      "contents": "GetBaseDamage()"
    },
    {
      "trigger": "GetDamageBonus",
      "contents": "GetDamageBonus()"
    },
    {
      "trigger": "GetDamageCustom",
      "contents": "GetDamageCustom()"
    },
    {
      "trigger": "GetDamageForce",
      "contents": "GetDamageForce()"
    },
    {
      "trigger": "GetDamagePosition",
      "contents": "GetDamagePosition()"
    },
    {
      "trigger": "GetDamageType",
      "contents": "GetDamageType()"
    },
    {
      "trigger": "GetInflictor",
      "contents": "GetInflictor()"
    },
    {
      "trigger": "GetMaxDamage",
      "contents": "GetMaxDamage()"
    },
    {
      "trigger": "GetReportedPosition",
      "contents": "GetReportedPosition()"
    },
    {
      "trigger": "IsBulletDamage",
      "contents": "IsBulletDamage()"
    },
    {
      "trigger": "IsDamageType",
      "contents": "IsDamageType()"
    },
    {
      "trigger": "IsExplosionDamage",
      "contents": "IsExplosionDamage()"
    },
    {
      "trigger": "ScaleDamage",
      "contents": "ScaleDamage(${1:number scale})"
    },
    {
      "trigger": "SetAmmoType",
      "contents": "SetAmmoType(${1:number ammoType})"
    },
    {
      "trigger": "IsFallDamage",
      "contents": "IsFallDamage()"
    },
    {
      "trigger": "SetAttacker",
      "contents": "SetAttacker(${1:Entity ent})"
    },
    {
      "trigger": "SetDamage",
      "contents": "SetDamage(${1:number damage})"
    },
    {
      "trigger": "SetDamageBonus",
      "contents": "SetDamageBonus(${1:number damage})"
    },
    {
      "trigger": "SetDamageCustom",
      "contents": "SetDamageCustom(${1:number DamageType})"
    },
    {
      "trigger": "SetDamageForce",
      "contents": "SetDamageForce(${1:Vector force})"
    },
    {
      "trigger": "SetDamageType",
      "contents": "SetDamageType()"
    },
    {
      "trigger": "SetDamagePosition",
      "contents": "SetDamagePosition(${1:Vector pos})"
    },
    {
      "trigger": "SetInflictor",
      "contents": "SetInflictor(${1:Entity inflictor})"
    },
    {
      "trigger": "SetMaxDamage",
      "contents": "SetMaxDamage(${1:number maxDamage})"
    },
    {
      "trigger": "SetReportedPosition",
      "contents": "SetReportedPosition(${1:Vector pos})"
    },
    {
      "trigger": "SubtractDamage",
      "contents": "SubtractDamage(${1:number damage})"
    },
    {
      "trigger": "ClearMovement",
      "contents": "ClearMovement()"
    },
    {
      "trigger": "ClearButtons",
      "contents": "ClearButtons()"
    },
    {
      "trigger": "CommandNumber",
      "contents": "CommandNumber()"
    },
    {
      "trigger": "GetButtons",
      "contents": "GetButtons()"
    },
    {
      "trigger": "GetForwardMove",
      "contents": "GetForwardMove()"
    },
    {
      "trigger": "GetImpulse",
      "contents": "GetImpulse()"
    },
    {
      "trigger": "GetMouseWheel",
      "contents": "GetMouseWheel()"
    },
    {
      "trigger": "GetMouseY",
      "contents": "GetMouseY()"
    },
    {
      "trigger": "GetMouseX",
      "contents": "GetMouseX()"
    },
    {
      "trigger": "GetSideMove",
      "contents": "GetSideMove()"
    },
    {
      "trigger": "GetViewAngles",
      "contents": "GetViewAngles()"
    },
    {
      "trigger": "GetUpMove",
      "contents": "GetUpMove()"
    },
    {
      "trigger": "IsForced",
      "contents": "IsForced()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown()"
    },
    {
      "trigger": "RemoveKey",
      "contents": "RemoveKey()"
    },
    {
      "trigger": "SetButtons",
      "contents": "SetButtons()"
    },
    {
      "trigger": "SelectWeapon",
      "contents": "SelectWeapon(${1:Weapon weapon})"
    },
    {
      "trigger": "SetForwardMove",
      "contents": "SetForwardMove(${1:number speed})"
    },
    {
      "trigger": "SetImpulse",
      "contents": "SetImpulse(${1:number speed})"
    },
    {
      "trigger": "SetMouseWheel",
      "contents": "SetMouseWheel(${1:number speed})"
    },
    {
      "trigger": "SetMouseX",
      "contents": "SetMouseX(${1:number speed})"
    },
    {
      "trigger": "SetMouseY",
      "contents": "SetMouseY(${1:number speed})"
    },
    {
      "trigger": "SetUpMove",
      "contents": "SetUpMove(${1:number speed})"
    },
    {
      "trigger": "SetSideMove",
      "contents": "SetSideMove(${1:number speed})"
    },
    {
      "trigger": "SetViewAngles",
      "contents": "SetViewAngles(${1:Angle viewAngle})"
    },
    {
      "trigger": "TickCount",
      "contents": "TickCount()"
    },
    {
      "trigger": "Activate",
      "contents": "Activate()"
    },
    {
      "trigger": "AddEffects",
      "contents": "AddEffects()"
    },
    {
      "trigger": "AddCallback",
      "contents": "AddCallback(${1:string hook}, ${2:function func})"
    },
    {
      "trigger": "AddEFlags",
      "contents": "AddEFlags()"
    },
    {
      "trigger": "AddGesture",
      "contents": "AddGesture(${1:boolean autokill = true})"
    },
    {
      "trigger": "AddFlags",
      "contents": "AddFlags()"
    },
    {
      "trigger": "AddGestureSequence",
      "contents": "AddGestureSequence(${1:boolean autokill = true})"
    },
    {
      "trigger": "AddLayeredSequence",
      "contents": "AddLayeredSequence(${1:number priority})"
    },
    {
      "trigger": "AddSolidFlags",
      "contents": "AddSolidFlags()"
    },
    {
      "trigger": "AddToMotionController",
      "contents": "AddToMotionController()"
    },
    {
      "trigger": "AlignAngles",
      "contents": "AlignAngles(${1:Angle from}, ${2:Angle to})"
    },
    {
      "trigger": "BecomeRagdollOnClient",
      "contents": "BecomeRagdollOnClient()"
    },
    {
      "trigger": "BeingLookedAtByLocalPlayer",
      "contents": "BeingLookedAtByLocalPlayer()"
    },
    {
      "trigger": "Blocked",
      "contents": "Blocked(${1:Entity entity})"
    },
    {
      "trigger": "BodyTarget",
      "contents": "BodyTarget(${1:Vector origin}, ${2:boolean noisy = false})"
    },
    {
      "trigger": "BoneLength",
      "contents": "BoneLength(${1:number boneID})"
    },
    {
      "trigger": "BoneHasFlag",
      "contents": "BoneHasFlag(${1:number boneID})"
    },
    {
      "trigger": "BoundingRadius",
      "contents": "BoundingRadius()"
    },
    {
      "trigger": "CallOnRemove",
      "contents": "CallOnRemove(${1:string identifier}, ${2:function removeFunc}, ${3:vararg argn...})"
    },
    {
      "trigger": "ClearPoseParameters",
      "contents": "ClearPoseParameters()"
    },
    {
      "trigger": "CollisionRulesChanged",
      "contents": "CollisionRulesChanged()"
    },
    {
      "trigger": "CreatedByMap",
      "contents": "CreatedByMap()"
    },
    {
      "trigger": "CreateParticleEffect",
      "contents": "CreateParticleEffect(${1:string particle}, ${2:number attachment})"
    },
    {
      "trigger": "CreateShadow",
      "contents": "CreateShadow()"
    },
    {
      "trigger": "DeleteOnRemove",
      "contents": "DeleteOnRemove(${1:Entity entityToRemove})"
    },
    {
      "trigger": "DisableMatrix",
      "contents": "DisableMatrix(${1:string matrixType})"
    },
    {
      "trigger": "DestroyShadow",
      "contents": "DestroyShadow()"
    },
    {
      "trigger": "DispatchTraceAttack",
      "contents": "DispatchTraceAttack(${1:CTakeDamageInfo damageInfo}, ${2:Vector dir = traceRes.HitNormal})"
    },
    {
      "trigger": "DontDeleteOnRemove",
      "contents": "DontDeleteOnRemove(${1:Entity entityToUnremove})"
    },
    {
      "trigger": "DrawModel",
      "contents": "DrawModel()"
    },
    {
      "trigger": "DrawShadow",
      "contents": "DrawShadow(${1:boolean shouldDraw})"
    },
    {
      "trigger": "DropToFloor",
      "contents": "DropToFloor()"
    },
    {
      "trigger": "DTVar",
      "contents": "DTVar(${1:string Type}, ${2:number ID}, ${3:string Name})"
    },
    {
      "trigger": "EnableConstraints",
      "contents": "EnableConstraints(${1:boolean toggleConstraints})"
    },
    {
      "trigger": "EmitSound",
      "contents": "EmitSound(${1:number pitchPercent = 100}, ${2:number volume = 1})"
    },
    {
      "trigger": "EnableCustomCollisions",
      "contents": "EnableCustomCollisions(${1:boolean useCustom})"
    },
    {
      "trigger": "EnableMatrix",
      "contents": "EnableMatrix(${1:string matrixType}, ${2:VMatrix matrix})"
    },
    {
      "trigger": "EntIndex",
      "contents": "EntIndex()"
    },
    {
      "trigger": "Extinguish",
      "contents": "Extinguish()"
    },
    {
      "trigger": "EyePos",
      "contents": "EyePos()"
    },
    {
      "trigger": "EyeAngles",
      "contents": "EyeAngles()"
    },
    {
      "trigger": "FindBodygroupByName",
      "contents": "FindBodygroupByName(${1:string name})"
    },
    {
      "trigger": "FindTransitionSequence",
      "contents": "FindTransitionSequence(${1:number currentSequence}, ${2:number goalSequence})"
    },
    {
      "trigger": "Fire",
      "contents": "Fire(${1:string input}, ${2:number delay = 0})"
    },
    {
      "trigger": "FireBullets",
      "contents": "FireBullets()"
    },
    {
      "trigger": "FollowBone",
      "contents": "FollowBone(${1:Entity parent = NULL}, ${2:number boneid})"
    },
    {
      "trigger": "ForcePlayerDrop",
      "contents": "ForcePlayerDrop()"
    },
    {
      "trigger": "GetAbsVelocity",
      "contents": "GetAbsVelocity()"
    },
    {
      "trigger": "FrameAdvance",
      "contents": "FrameAdvance()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetAnimInfo",
      "contents": "GetAnimInfo(${1:number animIndex})"
    },
    {
      "trigger": "GetAnimTime",
      "contents": "GetAnimTime()"
    },
    {
      "trigger": "GetAttachment",
      "contents": "GetAttachment(${1:number attachmentId})"
    },
    {
      "trigger": "GetAttachments",
      "contents": "GetAttachments()"
    },
    {
      "trigger": "GetBloodColor",
      "contents": "GetBloodColor()"
    },
    {
      "trigger": "GetBaseVelocity",
      "contents": "GetBaseVelocity()"
    },
    {
      "trigger": "GetBodygroup",
      "contents": "GetBodygroup(${1:number id})"
    },
    {
      "trigger": "GetBodygroupCount",
      "contents": "GetBodygroupCount(${1:number bodygroup})"
    },
    {
      "trigger": "GetBodygroupName",
      "contents": "GetBodygroupName(${1:number id})"
    },
    {
      "trigger": "GetBodyGroups",
      "contents": "GetBodyGroups()"
    },
    {
      "trigger": "GetBoneContents",
      "contents": "GetBoneContents()"
    },
    {
      "trigger": "GetBoneController",
      "contents": "GetBoneController(${1:number boneID})"
    },
    {
      "trigger": "GetBoneCount",
      "contents": "GetBoneCount()"
    },
    {
      "trigger": "GetBoneMatrix",
      "contents": "GetBoneMatrix(${1:number boneID})"
    },
    {
      "trigger": "GetBoneName",
      "contents": "GetBoneName(${1:number index})"
    },
    {
      "trigger": "GetBoneParent",
      "contents": "GetBoneParent(${1:number bone})"
    },
    {
      "trigger": "GetBonePosition",
      "contents": "GetBonePosition()"
    },
    {
      "trigger": "GetBoneSurfaceProp",
      "contents": "GetBoneSurfaceProp()"
    },
    {
      "trigger": "GetBrushPlane",
      "contents": "GetBrushPlane(${1:number id})"
    },
    {
      "trigger": "GetBrushPlaneCount",
      "contents": "GetBrushPlaneCount()"
    },
    {
      "trigger": "GetChildBones",
      "contents": "GetChildBones(${1:number boneid})"
    },
    {
      "trigger": "GetCallbacks",
      "contents": "GetCallbacks(${1:string hook})"
    },
    {
      "trigger": "GetClass",
      "contents": "GetClass()"
    },
    {
      "trigger": "GetCollisionBounds",
      "contents": "GetCollisionBounds()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetConstrainedEntities",
      "contents": "GetConstrainedEntities()"
    },
    {
      "trigger": "GetConstrainedPhysObjects",
      "contents": "GetConstrainedPhysObjects()"
    },
    {
      "trigger": "GetCreationID",
      "contents": "GetCreationID()"
    },
    {
      "trigger": "GetCreationTime",
      "contents": "GetCreationTime()"
    },
    {
      "trigger": "GetCreator",
      "contents": "GetCreator()"
    },
    {
      "trigger": "GetChildren",
      "contents": "GetChildren()"
    },
    {
      "trigger": "GetCollisionGroup",
      "contents": "GetCollisionGroup()"
    },
    {
      "trigger": "GetCustomCollisionCheck",
      "contents": "GetCustomCollisionCheck()"
    },
    {
      "trigger": "GetCycle",
      "contents": "GetCycle()"
    },
    {
      "trigger": "GetDTBool",
      "contents": "GetDTBool(${1:number key})"
    },
    {
      "trigger": "GetDTAngle",
      "contents": "GetDTAngle(${1:number key})"
    },
    {
      "trigger": "GetDTEntity",
      "contents": "GetDTEntity(${1:number key})"
    },
    {
      "trigger": "GetDTFloat",
      "contents": "GetDTFloat(${1:number key})"
    },
    {
      "trigger": "GetDTInt",
      "contents": "GetDTInt(${1:number key})"
    },
    {
      "trigger": "GetDTString",
      "contents": "GetDTString(${1:number key})"
    },
    {
      "trigger": "GetDTVector",
      "contents": "GetDTVector(${1:number key})"
    },
    {
      "trigger": "GetEFlags",
      "contents": "GetEFlags()"
    },
    {
      "trigger": "GetEffects",
      "contents": "GetEffects()"
    },
    {
      "trigger": "GetElasticity",
      "contents": "GetElasticity()"
    },
    {
      "trigger": "GetFlags",
      "contents": "GetFlags()"
    },
    {
      "trigger": "GetFlexBounds",
      "contents": "GetFlexBounds(${1:number flex})"
    },
    {
      "trigger": "GetFlexIDByName",
      "contents": "GetFlexIDByName(${1:string name})"
    },
    {
      "trigger": "GetFlexName",
      "contents": "GetFlexName(${1:number id})"
    },
    {
      "trigger": "GetFlexNum",
      "contents": "GetFlexNum()"
    },
    {
      "trigger": "GetFlexScale",
      "contents": "GetFlexScale()"
    },
    {
      "trigger": "GetForward",
      "contents": "GetForward()"
    },
    {
      "trigger": "GetFlexWeight",
      "contents": "GetFlexWeight(${1:number flex})"
    },
    {
      "trigger": "GetFriction",
      "contents": "GetFriction()"
    },
    {
      "trigger": "GetGravity",
      "contents": "GetGravity()"
    },
    {
      "trigger": "GetGroundEntity",
      "contents": "GetGroundEntity()"
    },
    {
      "trigger": "GetGroundSpeedVelocity",
      "contents": "GetGroundSpeedVelocity()"
    },
    {
      "trigger": "GetHitBoxBone",
      "contents": "GetHitBoxBone(${1:number hitbox})"
    },
    {
      "trigger": "GetHitboxBone",
      "contents": "GetHitboxBone()"
    },
    {
      "trigger": "GetHitBoxBounds",
      "contents": "GetHitBoxBounds(${1:number hitbox}, ${2:number group})"
    },
    {
      "trigger": "GetHitBoxCount",
      "contents": "GetHitBoxCount(${1:number group})"
    },
    {
      "trigger": "GetHitBoxGroupCount",
      "contents": "GetHitBoxGroupCount()"
    },
    {
      "trigger": "GetHitboxSet",
      "contents": "GetHitboxSet()"
    },
    {
      "trigger": "GetHitboxSetCount",
      "contents": "GetHitboxSetCount()"
    },
    {
      "trigger": "GetInternalVariable",
      "contents": "GetInternalVariable(${1:string VariableName})"
    },
    {
      "trigger": "GetKeyValues",
      "contents": "GetKeyValues()"
    },
    {
      "trigger": "GetLayerCycle",
      "contents": "GetLayerCycle(${1:number layerID})"
    },
    {
      "trigger": "GetLayerDuration",
      "contents": "GetLayerDuration(${1:number layerID})"
    },
    {
      "trigger": "GetLayerWeight",
      "contents": "GetLayerWeight(${1:number layerID})"
    },
    {
      "trigger": "GetLocalAngles",
      "contents": "GetLocalAngles()"
    },
    {
      "trigger": "GetLocalAngularVelocity",
      "contents": "GetLocalAngularVelocity()"
    },
    {
      "trigger": "GetManipulateBoneAngles",
      "contents": "GetManipulateBoneAngles(${1:number boneID})"
    },
    {
      "trigger": "GetLocalPos",
      "contents": "GetLocalPos()"
    },
    {
      "trigger": "GetManipulateBoneJiggle",
      "contents": "GetManipulateBoneJiggle(${1:number boneID})"
    },
    {
      "trigger": "GetManipulateBonePosition",
      "contents": "GetManipulateBonePosition(${1:number boneId})"
    },
    {
      "trigger": "GetManipulateBoneScale",
      "contents": "GetManipulateBoneScale(${1:number boneID})"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()"
    },
    {
      "trigger": "GetMaterials",
      "contents": "GetMaterials()"
    },
    {
      "trigger": "GetMaterialType",
      "contents": "GetMaterialType()"
    },
    {
      "trigger": "GetMaxHealth",
      "contents": "GetMaxHealth()"
    },
    {
      "trigger": "GetModel",
      "contents": "GetModel()"
    },
    {
      "trigger": "GetModelBounds",
      "contents": "GetModelBounds()"
    },
    {
      "trigger": "GetModelContents",
      "contents": "GetModelContents()"
    },
    {
      "trigger": "GetModelPhysBoneCount",
      "contents": "GetModelPhysBoneCount()"
    },
    {
      "trigger": "GetModelRadius",
      "contents": "GetModelRadius()"
    },
    {
      "trigger": "GetModelRenderBounds",
      "contents": "GetModelRenderBounds()"
    },
    {
      "trigger": "GetModelScale",
      "contents": "GetModelScale()"
    },
    {
      "trigger": "GetMoveParent",
      "contents": "GetMoveParent()"
    },
    {
      "trigger": "GetMoveCollide",
      "contents": "GetMoveCollide()"
    },
    {
      "trigger": "GetMomentaryRotButtonPos",
      "contents": "GetMomentaryRotButtonPos()"
    },
    {
      "trigger": "GetMoveType",
      "contents": "GetMoveType()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetNetworkAngles",
      "contents": "GetNetworkAngles()"
    },
    {
      "trigger": "GetNetworkedAngle",
      "contents": "GetNetworkedAngle(${1:string key}, ${2:Angle fallback = Angle( 0, 0, 0 )})"
    },
    {
      "trigger": "GetNetworkedBool",
      "contents": "GetNetworkedBool(${1:string key}, ${2:boolean fallback = false})"
    },
    {
      "trigger": "GetNetworkedEntity",
      "contents": "GetNetworkedEntity(${1:string key}, ${2:Entity fallback = NULL})"
    },
    {
      "trigger": "GetNetworkedFloat",
      "contents": "GetNetworkedFloat(${1:string key}, ${2:number fallback = 0})"
    },
    {
      "trigger": "GetNetworkedInt",
      "contents": "GetNetworkedInt(${1:string key}, ${2:number fallback = 0})"
    },
    {
      "trigger": "GetNetworkedString",
      "contents": "GetNetworkedString(${1:string key}, ${2:string fallback = \"\"})"
    },
    {
      "trigger": "GetNetworkedVarProxy",
      "contents": "GetNetworkedVarProxy(${1:string name})"
    },
    {
      "trigger": "GetNetworkedVarTable",
      "contents": "GetNetworkedVarTable()"
    },
    {
      "trigger": "GetNetworkedVector",
      "contents": "GetNetworkedVector(${1:string key}, ${2:Vector fallback = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "GetNetworkOrigin",
      "contents": "GetNetworkOrigin()"
    },
    {
      "trigger": "GetNoDraw",
      "contents": "GetNoDraw()"
    },
    {
      "trigger": "GetNumBodyGroups",
      "contents": "GetNumBodyGroups()"
    },
    {
      "trigger": "GetNumPoseParameters",
      "contents": "GetNumPoseParameters()"
    },
    {
      "trigger": "GetNWAngle",
      "contents": "GetNWAngle(${1:string key}, ${2:any fallback = Angle( 0, 0, 0 )})"
    },
    {
      "trigger": "GetNWBool",
      "contents": "GetNWBool(${1:string key}, ${2:any fallback = false})"
    },
    {
      "trigger": "GetNWEntity",
      "contents": "GetNWEntity(${1:string key}, ${2:any fallback = NULL})"
    },
    {
      "trigger": "GetNWFloat",
      "contents": "GetNWFloat(${1:string key}, ${2:any fallback = 0})"
    },
    {
      "trigger": "GetNWString",
      "contents": "GetNWString(${1:string key}, ${2:any fallback = \"\"})"
    },
    {
      "trigger": "GetNWInt",
      "contents": "GetNWInt(${1:string key}, ${2:any fallback = 0})"
    },
    {
      "trigger": "GetNWVarProxy",
      "contents": "GetNWVarProxy(${1:any key})"
    },
    {
      "trigger": "GetNWVarTable",
      "contents": "GetNWVarTable()"
    },
    {
      "trigger": "GetNWVector",
      "contents": "GetNWVector(${1:string key}, ${2:any fallback = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()"
    },
    {
      "trigger": "GetParentAttachment",
      "contents": "GetParentAttachment()"
    },
    {
      "trigger": "GetParentPhysNum",
      "contents": "GetParentPhysNum()"
    },
    {
      "trigger": "GetParentWorldTransformMatrix",
      "contents": "GetParentWorldTransformMatrix()"
    },
    {
      "trigger": "GetPersistent",
      "contents": "GetPersistent()"
    },
    {
      "trigger": "GetPhysicsObject",
      "contents": "GetPhysicsObject()"
    },
    {
      "trigger": "GetPhysicsAttacker",
      "contents": "GetPhysicsAttacker()"
    },
    {
      "trigger": "GetPhysicsObjectNum",
      "contents": "GetPhysicsObjectNum()"
    },
    {
      "trigger": "GetPhysicsObjectCount",
      "contents": "GetPhysicsObjectCount()"
    },
    {
      "trigger": "GetPlaybackRate",
      "contents": "GetPlaybackRate()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetPoseParameter",
      "contents": "GetPoseParameter(${1:string name})"
    },
    {
      "trigger": "GetPoseParameterName",
      "contents": "GetPoseParameterName(${1:number id})"
    },
    {
      "trigger": "GetPoseParameterRange",
      "contents": "GetPoseParameterRange(${1:number id})"
    },
    {
      "trigger": "GetPredictable",
      "contents": "GetPredictable()"
    },
    {
      "trigger": "GetRagdollOwner",
      "contents": "GetRagdollOwner()"
    },
    {
      "trigger": "GetRenderAngles",
      "contents": "GetRenderAngles()"
    },
    {
      "trigger": "GetRenderBounds",
      "contents": "GetRenderBounds()"
    },
    {
      "trigger": "GetRenderFX",
      "contents": "GetRenderFX()"
    },
    {
      "trigger": "GetRenderGroup",
      "contents": "GetRenderGroup()"
    },
    {
      "trigger": "GetRenderMode",
      "contents": "GetRenderMode()"
    },
    {
      "trigger": "GetRenderOrigin",
      "contents": "GetRenderOrigin()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()"
    },
    {
      "trigger": "GetRotatedAABB",
      "contents": "GetRotatedAABB(${1:Vector min}, ${2:Vector max})"
    },
    {
      "trigger": "GetSaveTable",
      "contents": "GetSaveTable()"
    },
    {
      "trigger": "GetSequence",
      "contents": "GetSequence()"
    },
    {
      "trigger": "GetSequenceActivityName",
      "contents": "GetSequenceActivityName(${1:number sequenceId})"
    },
    {
      "trigger": "GetSequenceActivity",
      "contents": "GetSequenceActivity(${1:number seq})"
    },
    {
      "trigger": "GetSequenceGroundSpeed",
      "contents": "GetSequenceGroundSpeed(${1:number sequenceId})"
    },
    {
      "trigger": "GetSequenceCount",
      "contents": "GetSequenceCount()"
    },
    {
      "trigger": "GetSequenceInfo",
      "contents": "GetSequenceInfo(${1:number sequenceId})"
    },
    {
      "trigger": "GetSequenceList",
      "contents": "GetSequenceList()"
    },
    {
      "trigger": "GetSequenceMoveDist",
      "contents": "GetSequenceMoveDist(${1:number sequenceId})"
    },
    {
      "trigger": "GetSequenceMovement",
      "contents": "GetSequenceMovement(${1:number startCycle}, ${2:number endCyclnde})"
    },
    {
      "trigger": "GetSequenceName",
      "contents": "GetSequenceName(${1:number index})"
    },
    {
      "trigger": "GetSequenceMoveYaw",
      "contents": "GetSequenceMoveYaw()"
    },
    {
      "trigger": "GetShouldPlayPickupSound",
      "contents": "GetShouldPlayPickupSound()"
    },
    {
      "trigger": "GetSkin",
      "contents": "GetSkin()"
    },
    {
      "trigger": "GetShouldServerRagdoll",
      "contents": "GetShouldServerRagdoll()"
    },
    {
      "trigger": "GetSolid",
      "contents": "GetSolid()"
    },
    {
      "trigger": "GetSolidFlags",
      "contents": "GetSolidFlags()"
    },
    {
      "trigger": "GetSpawnEffect",
      "contents": "GetSpawnEffect()"
    },
    {
      "trigger": "GetSpawnFlags",
      "contents": "GetSpawnFlags()"
    },
    {
      "trigger": "GetSubModels",
      "contents": "GetSubModels()"
    },
    {
      "trigger": "GetSubMaterial",
      "contents": "GetSubMaterial(${1:number index})"
    },
    {
      "trigger": "GetTable",
      "contents": "GetTable()"
    },
    {
      "trigger": "GetTouchTrace",
      "contents": "GetTouchTrace()"
    },
    {
      "trigger": "GetTransmitWithParent",
      "contents": "GetTransmitWithParent()"
    },
    {
      "trigger": "GetUp",
      "contents": "GetUp()"
    },
    {
      "trigger": "GetVar",
      "contents": "GetVar(${1:any key}, ${2:any default = nil})"
    },
    {
      "trigger": "GetUnFreezable",
      "contents": "GetUnFreezable()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()"
    },
    {
      "trigger": "GetWorkshopID",
      "contents": "GetWorkshopID()"
    },
    {
      "trigger": "GetWorldTransformMatrix",
      "contents": "GetWorldTransformMatrix()"
    },
    {
      "trigger": "GibBreakServer",
      "contents": "GibBreakServer(${1:Vector force})"
    },
    {
      "trigger": "GibBreakClient",
      "contents": "GibBreakClient(${1:Vector force}, ${2:table clr = nil})"
    },
    {
      "trigger": "HasSpawnFlags",
      "contents": "HasSpawnFlags()"
    },
    {
      "trigger": "HasFlexManipulatior",
      "contents": "HasFlexManipulatior()"
    },
    {
      "trigger": "HasBoneManipulations",
      "contents": "HasBoneManipulations()"
    },
    {
      "trigger": "HeadTarget",
      "contents": "HeadTarget(${1:Vector origin})"
    },
    {
      "trigger": "Health",
      "contents": "Health()"
    },
    {
      "trigger": "Ignite",
      "contents": "Ignite(${1:number length}, ${2:number radius = 0})"
    },
    {
      "trigger": "InitializeAsClientEntity",
      "contents": "InitializeAsClientEntity()"
    },
    {
      "trigger": "Input",
      "contents": "Input(${1:string input}, ${2:Entity activator}, ${3:Entity caller})"
    },
    {
      "trigger": "InstallDataTable",
      "contents": "InstallDataTable()"
    },
    {
      "trigger": "InvalidateBoneCache",
      "contents": "InvalidateBoneCache()"
    },
    {
      "trigger": "IsConstrained",
      "contents": "IsConstrained()"
    },
    {
      "trigger": "IsConstraint",
      "contents": "IsConstraint()"
    },
    {
      "trigger": "IsDormant",
      "contents": "IsDormant()"
    },
    {
      "trigger": "IsEffectActive",
      "contents": "IsEffectActive()"
    },
    {
      "trigger": "IsEFlagSet",
      "contents": "IsEFlagSet()"
    },
    {
      "trigger": "IsFlagSet",
      "contents": "IsFlagSet()"
    },
    {
      "trigger": "IsInWorld",
      "contents": "IsInWorld()"
    },
    {
      "trigger": "IsLagCompensated",
      "contents": "IsLagCompensated()"
    },
    {
      "trigger": "IsLineOfSightClear",
      "contents": "IsLineOfSightClear()"
    },
    {
      "trigger": "IsMarkedForDeletion",
      "contents": "IsMarkedForDeletion()"
    },
    {
      "trigger": "IsNPC",
      "contents": "IsNPC()"
    },
    {
      "trigger": "IsOnFire",
      "contents": "IsOnFire()"
    },
    {
      "trigger": "IsOnGround",
      "contents": "IsOnGround()"
    },
    {
      "trigger": "IsPlayerHolding",
      "contents": "IsPlayerHolding()"
    },
    {
      "trigger": "IsPlayer",
      "contents": "IsPlayer()"
    },
    {
      "trigger": "IsPlayingGesture",
      "contents": "IsPlayingGesture()"
    },
    {
      "trigger": "IsRagdoll",
      "contents": "IsRagdoll()"
    },
    {
      "trigger": "IsScripted",
      "contents": "IsScripted()"
    },
    {
      "trigger": "IsSolid",
      "contents": "IsSolid()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "IsValidLayer",
      "contents": "IsValidLayer(${1:number layerID})"
    },
    {
      "trigger": "IsVehicle",
      "contents": "IsVehicle()"
    },
    {
      "trigger": "IsWeapon",
      "contents": "IsWeapon()"
    },
    {
      "trigger": "IsWidget",
      "contents": "IsWidget()"
    },
    {
      "trigger": "IsWorld",
      "contents": "IsWorld()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector lpos})"
    },
    {
      "trigger": "LookupAttachment",
      "contents": "LookupAttachment(${1:string attachmentName})"
    },
    {
      "trigger": "LocalToWorldAngles",
      "contents": "LocalToWorldAngles(${1:Angle ang})"
    },
    {
      "trigger": "LookupBone",
      "contents": "LookupBone(${1:string boneName})"
    },
    {
      "trigger": "LookupSequence",
      "contents": "LookupSequence(${1:string name})"
    },
    {
      "trigger": "MakePhysicsObjectAShadow",
      "contents": "MakePhysicsObjectAShadow(${1:boolean allowPhysicsMovement}, ${2:boolean allowPhysicsRotation})"
    },
    {
      "trigger": "ManipulateBoneAngles",
      "contents": "ManipulateBoneAngles(${1:number boneID}, ${2:Angle ang})"
    },
    {
      "trigger": "ManipulateBoneJiggle",
      "contents": "ManipulateBoneJiggle(${1:number boneID}, ${2:number enabled})"
    },
    {
      "trigger": "ManipulateBonePosition",
      "contents": "ManipulateBonePosition(${1:number boneID}, ${2:Vector pos})"
    },
    {
      "trigger": "ManipulateBoneScale",
      "contents": "ManipulateBoneScale(${1:number boneID})"
    },
    {
      "trigger": "MapCreationID",
      "contents": "MapCreationID()"
    },
    {
      "trigger": "MarkShadowAsDirty",
      "contents": "MarkShadowAsDirty()"
    },
    {
      "trigger": "MuzzleFlash",
      "contents": "MuzzleFlash()"
    },
    {
      "trigger": "NearestPoint",
      "contents": "NearestPoint(${1:Vector position})"
    },
    {
      "trigger": "NetworkVar",
      "contents": "NetworkVar(${1:string type}, ${2:number slot}, ${3:string name})"
    },
    {
      "trigger": "NetworkVarNotify",
      "contents": "NetworkVarNotify(${1:string name})"
    },
    {
      "trigger": "NextThink",
      "contents": "NextThink()"
    },
    {
      "trigger": "OBBCenter",
      "contents": "OBBCenter()"
    },
    {
      "trigger": "OBBMaxs",
      "contents": "OBBMaxs()"
    },
    {
      "trigger": "OBBMins",
      "contents": "OBBMins()"
    },
    {
      "trigger": "ObjectCaps",
      "contents": "ObjectCaps()"
    },
    {
      "trigger": "OnGround",
      "contents": "OnGround()"
    },
    {
      "trigger": "PassesDamageFilter",
      "contents": "PassesDamageFilter(${1:CTakeDamageInfo dmg})"
    },
    {
      "trigger": "PassesFilter",
      "contents": "PassesFilter(${1:Entity caller}, ${2:Entity ent})"
    },
    {
      "trigger": "PhysicsFromMesh",
      "contents": "PhysicsFromMesh()"
    },
    {
      "trigger": "PhysicsDestroy",
      "contents": "PhysicsDestroy()"
    },
    {
      "trigger": "PhysicsInit",
      "contents": "PhysicsInit()"
    },
    {
      "trigger": "PhysicsInitBox",
      "contents": "PhysicsInitBox(${1:Vector mins}, ${2:Vector maxs})"
    },
    {
      "trigger": "PhysicsInitConvex",
      "contents": "PhysicsInitConvex()"
    },
    {
      "trigger": "PhysicsInitMultiConvex",
      "contents": "PhysicsInitMultiConvex()"
    },
    {
      "trigger": "PhysicsInitSphere",
      "contents": "PhysicsInitSphere(${1:number radius})"
    },
    {
      "trigger": "PhysicsInitShadow",
      "contents": "PhysicsInitShadow(${1:boolean allowPhysicsMovement = true}, ${2:boolean allowPhysicsRotation = true})"
    },
    {
      "trigger": "PhysicsInitStatic",
      "contents": "PhysicsInitStatic()"
    },
    {
      "trigger": "PhysWake",
      "contents": "PhysWake()"
    },
    {
      "trigger": "PlayScene",
      "contents": "PlayScene(${1:string scene}, ${2:number delay = 0})"
    },
    {
      "trigger": "PointAtEntity",
      "contents": "PointAtEntity(${1:Entity target})"
    },
    {
      "trigger": "PrecacheGibs",
      "contents": "PrecacheGibs()"
    },
    {
      "trigger": "RagdollSolve",
      "contents": "RagdollSolve()"
    },
    {
      "trigger": "RagdollStopControlling",
      "contents": "RagdollStopControlling()"
    },
    {
      "trigger": "RagdollUpdatePhysics",
      "contents": "RagdollUpdatePhysics()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "RemoveAllDecals",
      "contents": "RemoveAllDecals()"
    },
    {
      "trigger": "RemoveAllGestures",
      "contents": "RemoveAllGestures()"
    },
    {
      "trigger": "RemoveCallback",
      "contents": "RemoveCallback(${1:string hook})"
    },
    {
      "trigger": "RemoveEffects",
      "contents": "RemoveEffects()"
    },
    {
      "trigger": "RemoveCallOnRemove",
      "contents": "RemoveCallOnRemove(${1:string identifier})"
    },
    {
      "trigger": "RemoveEFlags",
      "contents": "RemoveEFlags()"
    },
    {
      "trigger": "RemoveFromMotionController",
      "contents": "RemoveFromMotionController()"
    },
    {
      "trigger": "RemoveFlags",
      "contents": "RemoveFlags()"
    },
    {
      "trigger": "RemoveGesture",
      "contents": "RemoveGesture()"
    },
    {
      "trigger": "ResetSequence",
      "contents": "ResetSequence()"
    },
    {
      "trigger": "RemoveSolidFlags",
      "contents": "RemoveSolidFlags()"
    },
    {
      "trigger": "ResetSequenceInfo",
      "contents": "ResetSequenceInfo()"
    },
    {
      "trigger": "Respawn",
      "contents": "Respawn()"
    },
    {
      "trigger": "SelectWeightedSequence",
      "contents": "SelectWeightedSequence()"
    },
    {
      "trigger": "RestartGesture",
      "contents": "RestartGesture(${1:boolean addIfMissing = true}, ${2:boolean autokill = true})"
    },
    {
      "trigger": "SendViewModelMatchingSequence",
      "contents": "SendViewModelMatchingSequence()"
    },
    {
      "trigger": "SequenceDuration",
      "contents": "SequenceDuration(${1:number seqid = nil})"
    },
    {
      "trigger": "SelectWeightedSequenceSeeded",
      "contents": "SelectWeightedSequenceSeeded()"
    },
    {
      "trigger": "SetAbsVelocity",
      "contents": "SetAbsVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "SetAnimation",
      "contents": "SetAnimation()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angles})"
    },
    {
      "trigger": "SetAnimTime",
      "contents": "SetAnimTime(${1:number time})"
    },
    {
      "trigger": "SetAttachment",
      "contents": "SetAttachment(${1:Entity ent}, ${2:number attachment})"
    },
    {
      "trigger": "SetBloodColor",
      "contents": "SetBloodColor()"
    },
    {
      "trigger": "SetBodygroup",
      "contents": "SetBodygroup(${1:number bodygroup}, ${2:number value})"
    },
    {
      "trigger": "SetBodyGroups",
      "contents": "SetBodyGroups()"
    },
    {
      "trigger": "SetBoneController",
      "contents": "SetBoneController(${1:number boneControllerID}, ${2:number value})"
    },
    {
      "trigger": "SetBoneMatrix",
      "contents": "SetBoneMatrix(${1:number boneid}, ${2:VMatrix matrix})"
    },
    {
      "trigger": "SetBonePosition",
      "contents": "SetBonePosition(${1:number bone}, ${2:Vector pos}, ${3:Angle ang})"
    },
    {
      "trigger": "SetCollisionBounds",
      "contents": "SetCollisionBounds(${1:Vector mins}, ${2:Vector maxs})"
    },
    {
      "trigger": "SetCollisionBoundsWS",
      "contents": "SetCollisionBoundsWS(${1:Vector vec1}, ${2:Vector vec2})"
    },
    {
      "trigger": "SetCollisionGroup",
      "contents": "SetCollisionGroup()"
    },
    {
      "trigger": "SetCreator",
      "contents": "SetCreator(${1:Player ply})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetCustomCollisionCheck",
      "contents": "SetCustomCollisionCheck(${1:boolean enable})"
    },
    {
      "trigger": "SetCycle",
      "contents": "SetCycle(${1:number value})"
    },
    {
      "trigger": "SetDTAngle",
      "contents": "SetDTAngle(${1:number key}, ${2:Angle ang})"
    },
    {
      "trigger": "SetDTBool",
      "contents": "SetDTBool(${1:number key}, ${2:boolean bool})"
    },
    {
      "trigger": "SetDTEntity",
      "contents": "SetDTEntity(${1:number key}, ${2:Entity ent})"
    },
    {
      "trigger": "SetDTFloat",
      "contents": "SetDTFloat(${1:number key}, ${2:number float})"
    },
    {
      "trigger": "SetDTInt",
      "contents": "SetDTInt(${1:number key}, ${2:number integer})"
    },
    {
      "trigger": "SetDTString",
      "contents": "SetDTString(${1:number key}, ${2:string str})"
    },
    {
      "trigger": "SetDTVector",
      "contents": "SetDTVector(${1:number key}, ${2:Vector vec})"
    },
    {
      "trigger": "SetElasticity",
      "contents": "SetElasticity(${1:number elasticity})"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:string name}, ${2:Entity entity})"
    },
    {
      "trigger": "SetEyeTarget",
      "contents": "SetEyeTarget(${1:Vector pos})"
    },
    {
      "trigger": "SetFlexScale",
      "contents": "SetFlexScale(${1:number scale})"
    },
    {
      "trigger": "SetFlexWeight",
      "contents": "SetFlexWeight(${1:number flex}, ${2:number weight})"
    },
    {
      "trigger": "SetFriction",
      "contents": "SetFriction(${1:number friction})"
    },
    {
      "trigger": "SetGravity",
      "contents": "SetGravity(${1:number gravityMultiplier})"
    },
    {
      "trigger": "SetGroundEntity",
      "contents": "SetGroundEntity(${1:Entity ground})"
    },
    {
      "trigger": "SetHitboxSet",
      "contents": "SetHitboxSet()"
    },
    {
      "trigger": "SetHealth",
      "contents": "SetHealth(${1:number newHealth})"
    },
    {
      "trigger": "SetIK",
      "contents": "SetIK(${1:boolean useIK = false})"
    },
    {
      "trigger": "SetKeyValue",
      "contents": "SetKeyValue(${1:string key}, ${2:string value})"
    },
    {
      "trigger": "SetLayerBlendIn",
      "contents": "SetLayerBlendIn(${1:number layerID}, ${2:number blendIn})"
    },
    {
      "trigger": "SetLagCompensated",
      "contents": "SetLagCompensated(${1:boolean enable})"
    },
    {
      "trigger": "SetLayerBlendOut",
      "contents": "SetLayerBlendOut(${1:number layerID}, ${2:number blendOut})"
    },
    {
      "trigger": "SetLayerDuration",
      "contents": "SetLayerDuration(${1:number layerID}, ${2:number duration})"
    },
    {
      "trigger": "SetLayerCycle",
      "contents": "SetLayerCycle(${1:number layerID}, ${2:number cycle})"
    },
    {
      "trigger": "SetLayerLooping",
      "contents": "SetLayerLooping(${1:number layerID}, ${2:boolean loop})"
    },
    {
      "trigger": "SetLayerPriority",
      "contents": "SetLayerPriority(${1:number layerID}, ${2:number priority})"
    },
    {
      "trigger": "SetLayerPlaybackRate",
      "contents": "SetLayerPlaybackRate(${1:number layerID}, ${2:number rate})"
    },
    {
      "trigger": "SetLayerWeight",
      "contents": "SetLayerWeight(${1:number layerID}, ${2:number weight})"
    },
    {
      "trigger": "SetLegacyTransform",
      "contents": "SetLegacyTransform(${1:boolean enabled})"
    },
    {
      "trigger": "SetLocalAngles",
      "contents": "SetLocalAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetLocalAngularVelocity",
      "contents": "SetLocalAngularVelocity(${1:Angle angVel})"
    },
    {
      "trigger": "SetLocalPos",
      "contents": "SetLocalPos(${1:Vector pos})"
    },
    {
      "trigger": "SetLocalVelocity",
      "contents": "SetLocalVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "SetLOD",
      "contents": "SetLOD(${1:number lod = -1})"
    },
    {
      "trigger": "SetMaxHealth",
      "contents": "SetMaxHealth(${1:number maxhealth})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string materialName}, ${2:boolean forceMaterial = false})"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string modelName})"
    },
    {
      "trigger": "SetModelName",
      "contents": "SetModelName(${1:string modelname})"
    },
    {
      "trigger": "SetModelScale",
      "contents": "SetModelScale(${1:number scale}, ${2:number deltaTime = 0})"
    },
    {
      "trigger": "SetMoveCollide",
      "contents": "SetMoveCollide()"
    },
    {
      "trigger": "SetMoveParent",
      "contents": "SetMoveParent(${1:Entity Parent})"
    },
    {
      "trigger": "SetMoveType",
      "contents": "SetMoveType()"
    },
    {
      "trigger": "SetNetworkAngles",
      "contents": "SetNetworkAngles(${1:Angle angle})"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string mappingName})"
    },
    {
      "trigger": "SetNetworkedAngle",
      "contents": "SetNetworkedAngle(${1:string key}, ${2:Angle value = Angle( 0, 0, 0 )})"
    },
    {
      "trigger": "SetNetworkedBool",
      "contents": "SetNetworkedBool(${1:string key}, ${2:boolean value = false})"
    },
    {
      "trigger": "SetNetworkedEntity",
      "contents": "SetNetworkedEntity(${1:string key}, ${2:Entity value = NULL})"
    },
    {
      "trigger": "SetNetworkedFloat",
      "contents": "SetNetworkedFloat(${1:string key}, ${2:number value = 0})"
    },
    {
      "trigger": "SetNetworkedInt",
      "contents": "SetNetworkedInt(${1:string key}, ${2:number value = 0})"
    },
    {
      "trigger": "SetNetworkedString",
      "contents": "SetNetworkedString(${1:string key}, ${2:string value = \"\"})"
    },
    {
      "trigger": "SetNetworkedNumber",
      "contents": "SetNetworkedNumber(${1:any index}, ${2:number number})"
    },
    {
      "trigger": "SetNetworkedVector",
      "contents": "SetNetworkedVector(${1:string key}, ${2:Vector value = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "SetNetworkOrigin",
      "contents": "SetNetworkOrigin(${1:Vector origin})"
    },
    {
      "trigger": "SetNetworkedVarProxy",
      "contents": "SetNetworkedVarProxy(${1:string name}, ${2:function callback})"
    },
    {
      "trigger": "SetNextClientThink",
      "contents": "SetNextClientThink()"
    },
    {
      "trigger": "SetNoDraw",
      "contents": "SetNoDraw(${1:boolean shouldNotDraw})"
    },
    {
      "trigger": "SetNotSolid",
      "contents": "SetNotSolid(${1:boolean IsNotSolid})"
    },
    {
      "trigger": "SetNWAngle",
      "contents": "SetNWAngle(${1:string key}, ${2:Angle value})"
    },
    {
      "trigger": "SetNWBool",
      "contents": "SetNWBool(${1:string key}, ${2:boolean value})"
    },
    {
      "trigger": "SetNWEntity",
      "contents": "SetNWEntity(${1:string key}, ${2:Entity value})"
    },
    {
      "trigger": "SetNWFloat",
      "contents": "SetNWFloat(${1:string key}, ${2:number value})"
    },
    {
      "trigger": "SetNWInt",
      "contents": "SetNWInt(${1:string key}, ${2:number value})"
    },
    {
      "trigger": "SetNWVarProxy",
      "contents": "SetNWVarProxy(${1:any key})"
    },
    {
      "trigger": "SetNWString",
      "contents": "SetNWString(${1:string key}, ${2:string value})"
    },
    {
      "trigger": "SetNWVector",
      "contents": "SetNWVector(${1:string key}, ${2:Vector value})"
    },
    {
      "trigger": "SetOwner",
      "contents": "SetOwner(${1:Entity owner = NULL})"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:Entity parent = NULL})"
    },
    {
      "trigger": "SetParentPhysNum",
      "contents": "SetParentPhysNum()"
    },
    {
      "trigger": "SetPersistent",
      "contents": "SetPersistent(${1:boolean persist})"
    },
    {
      "trigger": "SetPhysConstraintObjects",
      "contents": "SetPhysConstraintObjects(${1:PhysObj Phys1}, ${2:PhysObj Phys2})"
    },
    {
      "trigger": "SetPhysicsAttacker",
      "contents": "SetPhysicsAttacker(${1:Player ent}, ${2:number timeLimit = 5})"
    },
    {
      "trigger": "SetPlaybackRate",
      "contents": "SetPlaybackRate(${1:number fSpeed})"
    },
    {
      "trigger": "SetPoseParameter",
      "contents": "SetPoseParameter(${1:string poseName}, ${2:number poseValue})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})"
    },
    {
      "trigger": "SetPredictable",
      "contents": "SetPredictable(${1:boolean setPredictable})"
    },
    {
      "trigger": "SetPreventTransmit",
      "contents": "SetPreventTransmit(${1:Player player}, ${2:boolean stopTransmitting})"
    },
    {
      "trigger": "SetRagdollAng",
      "contents": "SetRagdollAng(${1:number boneid}, ${2:Angle pos})"
    },
    {
      "trigger": "SetRagdollBuildFunction",
      "contents": "SetRagdollBuildFunction()"
    },
    {
      "trigger": "SetRagdollPos",
      "contents": "SetRagdollPos(${1:number boneid}, ${2:Vector pos})"
    },
    {
      "trigger": "SetRenderAngles",
      "contents": "SetRenderAngles(${1:Angle newAngles})"
    },
    {
      "trigger": "SetRenderBounds",
      "contents": "SetRenderBounds(${1:Vector mins}, ${2:Vector maxs}, ${3:Vector add = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "SetRenderBoundsWS",
      "contents": "SetRenderBoundsWS(${1:Vector mins}, ${2:Vector maxs}, ${3:Vector add = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "SetRenderClipPlane",
      "contents": "SetRenderClipPlane(${1:Vector planeNormal}, ${2:number planePosition})"
    },
    {
      "trigger": "SetRenderFX",
      "contents": "SetRenderFX()"
    },
    {
      "trigger": "SetRenderClipPlaneEnabled",
      "contents": "SetRenderClipPlaneEnabled(${1:boolean enabled})"
    },
    {
      "trigger": "SetRenderOrigin",
      "contents": "SetRenderOrigin(${1:Vector newOrigin})"
    },
    {
      "trigger": "SetSaveValue",
      "contents": "SetSaveValue(${1:string name}, ${2:any value})"
    },
    {
      "trigger": "SetRenderMode",
      "contents": "SetRenderMode()"
    },
    {
      "trigger": "SetSequence",
      "contents": "SetSequence()"
    },
    {
      "trigger": "SetShouldPlayPickupSound",
      "contents": "SetShouldPlayPickupSound(${1:boolean playsound = false})"
    },
    {
      "trigger": "SetShouldServerRagdoll",
      "contents": "SetShouldServerRagdoll(${1:boolean serverragdoll})"
    },
    {
      "trigger": "SetSkin",
      "contents": "SetSkin(${1:number skinIndex})"
    },
    {
      "trigger": "SetSolid",
      "contents": "SetSolid()"
    },
    {
      "trigger": "SetSolidFlags",
      "contents": "SetSolidFlags()"
    },
    {
      "trigger": "SetSpawnEffect",
      "contents": "SetSpawnEffect(${1:boolean spawnEffect})"
    },
    {
      "trigger": "SetSubMaterial",
      "contents": "SetSubMaterial(${1:string material = nil})"
    },
    {
      "trigger": "SetTable",
      "contents": "SetTable(${1:table tab})"
    },
    {
      "trigger": "SetTransmitWithParent",
      "contents": "SetTransmitWithParent(${1:boolean onoff})"
    },
    {
      "trigger": "SetTrigger",
      "contents": "SetTrigger(${1:boolean maketrigger})"
    },
    {
      "trigger": "SetUnFreezable",
      "contents": "SetUnFreezable(${1:boolean freezable = false})"
    },
    {
      "trigger": "SetupBones",
      "contents": "SetupBones()"
    },
    {
      "trigger": "SetupPhonemeMappings",
      "contents": "SetupPhonemeMappings(${1:string fileRoot})"
    },
    {
      "trigger": "SetVar",
      "contents": "SetVar(${1:any key}, ${2:any value})"
    },
    {
      "trigger": "SetUseType",
      "contents": "SetUseType()"
    },
    {
      "trigger": "SetWeaponModel",
      "contents": "SetWeaponModel(${1:string viewModel}, ${2:Weapon weapon = NULL})"
    },
    {
      "trigger": "SkinCount",
      "contents": "SkinCount()"
    },
    {
      "trigger": "Spawn",
      "contents": "Spawn()"
    },
    {
      "trigger": "StartLoopingSound",
      "contents": "StartLoopingSound(${1:string sound})"
    },
    {
      "trigger": "StartMotionController",
      "contents": "StartMotionController()"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "StopAndDestroyParticles",
      "contents": "StopAndDestroyParticles()"
    },
    {
      "trigger": "StopMotionController",
      "contents": "StopMotionController()"
    },
    {
      "trigger": "StopLoopingSound",
      "contents": "StopLoopingSound()"
    },
    {
      "trigger": "StopParticles",
      "contents": "StopParticles()"
    },
    {
      "trigger": "StopParticleEmission",
      "contents": "StopParticleEmission()"
    },
    {
      "trigger": "SnatchModelInstance",
      "contents": "SnatchModelInstance(${1:Entity srcEntity})"
    },
    {
      "trigger": "StopParticlesNamed",
      "contents": "StopParticlesNamed(${1:string name})"
    },
    {
      "trigger": "StopParticlesWithNameAndAttachment",
      "contents": "StopParticlesWithNameAndAttachment(${1:string name}, ${2:number attachment})"
    },
    {
      "trigger": "StopSound",
      "contents": "StopSound(${1:string soundscript})"
    },
    {
      "trigger": "TakeDamage",
      "contents": "TakeDamage(${1:number damageAmount}, ${2:Entity attacker}, ${3:Entity inflictor})"
    },
    {
      "trigger": "TakePhysicsDamage",
      "contents": "TakePhysicsDamage()"
    },
    {
      "trigger": "TakeDamageInfo",
      "contents": "TakeDamageInfo(${1:CTakeDamageInfo damageInfo})"
    },
    {
      "trigger": "TestPVS",
      "contents": "TestPVS()"
    },
    {
      "trigger": "TranslateBoneToPhysBone",
      "contents": "TranslateBoneToPhysBone(${1:number boneID})"
    },
    {
      "trigger": "TranslatePhysBoneToBone",
      "contents": "TranslatePhysBoneToBone()"
    },
    {
      "trigger": "Use",
      "contents": "Use(${1:Player activator}, ${2:Entity caller}, ${3:number integer})"
    },
    {
      "trigger": "UseClientSideAnimation",
      "contents": "UseClientSideAnimation()"
    },
    {
      "trigger": "UseTriggerBounds",
      "contents": "UseTriggerBounds(${1:boolean enable}, ${2:number boundSize = 0})"
    },
    {
      "trigger": "ViewModelIndex",
      "contents": "ViewModelIndex()"
    },
    {
      "trigger": "Visible",
      "contents": "Visible(${1:Entity target})"
    },
    {
      "trigger": "WaterLevel",
      "contents": "WaterLevel()"
    },
    {
      "trigger": "VisibleVec",
      "contents": "VisibleVec(${1:Vector pos})"
    },
    {
      "trigger": "WorldSpaceAABB",
      "contents": "WorldSpaceAABB()"
    },
    {
      "trigger": "WorldSpaceCenter",
      "contents": "WorldSpaceCenter()"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector wpos})"
    },
    {
      "trigger": "Close",
      "contents": "Close()"
    },
    {
      "trigger": "WorldToLocalAngles",
      "contents": "WorldToLocalAngles(${1:Angle ang})"
    },
    {
      "trigger": "Flush",
      "contents": "Flush()"
    },
    {
      "trigger": "Read",
      "contents": "Read(${1:number length})"
    },
    {
      "trigger": "ReadByte",
      "contents": "ReadByte()"
    },
    {
      "trigger": "ReadBool",
      "contents": "ReadBool()"
    },
    {
      "trigger": "ReadDouble",
      "contents": "ReadDouble()"
    },
    {
      "trigger": "ReadLine",
      "contents": "ReadLine()"
    },
    {
      "trigger": "ReadFloat",
      "contents": "ReadFloat()"
    },
    {
      "trigger": "ReadLong",
      "contents": "ReadLong()"
    },
    {
      "trigger": "ReadShort",
      "contents": "ReadShort()"
    },
    {
      "trigger": "ReadULong",
      "contents": "ReadULong()"
    },
    {
      "trigger": "ReadUShort",
      "contents": "ReadUShort()"
    },
    {
      "trigger": "Seek",
      "contents": "Seek(${1:number pos})"
    },
    {
      "trigger": "Tell",
      "contents": "Tell()"
    },
    {
      "trigger": "Skip",
      "contents": "Skip(${1:number amount})"
    },
    {
      "trigger": "Size",
      "contents": "Size()"
    },
    {
      "trigger": "Write",
      "contents": "Write(${1:string data})"
    },
    {
      "trigger": "WriteBool",
      "contents": "WriteBool(${1:boolean bool})"
    },
    {
      "trigger": "WriteDouble",
      "contents": "WriteDouble(${1:number double})"
    },
    {
      "trigger": "WriteByte",
      "contents": "WriteByte(${1:number uint8})"
    },
    {
      "trigger": "WriteFloat",
      "contents": "WriteFloat(${1:number float})"
    },
    {
      "trigger": "WriteLong",
      "contents": "WriteLong(${1:number int32})"
    },
    {
      "trigger": "WriteShort",
      "contents": "WriteShort(${1:number int16})"
    },
    {
      "trigger": "WriteULong",
      "contents": "WriteULong(${1:number uint32})"
    },
    {
      "trigger": "EnableLooping",
      "contents": "EnableLooping(${1:boolean enable})"
    },
    {
      "trigger": "WriteUShort",
      "contents": "WriteUShort(${1:number uint16})"
    },
    {
      "trigger": "FFT",
      "contents": "FFT(${1:table tbl})"
    },
    {
      "trigger": "GetAverageBitRate",
      "contents": "GetAverageBitRate()"
    },
    {
      "trigger": "GetBitsPerSample",
      "contents": "GetBitsPerSample()"
    },
    {
      "trigger": "GetFileName",
      "contents": "GetFileName()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()"
    },
    {
      "trigger": "GetLevel",
      "contents": "GetLevel()"
    },
    {
      "trigger": "GetPlaybackRate",
      "contents": "GetPlaybackRate()"
    },
    {
      "trigger": "GetSamplingRate",
      "contents": "GetSamplingRate()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetState",
      "contents": "GetState()"
    },
    {
      "trigger": "GetTime",
      "contents": "GetTime()"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()"
    },
    {
      "trigger": "IsBlockStreamed",
      "contents": "IsBlockStreamed()"
    },
    {
      "trigger": "IsLooping",
      "contents": "IsLooping()"
    },
    {
      "trigger": "IsOnline",
      "contents": "IsOnline()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "Pause",
      "contents": "Pause()"
    },
    {
      "trigger": "Play",
      "contents": "Play()"
    },
    {
      "trigger": "SetPlaybackRate",
      "contents": "SetPlaybackRate(${1:number rate})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector pos}, ${2:Vector dir = Vector( 0, 0, 0 )})"
    },
    {
      "trigger": "SetVolume",
      "contents": "SetVolume(${1:number volume})"
    },
    {
      "trigger": "SetTime",
      "contents": "SetTime(${1:number secs})"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat(${1:string materialFloat})"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt(${1:string materialInt})"
    },
    {
      "trigger": "GetMatrix",
      "contents": "GetMatrix(${1:string materialMatrix})"
    },
    {
      "trigger": "GetKeyValues",
      "contents": "GetKeyValues()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetShader",
      "contents": "GetShader()"
    },
    {
      "trigger": "GetString",
      "contents": "GetString(${1:string materialString})"
    },
    {
      "trigger": "GetTexture",
      "contents": "GetTexture(${1:string param})"
    },
    {
      "trigger": "GetVector",
      "contents": "GetVector(${1:string materialVector})"
    },
    {
      "trigger": "Height",
      "contents": "Height()"
    },
    {
      "trigger": "GetVectorLinear",
      "contents": "GetVectorLinear(${1:string materialVector})"
    },
    {
      "trigger": "IsError",
      "contents": "IsError()"
    },
    {
      "trigger": "Recompute",
      "contents": "Recompute()"
    },
    {
      "trigger": "SetFloat",
      "contents": "SetFloat(${1:string materialFloat}, ${2:number float})"
    },
    {
      "trigger": "SetInt",
      "contents": "SetInt(${1:string materialInt}, ${2:number int})"
    },
    {
      "trigger": "SetMatrix",
      "contents": "SetMatrix(${1:string materialMatrix}, ${2:VMatrix matrix})"
    },
    {
      "trigger": "SetShader",
      "contents": "SetShader(${1:string shaderName})"
    },
    {
      "trigger": "SetString",
      "contents": "SetString(${1:string materialString}, ${2:string string})"
    },
    {
      "trigger": "SetTexture",
      "contents": "SetTexture(${1:string materialTexture}, ${2:ITexture texture})"
    },
    {
      "trigger": "SetUndefined",
      "contents": "SetUndefined(${1:string materialValueName})"
    },
    {
      "trigger": "SetVector",
      "contents": "SetVector(${1:string MaterialVector}, ${2:Vector vec})"
    },
    {
      "trigger": "Width",
      "contents": "Width()"
    },
    {
      "trigger": "Destroy",
      "contents": "Destroy()"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()"
    },
    {
      "trigger": "BuildFromTriangles",
      "contents": "BuildFromTriangles()"
    },
    {
      "trigger": "ReadAngle",
      "contents": "ReadAngle()"
    },
    {
      "trigger": "EndBlock",
      "contents": "EndBlock()"
    },
    {
      "trigger": "ReadBool",
      "contents": "ReadBool()"
    },
    {
      "trigger": "ReadEntity",
      "contents": "ReadEntity()"
    },
    {
      "trigger": "ReadFloat",
      "contents": "ReadFloat()"
    },
    {
      "trigger": "ReadInt",
      "contents": "ReadInt()"
    },
    {
      "trigger": "ReadVector",
      "contents": "ReadVector()"
    },
    {
      "trigger": "ReadString",
      "contents": "ReadString()"
    },
    {
      "trigger": "StartBlock",
      "contents": "StartBlock()"
    },
    {
      "trigger": "EndBlock",
      "contents": "EndBlock()"
    },
    {
      "trigger": "StartBlock",
      "contents": "StartBlock()"
    },
    {
      "trigger": "WriteAngle",
      "contents": "WriteAngle(${1:Angle ang})"
    },
    {
      "trigger": "WriteEntity",
      "contents": "WriteEntity(${1:Entity ent})"
    },
    {
      "trigger": "WriteBool",
      "contents": "WriteBool(${1:boolean bool})"
    },
    {
      "trigger": "WriteFloat",
      "contents": "WriteFloat(${1:number float})"
    },
    {
      "trigger": "WriteInt",
      "contents": "WriteInt(${1:number int})"
    },
    {
      "trigger": "WriteString",
      "contents": "WriteString(${1:string str})"
    },
    {
      "trigger": "WriteVector",
      "contents": "WriteVector(${1:Vector vec})"
    },
    {
      "trigger": "Download",
      "contents": "Download()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "GetMappingHeight",
      "contents": "GetMappingHeight()"
    },
    {
      "trigger": "GetMappingWidth",
      "contents": "GetMappingWidth()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "Height",
      "contents": "Height()"
    },
    {
      "trigger": "IsError",
      "contents": "IsError()"
    },
    {
      "trigger": "Width",
      "contents": "Width()"
    },
    {
      "trigger": "AddFrame",
      "contents": "AddFrame(${1:boolean downsample})"
    },
    {
      "trigger": "Finish",
      "contents": "Finish()"
    },
    {
      "trigger": "Height",
      "contents": "Height()"
    },
    {
      "trigger": "SetRecordSound",
      "contents": "SetRecordSound(${1:boolean record})"
    },
    {
      "trigger": "Width",
      "contents": "Width()"
    },
    {
      "trigger": "Draw",
      "contents": "Draw(${1:number xOffset}, ${2:number yOffset}, ${3:number alphaoverride = 255})"
    },
    {
      "trigger": "GetHeight",
      "contents": "GetHeight()"
    },
    {
      "trigger": "Size",
      "contents": "Size()"
    },
    {
      "trigger": "GetWidth",
      "contents": "GetWidth()"
    },
    {
      "trigger": "BecomeRagdoll",
      "contents": "BecomeRagdoll(${1:CTakeDamageInfo info})"
    },
    {
      "trigger": "FindSpot",
      "contents": "FindSpot(${1:string type})"
    },
    {
      "trigger": "BodyMoveXY",
      "contents": "BodyMoveXY()"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()"
    },
    {
      "trigger": "FindSpots",
      "contents": "FindSpots()"
    },
    {
      "trigger": "GetRangeSquaredTo",
      "contents": "GetRangeSquaredTo(${1:Vector to})"
    },
    {
      "trigger": "GetRangeTo",
      "contents": "GetRangeTo(${1:Vector to})"
    },
    {
      "trigger": "HandleStuck",
      "contents": "HandleStuck()"
    },
    {
      "trigger": "GetSolidMask",
      "contents": "GetSolidMask()"
    },
    {
      "trigger": "MoveToPos",
      "contents": "MoveToPos(${1:Vector pos})"
    },
    {
      "trigger": "PlaySequenceAndWait",
      "contents": "PlaySequenceAndWait(${1:string name}, ${2:number speed = 1})"
    },
    {
      "trigger": "SetSolidMask",
      "contents": "SetSolidMask()"
    },
    {
      "trigger": "StartActivity",
      "contents": "StartActivity()"
    },
    {
      "trigger": "AddEntityRelationship",
      "contents": "AddEntityRelationship(${1:Entity target}, ${2:number priority})"
    },
    {
      "trigger": "AddRelationship",
      "contents": "AddRelationship()"
    },
    {
      "trigger": "AlertSound",
      "contents": "AlertSound()"
    },
    {
      "trigger": "CapabilitiesAdd",
      "contents": "CapabilitiesAdd()"
    },
    {
      "trigger": "CapabilitiesClear",
      "contents": "CapabilitiesClear()"
    },
    {
      "trigger": "CapabilitiesGet",
      "contents": "CapabilitiesGet()"
    },
    {
      "trigger": "CapabilitiesRemove",
      "contents": "CapabilitiesRemove()"
    },
    {
      "trigger": "Classify",
      "contents": "Classify()"
    },
    {
      "trigger": "ClearCondition",
      "contents": "ClearCondition()"
    },
    {
      "trigger": "ClearEnemyMemory",
      "contents": "ClearEnemyMemory()"
    },
    {
      "trigger": "ClearExpression",
      "contents": "ClearExpression()"
    },
    {
      "trigger": "ClearGoal",
      "contents": "ClearGoal()"
    },
    {
      "trigger": "ClearSchedule",
      "contents": "ClearSchedule()"
    },
    {
      "trigger": "Disposition",
      "contents": "Disposition(${1:Entity ent})"
    },
    {
      "trigger": "ConditionName",
      "contents": "ConditionName()"
    },
    {
      "trigger": "ExitScriptedSequence",
      "contents": "ExitScriptedSequence()"
    },
    {
      "trigger": "FearSound",
      "contents": "FearSound()"
    },
    {
      "trigger": "FoundEnemySound",
      "contents": "FoundEnemySound()"
    },
    {
      "trigger": "GetActiveWeapon",
      "contents": "GetActiveWeapon()"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()"
    },
    {
      "trigger": "GetAimVector",
      "contents": "GetAimVector()"
    },
    {
      "trigger": "GetArrivalSequence",
      "contents": "GetArrivalSequence()"
    },
    {
      "trigger": "GetArrivalActivity",
      "contents": "GetArrivalActivity()"
    },
    {
      "trigger": "GetBlockingEntity",
      "contents": "GetBlockingEntity()"
    },
    {
      "trigger": "GetCurrentSchedule",
      "contents": "GetCurrentSchedule()"
    },
    {
      "trigger": "GetCurrentWeaponProficiency",
      "contents": "GetCurrentWeaponProficiency()"
    },
    {
      "trigger": "GetEnemy",
      "contents": "GetEnemy()"
    },
    {
      "trigger": "GetExpression",
      "contents": "GetExpression()"
    },
    {
      "trigger": "GetHullType",
      "contents": "GetHullType()"
    },
    {
      "trigger": "GetMovementActivity",
      "contents": "GetMovementActivity()"
    },
    {
      "trigger": "GetMovementSequence",
      "contents": "GetMovementSequence()"
    },
    {
      "trigger": "GetNPCState",
      "contents": "GetNPCState()"
    },
    {
      "trigger": "GetPathTimeToGoal",
      "contents": "GetPathTimeToGoal()"
    },
    {
      "trigger": "GetPathDistanceToGoal",
      "contents": "GetPathDistanceToGoal()"
    },
    {
      "trigger": "GetShootPos",
      "contents": "GetShootPos()"
    },
    {
      "trigger": "Give",
      "contents": "Give(${1:string weapon})"
    },
    {
      "trigger": "GetTarget",
      "contents": "GetTarget()"
    },
    {
      "trigger": "HasCondition",
      "contents": "HasCondition()"
    },
    {
      "trigger": "IsCurrentSchedule",
      "contents": "IsCurrentSchedule()"
    },
    {
      "trigger": "IsMoving",
      "contents": "IsMoving()"
    },
    {
      "trigger": "IdleSound",
      "contents": "IdleSound()"
    },
    {
      "trigger": "IsUnreachable",
      "contents": "IsUnreachable(${1:Entity testEntity})"
    },
    {
      "trigger": "IsRunningBehavior",
      "contents": "IsRunningBehavior()"
    },
    {
      "trigger": "LostEnemySound",
      "contents": "LostEnemySound()"
    },
    {
      "trigger": "MaintainActivity",
      "contents": "MaintainActivity()"
    },
    {
      "trigger": "MarkEnemyAsEluded",
      "contents": "MarkEnemyAsEluded()"
    },
    {
      "trigger": "MoveOrder",
      "contents": "MoveOrder(${1:Vector position})"
    },
    {
      "trigger": "NavSetGoal",
      "contents": "NavSetGoal(${1:Vector position})"
    },
    {
      "trigger": "NavSetGoalTarget",
      "contents": "NavSetGoalTarget(${1:Entity target}, ${2:Vector offset})"
    },
    {
      "trigger": "NavSetRandomGoal",
      "contents": "NavSetRandomGoal(${1:number minPathLength}, ${2:Vector dir})"
    },
    {
      "trigger": "NavSetWanderGoal",
      "contents": "NavSetWanderGoal(${1:number xoffset}, ${2:number yoffset})"
    },
    {
      "trigger": "PlaySentence",
      "contents": "PlaySentence(${1:string sentence}, ${2:number delay}, ${3:number volume})"
    },
    {
      "trigger": "RunEngineTask",
      "contents": "RunEngineTask(${1:number taskID}, ${2:number taskData})"
    },
    {
      "trigger": "RemoveMemory",
      "contents": "RemoveMemory()"
    },
    {
      "trigger": "SentenceStop",
      "contents": "SentenceStop()"
    },
    {
      "trigger": "SetArrivalActivity",
      "contents": "SetArrivalActivity(${1:number act})"
    },
    {
      "trigger": "SetArrivalDirection",
      "contents": "SetArrivalDirection()"
    },
    {
      "trigger": "SetArrivalDistance",
      "contents": "SetArrivalDistance(${1:number dist})"
    },
    {
      "trigger": "SetArrivalSequence",
      "contents": "SetArrivalSequence()"
    },
    {
      "trigger": "SetArrivalSpeed",
      "contents": "SetArrivalSpeed()"
    },
    {
      "trigger": "SetCondition",
      "contents": "SetCondition()"
    },
    {
      "trigger": "SetCurrentWeaponProficiency",
      "contents": "SetCurrentWeaponProficiency()"
    },
    {
      "trigger": "SetEnemy",
      "contents": "SetEnemy(${1:Entity enemy}, ${2:boolean newenemy = true})"
    },
    {
      "trigger": "SetExpression",
      "contents": "SetExpression(${1:string expression})"
    },
    {
      "trigger": "SetHullSizeNormal",
      "contents": "SetHullSizeNormal()"
    },
    {
      "trigger": "SetHullType",
      "contents": "SetHullType()"
    },
    {
      "trigger": "SetLastPosition",
      "contents": "SetLastPosition(${1:Vector Position})"
    },
    {
      "trigger": "SetMaxRouteRebuildTime",
      "contents": "SetMaxRouteRebuildTime(${1:number time})"
    },
    {
      "trigger": "SetMovementSequence",
      "contents": "SetMovementSequence(${1:number sequenceId})"
    },
    {
      "trigger": "SetMovementActivity",
      "contents": "SetMovementActivity()"
    },
    {
      "trigger": "SetNPCState",
      "contents": "SetNPCState()"
    },
    {
      "trigger": "SetSchedule",
      "contents": "SetSchedule()"
    },
    {
      "trigger": "StartEngineTask",
      "contents": "StartEngineTask(${1:number task}, ${2:number taskData})"
    },
    {
      "trigger": "SetTarget",
      "contents": "SetTarget(${1:Entity entity})"
    },
    {
      "trigger": "StopMoving",
      "contents": "StopMoving()"
    },
    {
      "trigger": "TargetOrder",
      "contents": "TargetOrder(${1:Entity target})"
    },
    {
      "trigger": "TaskComplete",
      "contents": "TaskComplete()"
    },
    {
      "trigger": "TaskFail",
      "contents": "TaskFail(${1:string task})"
    },
    {
      "trigger": "UpdateEnemyMemory",
      "contents": "UpdateEnemyMemory(${1:Entity enemy}, ${2:Vector pos})"
    },
    {
      "trigger": "UseAssaultBehavior",
      "contents": "UseAssaultBehavior()"
    },
    {
      "trigger": "UseActBusyBehavior",
      "contents": "UseActBusyBehavior()"
    },
    {
      "trigger": "UseFollowBehavior",
      "contents": "UseFollowBehavior()"
    },
    {
      "trigger": "UseFuncTankBehavior",
      "contents": "UseFuncTankBehavior()"
    },
    {
      "trigger": "UseLeadBehavior",
      "contents": "UseLeadBehavior()"
    },
    {
      "trigger": "UseNoBehavior",
      "contents": "UseNoBehavior()"
    },
    {
      "trigger": "Add",
      "contents": "Add()"
    },
    {
      "trigger": "AddText",
      "contents": "AddText()"
    },
    {
      "trigger": "AlignBottom",
      "contents": "AlignBottom(${1:number offset = 0})"
    },
    {
      "trigger": "AlignLeft",
      "contents": "AlignLeft(${1:number offset = 0})"
    },
    {
      "trigger": "AlignTop",
      "contents": "AlignTop(${1:number offset = 0})"
    },
    {
      "trigger": "AlignRight",
      "contents": "AlignRight(${1:number offset = 0})"
    },
    {
      "trigger": "AlphaTo",
      "contents": "AlphaTo(${1:number alpha}, ${2:number duration}, ${3:number delay = 0})"
    },
    {
      "trigger": "AnimationThinkInternal",
      "contents": "AnimationThinkInternal()"
    },
    {
      "trigger": "AnimTail",
      "contents": "AnimTail()"
    },
    {
      "trigger": "AppendText",
      "contents": "AppendText(${1:string txt})"
    },
    {
      "trigger": "ApplyGWEN",
      "contents": "ApplyGWEN(${1:table GWENTable})"
    },
    {
      "trigger": "Center",
      "contents": "Center()"
    },
    {
      "trigger": "CenterHorizontal",
      "contents": "CenterHorizontal(${1:number fraction = 0.5})"
    },
    {
      "trigger": "CenterVertical",
      "contents": "CenterVertical(${1:number fraction = 0.5})"
    },
    {
      "trigger": "ChildCount",
      "contents": "ChildCount()"
    },
    {
      "trigger": "ChildrenSize",
      "contents": "ChildrenSize()"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()"
    },
    {
      "trigger": "ColorTo",
      "contents": "ColorTo(${1:table color}, ${2:number length}, ${3:number delay}, ${4:function callback})"
    },
    {
      "trigger": "Command",
      "contents": "Command(${1:string command})"
    },
    {
      "trigger": "ConVarChanged",
      "contents": "ConVarChanged(${1:string newValue})"
    },
    {
      "trigger": "ConVarStringThink",
      "contents": "ConVarStringThink()"
    },
    {
      "trigger": "ConVarNumberThink",
      "contents": "ConVarNumberThink()"
    },
    {
      "trigger": "CopyBase",
      "contents": "CopyBase(${1:Panel srcPanel})"
    },
    {
      "trigger": "CopyBounds",
      "contents": "CopyBounds(${1:Panel base})"
    },
    {
      "trigger": "CopyHeight",
      "contents": "CopyHeight(${1:Panel base})"
    },
    {
      "trigger": "CopyPos",
      "contents": "CopyPos(${1:Panel base})"
    },
    {
      "trigger": "CopyWidth",
      "contents": "CopyWidth(${1:Panel base})"
    },
    {
      "trigger": "CopySelected",
      "contents": "CopySelected()"
    },
    {
      "trigger": "CursorPos",
      "contents": "CursorPos()"
    },
    {
      "trigger": "CutSelected",
      "contents": "CutSelected()"
    },
    {
      "trigger": "DeleteCookie",
      "contents": "DeleteCookie(${1:string cookieName})"
    },
    {
      "trigger": "DisableLerp",
      "contents": "DisableLerp()"
    },
    {
      "trigger": "DistanceFrom",
      "contents": "DistanceFrom(${1:number posX}, ${2:number posY})"
    },
    {
      "trigger": "Distance",
      "contents": "Distance(${1:Panel tgtPanel})"
    },
    {
      "trigger": "Dock",
      "contents": "Dock()"
    },
    {
      "trigger": "DockMargin",
      "contents": "DockMargin(${1:number marginLeft}, ${2:number marginTop}, ${3:number marginRight}, ${4:number marginBottom})"
    },
    {
      "trigger": "DoModal",
      "contents": "DoModal()"
    },
    {
      "trigger": "DockPadding",
      "contents": "DockPadding(${1:number paddingLeft}, ${2:number paddingTop}, ${3:number paddingRight}, ${4:number paddingBottom})"
    },
    {
      "trigger": "DragClick",
      "contents": "DragClick()"
    },
    {
      "trigger": "DragHover",
      "contents": "DragHover()"
    },
    {
      "trigger": "DragMousePress",
      "contents": "DragMousePress()"
    },
    {
      "trigger": "DragHoverEnd",
      "contents": "DragHoverEnd()"
    },
    {
      "trigger": "DragMouseRelease",
      "contents": "DragMouseRelease()"
    },
    {
      "trigger": "DrawDragHover",
      "contents": "DrawDragHover(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "DrawFilledRect",
      "contents": "DrawFilledRect()"
    },
    {
      "trigger": "DrawOutlinedRect",
      "contents": "DrawOutlinedRect()"
    },
    {
      "trigger": "DrawSelections",
      "contents": "DrawSelections()"
    },
    {
      "trigger": "DrawTexturedRect",
      "contents": "DrawTexturedRect()"
    },
    {
      "trigger": "DrawTextEntryText",
      "contents": "DrawTextEntryText(${1:table textCol}, ${2:table highlightCol}, ${3:table cursorCol})"
    },
    {
      "trigger": "EndBoxSelection",
      "contents": "EndBoxSelection()"
    },
    {
      "trigger": "Droppable",
      "contents": "Droppable(${1:string name})"
    },
    {
      "trigger": "Exec",
      "contents": "Exec(${1:string cmd})"
    },
    {
      "trigger": "Find",
      "contents": "Find(${1:string panelName})"
    },
    {
      "trigger": "FocusNext",
      "contents": "FocusNext()"
    },
    {
      "trigger": "FocusPrevious",
      "contents": "FocusPrevious()"
    },
    {
      "trigger": "GetAlpha",
      "contents": "GetAlpha()"
    },
    {
      "trigger": "GetBounds",
      "contents": "GetBounds()"
    },
    {
      "trigger": "GetCaretPos",
      "contents": "GetCaretPos()"
    },
    {
      "trigger": "GetChild",
      "contents": "GetChild()"
    },
    {
      "trigger": "GetChildPosition",
      "contents": "GetChildPosition(${1:Panel pnl})"
    },
    {
      "trigger": "GetChildren",
      "contents": "GetChildren()"
    },
    {
      "trigger": "GetChildrenInRect",
      "contents": "GetChildrenInRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "GetClassName",
      "contents": "GetClassName()"
    },
    {
      "trigger": "GetContentSize",
      "contents": "GetContentSize()"
    },
    {
      "trigger": "GetClosestChild",
      "contents": "GetClosestChild(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "GetCookie",
      "contents": "GetCookie(${1:string cookieName}, ${2:string default})"
    },
    {
      "trigger": "GetCookieName",
      "contents": "GetCookieName()"
    },
    {
      "trigger": "GetCookieNumber",
      "contents": "GetCookieNumber(${1:string cookieName}, ${2:number default})"
    },
    {
      "trigger": "GetDock",
      "contents": "GetDock()"
    },
    {
      "trigger": "GetDockMargin",
      "contents": "GetDockMargin()"
    },
    {
      "trigger": "GetDockPadding",
      "contents": "GetDockPadding()"
    },
    {
      "trigger": "GetHTMLMaterial",
      "contents": "GetHTMLMaterial()"
    },
    {
      "trigger": "GetFont",
      "contents": "GetFont()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetNumLines",
      "contents": "GetNumLines()"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetSelectedChildren",
      "contents": "GetSelectedChildren()"
    },
    {
      "trigger": "GetSelectionCanvas",
      "contents": "GetSelectionCanvas()"
    },
    {
      "trigger": "GetSize",
      "contents": "GetSize()"
    },
    {
      "trigger": "GetSkin",
      "contents": "GetSkin()"
    },
    {
      "trigger": "GetTable",
      "contents": "GetTable()"
    },
    {
      "trigger": "GetTall",
      "contents": "GetTall()"
    },
    {
      "trigger": "GetText",
      "contents": "GetText()"
    },
    {
      "trigger": "GetTextInset",
      "contents": "GetTextInset()"
    },
    {
      "trigger": "GetTextSize",
      "contents": "GetTextSize()"
    },
    {
      "trigger": "GetValidReceiverSlot",
      "contents": "GetValidReceiverSlot()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()"
    },
    {
      "trigger": "GetWide",
      "contents": "GetWide()"
    },
    {
      "trigger": "GetZPos",
      "contents": "GetZPos()"
    },
    {
      "trigger": "GoBack",
      "contents": "GoBack()"
    },
    {
      "trigger": "GoForward",
      "contents": "GoForward()"
    },
    {
      "trigger": "GoToHistoryOffset",
      "contents": "GoToHistoryOffset(${1:number offset})"
    },
    {
      "trigger": "GotoTextEnd",
      "contents": "GotoTextEnd()"
    },
    {
      "trigger": "GotoTextStart",
      "contents": "GotoTextStart()"
    },
    {
      "trigger": "HasChildren",
      "contents": "HasChildren()"
    },
    {
      "trigger": "HasFocus",
      "contents": "HasFocus()"
    },
    {
      "trigger": "HasHierarchicalFocus",
      "contents": "HasHierarchicalFocus()"
    },
    {
      "trigger": "Hide",
      "contents": "Hide()"
    },
    {
      "trigger": "HasParent",
      "contents": "HasParent(${1:Panel parentPanel})"
    },
    {
      "trigger": "InsertClickableTextEnd",
      "contents": "InsertClickableTextEnd()"
    },
    {
      "trigger": "InsertClickableTextStart",
      "contents": "InsertClickableTextStart(${1:string signalValue})"
    },
    {
      "trigger": "InsertColorChange",
      "contents": "InsertColorChange(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})"
    },
    {
      "trigger": "InsertFade",
      "contents": "InsertFade(${1:number sustain}, ${2:number length})"
    },
    {
      "trigger": "InvalidateChildren",
      "contents": "InvalidateChildren(${1:boolean recursive = false})"
    },
    {
      "trigger": "InvalidateLayout",
      "contents": "InvalidateLayout(${1:boolean layoutNow = false})"
    },
    {
      "trigger": "IsChildHovered",
      "contents": "IsChildHovered(${1:boolean immediate = false})"
    },
    {
      "trigger": "InvalidateParent",
      "contents": "InvalidateParent(${1:boolean layoutNow = false})"
    },
    {
      "trigger": "IsDraggable",
      "contents": "IsDraggable()"
    },
    {
      "trigger": "IsHovered",
      "contents": "IsHovered()"
    },
    {
      "trigger": "IsDragging",
      "contents": "IsDragging()"
    },
    {
      "trigger": "IsEnabled",
      "contents": "IsEnabled()"
    },
    {
      "trigger": "IsLoading",
      "contents": "IsLoading()"
    },
    {
      "trigger": "IsKeyboardInputEnabled",
      "contents": "IsKeyboardInputEnabled()"
    },
    {
      "trigger": "IsMarkedForDeletion",
      "contents": "IsMarkedForDeletion()"
    },
    {
      "trigger": "IsMouseInputEnabled",
      "contents": "IsMouseInputEnabled()"
    },
    {
      "trigger": "IsMultiline",
      "contents": "IsMultiline()"
    },
    {
      "trigger": "IsOurChild",
      "contents": "IsOurChild(${1:Panel childPanel})"
    },
    {
      "trigger": "IsSelectable",
      "contents": "IsSelectable()"
    },
    {
      "trigger": "IsSelected",
      "contents": "IsSelected()"
    },
    {
      "trigger": "IsSelectionCanvas",
      "contents": "IsSelectionCanvas()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "IsVisible",
      "contents": "IsVisible()"
    },
    {
      "trigger": "IsWorldClicker",
      "contents": "IsWorldClicker()"
    },
    {
      "trigger": "KillFocus",
      "contents": "KillFocus()"
    },
    {
      "trigger": "LoadControlsFromFile",
      "contents": "LoadControlsFromFile(${1:string path})"
    },
    {
      "trigger": "LoadGWENFile",
      "contents": "LoadGWENFile(${1:string filename}, ${2:string path = \"GAME\"})"
    },
    {
      "trigger": "LoadGWENString",
      "contents": "LoadGWENString(${1:string str})"
    },
    {
      "trigger": "LocalCursorPos",
      "contents": "LocalCursorPos()"
    },
    {
      "trigger": "LerpPositions",
      "contents": "LerpPositions(${1:number speed}, ${2:boolean easeOut})"
    },
    {
      "trigger": "LocalToScreen",
      "contents": "LocalToScreen(${1:number posX}, ${2:number posY})"
    },
    {
      "trigger": "MakePopup",
      "contents": "MakePopup()"
    },
    {
      "trigger": "MouseCapture",
      "contents": "MouseCapture(${1:boolean doCapture})"
    },
    {
      "trigger": "MoveAbove",
      "contents": "MoveAbove(${1:Panel panel}, ${2:number offset = 0})"
    },
    {
      "trigger": "MoveBelow",
      "contents": "MoveBelow(${1:Panel panel}, ${2:number offset = 0})"
    },
    {
      "trigger": "LoadControlsFromString",
      "contents": "LoadControlsFromString(${1:string data})"
    },
    {
      "trigger": "MoveBy",
      "contents": "MoveBy(${1:number moveX}, ${2:number moveY}, ${3:number time}, ${4:number delay = 0})"
    },
    {
      "trigger": "MoveLeftOf",
      "contents": "MoveLeftOf(${1:Panel panel}, ${2:number offset = 0})"
    },
    {
      "trigger": "MoveRightOf",
      "contents": "MoveRightOf(${1:Panel panel}, ${2:number offset = 0})"
    },
    {
      "trigger": "MoveTo",
      "contents": "MoveTo(${1:number posX}, ${2:number posY}, ${3:number time}, ${4:number delay = 0})"
    },
    {
      "trigger": "MoveToAfter",
      "contents": "MoveToAfter(${1:Panel siblingPanel})"
    },
    {
      "trigger": "MoveToBack",
      "contents": "MoveToBack()"
    },
    {
      "trigger": "MoveToBefore",
      "contents": "MoveToBefore(${1:Panel siblingPanel})"
    },
    {
      "trigger": "MoveToFront",
      "contents": "MoveToFront()"
    },
    {
      "trigger": "NewAnimation",
      "contents": "NewAnimation(${1:number length}, ${2:number delay = 0}, ${3:number ease = -1})"
    },
    {
      "trigger": "NewObject",
      "contents": "NewObject(${1:string objectName})"
    },
    {
      "trigger": "NewObjectCallback",
      "contents": "NewObjectCallback(${1:string objectName}, ${2:string callbackName})"
    },
    {
      "trigger": "NoClipping",
      "contents": "NoClipping(${1:boolean clip})"
    },
    {
      "trigger": "NumSelectedChildren",
      "contents": "NumSelectedChildren()"
    },
    {
      "trigger": "OpenURL",
      "contents": "OpenURL(${1:string URL})"
    },
    {
      "trigger": "PaintAt",
      "contents": "PaintAt(${1:number posX}, ${2:number posY})"
    },
    {
      "trigger": "PaintManual",
      "contents": "PaintManual()"
    },
    {
      "trigger": "ParentToHUD",
      "contents": "ParentToHUD()"
    },
    {
      "trigger": "Paste",
      "contents": "Paste()"
    },
    {
      "trigger": "PositionLabel",
      "contents": "PositionLabel(${1:number lblWidth}, ${2:number x}, ${3:number y}, ${4:Panel lbl}, ${5:Panel panelObj})"
    },
    {
      "trigger": "PostMessage",
      "contents": "PostMessage(${1:string messageName}, ${2:string valueType}, ${3:string value})"
    },
    {
      "trigger": "Prepare",
      "contents": "Prepare()"
    },
    {
      "trigger": "Queue",
      "contents": "Queue()"
    },
    {
      "trigger": "RebuildSpawnIcon",
      "contents": "RebuildSpawnIcon()"
    },
    {
      "trigger": "Receiver",
      "contents": "Receiver(${1:table menu})"
    },
    {
      "trigger": "RebuildSpawnIconEx",
      "contents": "RebuildSpawnIconEx()"
    },
    {
      "trigger": "Refresh",
      "contents": "Refresh(${1:boolean ignoreCache = false})"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "RequestFocus",
      "contents": "RequestFocus()"
    },
    {
      "trigger": "ResetAllFades",
      "contents": "ResetAllFades(${1:boolean hold}, ${2:boolean expiredOnly}, ${3:number newSustain})"
    },
    {
      "trigger": "RunJavascript",
      "contents": "RunJavascript(${1:string js})"
    },
    {
      "trigger": "SaveUndoState",
      "contents": "SaveUndoState()"
    },
    {
      "trigger": "ScreenToLocal",
      "contents": "ScreenToLocal(${1:number screenX}, ${2:number screenY})"
    },
    {
      "trigger": "SelectAll",
      "contents": "SelectAll()"
    },
    {
      "trigger": "SelectAllOnFocus",
      "contents": "SelectAllOnFocus()"
    },
    {
      "trigger": "SelectNone",
      "contents": "SelectNone()"
    },
    {
      "trigger": "SelectAllText",
      "contents": "SelectAllText()"
    },
    {
      "trigger": "SetAchievement",
      "contents": "SetAchievement(${1:number id})"
    },
    {
      "trigger": "SetActionFunction",
      "contents": "SetActionFunction()"
    },
    {
      "trigger": "SetAlpha",
      "contents": "SetAlpha(${1:number alpha})"
    },
    {
      "trigger": "SetAllowNonAsciiCharacters",
      "contents": "SetAllowNonAsciiCharacters(${1:boolean allowed})"
    },
    {
      "trigger": "SetAnimationEnabled",
      "contents": "SetAnimationEnabled(${1:boolean enable})"
    },
    {
      "trigger": "SetAutoDelete",
      "contents": "SetAutoDelete(${1:boolean autoDelete})"
    },
    {
      "trigger": "SetBGColor",
      "contents": "SetBGColor(${1:number g}, ${2:number b}, ${3:number a})"
    },
    {
      "trigger": "SetBGColorEx",
      "contents": "SetBGColorEx(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})"
    },
    {
      "trigger": "SetCaretPos",
      "contents": "SetCaretPos(${1:number offset})"
    },
    {
      "trigger": "SetCommand",
      "contents": "SetCommand()"
    },
    {
      "trigger": "SetContentAlignment",
      "contents": "SetContentAlignment()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string convar})"
    },
    {
      "trigger": "SetCookie",
      "contents": "SetCookie(${1:string cookieName})"
    },
    {
      "trigger": "SetCookieName",
      "contents": "SetCookieName()"
    },
    {
      "trigger": "SetCursor",
      "contents": "SetCursor(${1:string cursor})"
    },
    {
      "trigger": "SetDragParent",
      "contents": "SetDragParent(${1:Panel parent})"
    },
    {
      "trigger": "SetDrawLanguageID",
      "contents": "SetDrawLanguageID(${1:boolean visible})"
    },
    {
      "trigger": "SetDrawLanguageIDAtLeft",
      "contents": "SetDrawLanguageIDAtLeft(${1:boolean left})"
    },
    {
      "trigger": "SetDrawOnTop",
      "contents": "SetDrawOnTop(${1:boolean drawOnTop = false})"
    },
    {
      "trigger": "SetDropTarget",
      "contents": "SetDropTarget(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "SetEnabled",
      "contents": "SetEnabled(${1:boolean enable})"
    },
    {
      "trigger": "SetExpensiveShadow",
      "contents": "SetExpensiveShadow(${1:number distance})"
    },
    {
      "trigger": "SetFGColorEx",
      "contents": "SetFGColorEx(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})"
    },
    {
      "trigger": "SetFGColor",
      "contents": "SetFGColor(${1:number g}, ${2:number b}, ${3:number a})"
    },
    {
      "trigger": "SetFocusTopLevel",
      "contents": "SetFocusTopLevel(${1:boolean state})"
    },
    {
      "trigger": "SetHeight",
      "contents": "SetHeight(${1:number height})"
    },
    {
      "trigger": "SetFontInternal",
      "contents": "SetFontInternal()"
    },
    {
      "trigger": "SetHTML",
      "contents": "SetHTML(${1:string HTML code})"
    },
    {
      "trigger": "SetKeyboardInputEnabled",
      "contents": "SetKeyboardInputEnabled(${1:boolean enable})"
    },
    {
      "trigger": "SetKeyBoardInputEnabled",
      "contents": "SetKeyBoardInputEnabled(${1:boolean keyboardInput})"
    },
    {
      "trigger": "SetMinimumSize",
      "contents": "SetMinimumSize(${1:number minW = nil}, ${2:number minH = nil})"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string ModelPath}, ${2:number skin = 0}, ${3:string bodygroups = \"\"})"
    },
    {
      "trigger": "SetMouseInputEnabled",
      "contents": "SetMouseInputEnabled(${1:boolean mouseInput})"
    },
    {
      "trigger": "SetMultiline",
      "contents": "SetMultiline(${1:boolean multiline})"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})"
    },
    {
      "trigger": "SetPaintBackgroundEnabled",
      "contents": "SetPaintBackgroundEnabled(${1:boolean paintBackground})"
    },
    {
      "trigger": "SetPaintBorderEnabled",
      "contents": "SetPaintBorderEnabled(${1:boolean paintBorder})"
    },
    {
      "trigger": "SetPaintedManually",
      "contents": "SetPaintedManually(${1:boolean paintedManually})"
    },
    {
      "trigger": "SetPaintFunction",
      "contents": "SetPaintFunction()"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:Panel parent})"
    },
    {
      "trigger": "SetPlayer",
      "contents": "SetPlayer(${1:Player player}, ${2:number size})"
    },
    {
      "trigger": "SetPopupStayAtBack",
      "contents": "SetPopupStayAtBack(${1:boolean stayAtBack})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:number posX}, ${2:number posY})"
    },
    {
      "trigger": "SetRenderInScreenshots",
      "contents": "SetRenderInScreenshots(${1:boolean renderInScreenshot})"
    },
    {
      "trigger": "SetSelected",
      "contents": "SetSelected()"
    },
    {
      "trigger": "SetSelectable",
      "contents": "SetSelectable(${1:boolean selectable})"
    },
    {
      "trigger": "SetSelectionCanvas",
      "contents": "SetSelectionCanvas(${1:any selCanvas})"
    },
    {
      "trigger": "SetSize",
      "contents": "SetSize(${1:number width}, ${2:number height})"
    },
    {
      "trigger": "SetSkin",
      "contents": "SetSkin(${1:string skinName})"
    },
    {
      "trigger": "SetSteamID",
      "contents": "SetSteamID(${1:string steamid}, ${2:number size})"
    },
    {
      "trigger": "SetSpawnIcon",
      "contents": "SetSpawnIcon(${1:string icon})"
    },
    {
      "trigger": "SetTabPosition",
      "contents": "SetTabPosition(${1:number position})"
    },
    {
      "trigger": "SetTall",
      "contents": "SetTall(${1:number height})"
    },
    {
      "trigger": "SetText",
      "contents": "SetText(${1:string text})"
    },
    {
      "trigger": "SetTerm",
      "contents": "SetTerm(${1:number delay})"
    },
    {
      "trigger": "SetTextInset",
      "contents": "SetTextInset(${1:number insetX}, ${2:number insetY})"
    },
    {
      "trigger": "SetToolTip",
      "contents": "SetToolTip()"
    },
    {
      "trigger": "SetToFullHeight",
      "contents": "SetToFullHeight()"
    },
    {
      "trigger": "SetToolTipPanel",
      "contents": "SetToolTipPanel()"
    },
    {
      "trigger": "SetTooltip",
      "contents": "SetTooltip(${1:string str})"
    },
    {
      "trigger": "SetTooltipPanel",
      "contents": "SetTooltipPanel(${1:Panel tooltipPanel = nil})"
    },
    {
      "trigger": "SetURL",
      "contents": "SetURL(${1:string url})"
    },
    {
      "trigger": "SetVisible",
      "contents": "SetVisible(${1:boolean visible})"
    },
    {
      "trigger": "SetVerticalScrollbarEnabled",
      "contents": "SetVerticalScrollbarEnabled(${1:boolean display = false})"
    },
    {
      "trigger": "SetWide",
      "contents": "SetWide(${1:number width})"
    },
    {
      "trigger": "SetWidth",
      "contents": "SetWidth(${1:number width})"
    },
    {
      "trigger": "SetWorldClicker",
      "contents": "SetWorldClicker(${1:boolean enabled})"
    },
    {
      "trigger": "SetZPos",
      "contents": "SetZPos(${1:number zIndex})"
    },
    {
      "trigger": "Show",
      "contents": "Show()"
    },
    {
      "trigger": "SetWrap",
      "contents": "SetWrap(${1:boolean wrap})"
    },
    {
      "trigger": "SizeTo",
      "contents": "SizeTo(${1:number sizeW = 0}, ${2:number sizeH = 0}, ${3:number time}, ${4:number delay = 0})"
    },
    {
      "trigger": "SizeToContents",
      "contents": "SizeToContents()"
    },
    {
      "trigger": "SizeToChildren",
      "contents": "SizeToChildren(${1:boolean sizeW = false}, ${2:boolean sizeH = false})"
    },
    {
      "trigger": "SizeToContentsX",
      "contents": "SizeToContentsX(${1:number addVal = 0})"
    },
    {
      "trigger": "SizeToContentsY",
      "contents": "SizeToContentsY(${1:number addVal = 0})"
    },
    {
      "trigger": "SlideDown",
      "contents": "SlideDown(${1:number Length})"
    },
    {
      "trigger": "SlideUp",
      "contents": "SlideUp(${1:number Length})"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()"
    },
    {
      "trigger": "StartBoxSelection",
      "contents": "StartBoxSelection()"
    },
    {
      "trigger": "StretchBottomTo",
      "contents": "StretchBottomTo(${1:Panel tgtPanel}, ${2:number offset = 0})"
    },
    {
      "trigger": "StretchToParent",
      "contents": "StretchToParent(${1:number offsetLeft}, ${2:number offsetTop}, ${3:number offsetRight}, ${4:number offsetBottom})"
    },
    {
      "trigger": "StretchRightTo",
      "contents": "StretchRightTo(${1:Panel tgtPanel}, ${2:number offset = 0})"
    },
    {
      "trigger": "ToggleSelection",
      "contents": "ToggleSelection()"
    },
    {
      "trigger": "ToggleVisible",
      "contents": "ToggleVisible()"
    },
    {
      "trigger": "Undo",
      "contents": "Undo()"
    },
    {
      "trigger": "UnselectAll",
      "contents": "UnselectAll()"
    },
    {
      "trigger": "Valid",
      "contents": "Valid()"
    },
    {
      "trigger": "UpdateHTMLTexture",
      "contents": "UpdateHTMLTexture()"
    },
    {
      "trigger": "Chase",
      "contents": "Chase(${1:NextBot bot}, ${2:Entity ent})"
    },
    {
      "trigger": "Compute",
      "contents": "Compute(${1:NextBot from}, ${2:Vector to}, ${3:function generator = nil})"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()"
    },
    {
      "trigger": "FirstSegment",
      "contents": "FirstSegment()"
    },
    {
      "trigger": "GetAge",
      "contents": "GetAge()"
    },
    {
      "trigger": "GetClosestPosition",
      "contents": "GetClosestPosition(${1:Vector position})"
    },
    {
      "trigger": "GetAllSegments",
      "contents": "GetAllSegments()"
    },
    {
      "trigger": "GetCursorData",
      "contents": "GetCursorData()"
    },
    {
      "trigger": "GetCurrentGoal",
      "contents": "GetCurrentGoal()"
    },
    {
      "trigger": "GetCursorPosition",
      "contents": "GetCursorPosition()"
    },
    {
      "trigger": "GetEnd",
      "contents": "GetEnd()"
    },
    {
      "trigger": "GetGoalTolerance",
      "contents": "GetGoalTolerance()"
    },
    {
      "trigger": "GetHindrance",
      "contents": "GetHindrance()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()"
    },
    {
      "trigger": "GetMinLookAheadDistance",
      "contents": "GetMinLookAheadDistance()"
    },
    {
      "trigger": "GetPositionOnPath",
      "contents": "GetPositionOnPath(${1:number distance})"
    },
    {
      "trigger": "GetStart",
      "contents": "GetStart()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "Invalidate",
      "contents": "Invalidate()"
    },
    {
      "trigger": "LastSegment",
      "contents": "LastSegment()"
    },
    {
      "trigger": "MoveCursor",
      "contents": "MoveCursor(${1:number distance})"
    },
    {
      "trigger": "MoveCursorTo",
      "contents": "MoveCursorTo(${1:number distance})"
    },
    {
      "trigger": "MoveCursorToClosestPosition",
      "contents": "MoveCursorToClosestPosition(${1:Vector pos}, ${2:number type = 0}, ${3:number alongLimit = 0})"
    },
    {
      "trigger": "MoveCursorToEnd",
      "contents": "MoveCursorToEnd()"
    },
    {
      "trigger": "MoveCursorToStart",
      "contents": "MoveCursorToStart()"
    },
    {
      "trigger": "ResetAge",
      "contents": "ResetAge()"
    },
    {
      "trigger": "SetGoalTolerance",
      "contents": "SetGoalTolerance(${1:number distance})"
    },
    {
      "trigger": "SetMinLookAheadDistance",
      "contents": "SetMinLookAheadDistance(${1:number mindist})"
    },
    {
      "trigger": "Update",
      "contents": "Update(${1:NextBot bot})"
    },
    {
      "trigger": "Destroy",
      "contents": "Destroy()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "AddAngleVelocity",
      "contents": "AddAngleVelocity(${1:Vector angularVelocity})"
    },
    {
      "trigger": "TraceBox",
      "contents": "TraceBox(${1:Vector origin}, ${2:Angle angles}, ${3:Vector rayStart}, ${4:Vector rayEnd}, ${5:Vector rayMins}, ${6:Vector rayMaxs})"
    },
    {
      "trigger": "AddGameFlag",
      "contents": "AddGameFlag()"
    },
    {
      "trigger": "AddVelocity",
      "contents": "AddVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "AlignAngles",
      "contents": "AlignAngles(${1:Angle from}, ${2:Angle to})"
    },
    {
      "trigger": "ApplyForceCenter",
      "contents": "ApplyForceCenter(${1:Vector force})"
    },
    {
      "trigger": "ApplyTorqueCenter",
      "contents": "ApplyTorqueCenter(${1:Vector torque})"
    },
    {
      "trigger": "ApplyForceOffset",
      "contents": "ApplyForceOffset(${1:Vector force}, ${2:Vector position})"
    },
    {
      "trigger": "CalculateForceOffset",
      "contents": "CalculateForceOffset(${1:Vector force}, ${2:Vector pos})"
    },
    {
      "trigger": "ClearGameFlag",
      "contents": "ClearGameFlag()"
    },
    {
      "trigger": "CalculateVelocityOffset",
      "contents": "CalculateVelocityOffset(${1:Vector force}, ${2:Vector pos})"
    },
    {
      "trigger": "ComputeShadowControl",
      "contents": "ComputeShadowControl(${1:table shadowparams})"
    },
    {
      "trigger": "EnableDrag",
      "contents": "EnableDrag(${1:boolean enable})"
    },
    {
      "trigger": "EnableCollisions",
      "contents": "EnableCollisions(${1:boolean enable})"
    },
    {
      "trigger": "EnableGravity",
      "contents": "EnableGravity(${1:boolean enable})"
    },
    {
      "trigger": "GetAABB",
      "contents": "GetAABB()"
    },
    {
      "trigger": "EnableMotion",
      "contents": "EnableMotion(${1:boolean enable})"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetContents",
      "contents": "GetContents()"
    },
    {
      "trigger": "GetAngleVelocity",
      "contents": "GetAngleVelocity()"
    },
    {
      "trigger": "GetDamping",
      "contents": "GetDamping()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()"
    },
    {
      "trigger": "GetEnergy",
      "contents": "GetEnergy()"
    },
    {
      "trigger": "GetInertia",
      "contents": "GetInertia()"
    },
    {
      "trigger": "GetInvMass",
      "contents": "GetInvMass()"
    },
    {
      "trigger": "GetInvInertia",
      "contents": "GetInvInertia()"
    },
    {
      "trigger": "GetMass",
      "contents": "GetMass()"
    },
    {
      "trigger": "GetMassCenter",
      "contents": "GetMassCenter()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()"
    },
    {
      "trigger": "GetMeshConvexes",
      "contents": "GetMeshConvexes()"
    },
    {
      "trigger": "GetMesh",
      "contents": "GetMesh()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetRotDamping",
      "contents": "GetRotDamping()"
    },
    {
      "trigger": "GetPositionMatrix",
      "contents": "GetPositionMatrix()"
    },
    {
      "trigger": "GetShadowAngles",
      "contents": "GetShadowAngles()"
    },
    {
      "trigger": "GetSpeedDamping",
      "contents": "GetSpeedDamping()"
    },
    {
      "trigger": "GetShadowPos",
      "contents": "GetShadowPos()"
    },
    {
      "trigger": "GetStress",
      "contents": "GetStress()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()"
    },
    {
      "trigger": "GetSurfaceArea",
      "contents": "GetSurfaceArea()"
    },
    {
      "trigger": "GetVelocityAtPoint",
      "contents": "GetVelocityAtPoint(${1:Vector point})"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()"
    },
    {
      "trigger": "IsAsleep",
      "contents": "IsAsleep()"
    },
    {
      "trigger": "HasGameFlag",
      "contents": "HasGameFlag()"
    },
    {
      "trigger": "IsCollisionEnabled",
      "contents": "IsCollisionEnabled()"
    },
    {
      "trigger": "IsDragEnabled",
      "contents": "IsDragEnabled()"
    },
    {
      "trigger": "IsMotionEnabled",
      "contents": "IsMotionEnabled()"
    },
    {
      "trigger": "IsGravityEnabled",
      "contents": "IsGravityEnabled()"
    },
    {
      "trigger": "IsMoveable",
      "contents": "IsMoveable()"
    },
    {
      "trigger": "IsPenetrating",
      "contents": "IsPenetrating()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector LocalVec})"
    },
    {
      "trigger": "LocalToWorldVector",
      "contents": "LocalToWorldVector(${1:Vector LocalVec})"
    },
    {
      "trigger": "OutputDebugInfo",
      "contents": "OutputDebugInfo()"
    },
    {
      "trigger": "RecheckCollisionFilter",
      "contents": "RecheckCollisionFilter()"
    },
    {
      "trigger": "RotateAroundAxis",
      "contents": "RotateAroundAxis(${1:Vector dir}, ${2:number ang})"
    },
    {
      "trigger": "SetAngleDragCoefficient",
      "contents": "SetAngleDragCoefficient(${1:number coefficient})"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angles})"
    },
    {
      "trigger": "SetBuoyancyRatio",
      "contents": "SetBuoyancyRatio(${1:number buoyancy})"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents()"
    },
    {
      "trigger": "SetDamping",
      "contents": "SetDamping(${1:number linearDamping}, ${2:number angularDamping})"
    },
    {
      "trigger": "SetDragCoefficient",
      "contents": "SetDragCoefficient(${1:number drag})"
    },
    {
      "trigger": "SetInertia",
      "contents": "SetInertia(${1:Vector directionalInertia})"
    },
    {
      "trigger": "SetMass",
      "contents": "SetMass(${1:number mass})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string materialName})"
    },
    {
      "trigger": "SetVelocityInstantaneous",
      "contents": "SetVelocityInstantaneous(${1:Vector velocity})"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position}, ${2:boolean teleport = false})"
    },
    {
      "trigger": "Sleep",
      "contents": "Sleep()"
    },
    {
      "trigger": "UpdateShadow",
      "contents": "UpdateShadow(${1:Vector targetPosition}, ${2:Angle targetAngles})"
    },
    {
      "trigger": "Wake",
      "contents": "Wake()"
    },
    {
      "trigger": "WorldToLocalVector",
      "contents": "WorldToLocalVector(${1:Vector WorldVec})"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector vec})"
    },
    {
      "trigger": "AddCleanup",
      "contents": "AddCleanup(${1:string type}, ${2:Entity ent})"
    },
    {
      "trigger": "AccountID",
      "contents": "AccountID()"
    },
    {
      "trigger": "AddCount",
      "contents": "AddCount(${1:string str}, ${2:Entity ent})"
    },
    {
      "trigger": "AddFrozenPhysicsObject",
      "contents": "AddFrozenPhysicsObject(${1:Entity ent}, ${2:PhysObj physobj})"
    },
    {
      "trigger": "AddDeaths",
      "contents": "AddDeaths(${1:number count})"
    },
    {
      "trigger": "AddFrags",
      "contents": "AddFrags(${1:number count})"
    },
    {
      "trigger": "AddPlayerOption",
      "contents": "AddPlayerOption(${1:string name}, ${2:number timeout}, ${3:function vote_callback}, ${4:function draw_callback})"
    },
    {
      "trigger": "AddVCDSequenceToGestureSlot",
      "contents": "AddVCDSequenceToGestureSlot(${1:number cycle}, ${2:boolean autokill = false})"
    },
    {
      "trigger": "Alive",
      "contents": "Alive()"
    },
    {
      "trigger": "AllowFlashlight",
      "contents": "AllowFlashlight(${1:boolean canFlashlight})"
    },
    {
      "trigger": "AllowImmediateDecalPainting",
      "contents": "AllowImmediateDecalPainting(${1:boolean allow})"
    },
    {
      "trigger": "AnimResetGestureSlot",
      "contents": "AnimResetGestureSlot()"
    },
    {
      "trigger": "AnimRestartGesture",
      "contents": "AnimRestartGesture(${1:boolean autokill = false})"
    },
    {
      "trigger": "AnimRestartMainSequence",
      "contents": "AnimRestartMainSequence()"
    },
    {
      "trigger": "AnimSetGestureSequence",
      "contents": "AnimSetGestureSequence(${1:number sequenceID})"
    },
    {
      "trigger": "AnimSetGestureWeight",
      "contents": "AnimSetGestureWeight(${1:number weight})"
    },
    {
      "trigger": "Armor",
      "contents": "Armor()"
    },
    {
      "trigger": "Ban",
      "contents": "Ban(${1:number minutes}, ${2:boolean kick = false})"
    },
    {
      "trigger": "ChatPrint",
      "contents": "ChatPrint(${1:string message})"
    },
    {
      "trigger": "CanUseFlashlight",
      "contents": "CanUseFlashlight()"
    },
    {
      "trigger": "CheckLimit",
      "contents": "CheckLimit(${1:string limitType})"
    },
    {
      "trigger": "ConCommand",
      "contents": "ConCommand(${1:string command})"
    },
    {
      "trigger": "CreateRagdoll",
      "contents": "CreateRagdoll()"
    },
    {
      "trigger": "CrosshairDisable",
      "contents": "CrosshairDisable()"
    },
    {
      "trigger": "Crouching",
      "contents": "Crouching()"
    },
    {
      "trigger": "CrosshairEnable",
      "contents": "CrosshairEnable()"
    },
    {
      "trigger": "Deaths",
      "contents": "Deaths()"
    },
    {
      "trigger": "DebugInfo",
      "contents": "DebugInfo()"
    },
    {
      "trigger": "DetonateTripmines",
      "contents": "DetonateTripmines()"
    },
    {
      "trigger": "DoAnimationEvent",
      "contents": "DoAnimationEvent(${1:number data})"
    },
    {
      "trigger": "DoAttackEvent",
      "contents": "DoAttackEvent()"
    },
    {
      "trigger": "DoCustomAnimEvent",
      "contents": "DoCustomAnimEvent(${1:number data})"
    },
    {
      "trigger": "DoReloadEvent",
      "contents": "DoReloadEvent()"
    },
    {
      "trigger": "DoSecondaryAttack",
      "contents": "DoSecondaryAttack()"
    },
    {
      "trigger": "DrawViewModel",
      "contents": "DrawViewModel(${1:boolean draw}, ${2:number vm = 0})"
    },
    {
      "trigger": "DrawWorldModel",
      "contents": "DrawWorldModel(${1:boolean draw})"
    },
    {
      "trigger": "DropNamedWeapon",
      "contents": "DropNamedWeapon(${1:string class})"
    },
    {
      "trigger": "DropObject",
      "contents": "DropObject()"
    },
    {
      "trigger": "EnterVehicle",
      "contents": "EnterVehicle(${1:Vehicle vehicle})"
    },
    {
      "trigger": "DropWeapon",
      "contents": "DropWeapon(${1:Weapon weapon})"
    },
    {
      "trigger": "EquipSuit",
      "contents": "EquipSuit()"
    },
    {
      "trigger": "ExitVehicle",
      "contents": "ExitVehicle()"
    },
    {
      "trigger": "Flashlight",
      "contents": "Flashlight(${1:boolean isOn})"
    },
    {
      "trigger": "FlashlightIsOn",
      "contents": "FlashlightIsOn()"
    },
    {
      "trigger": "Frags",
      "contents": "Frags()"
    },
    {
      "trigger": "Freeze",
      "contents": "Freeze(${1:boolean frozen = false})"
    },
    {
      "trigger": "GetActiveWeapon",
      "contents": "GetActiveWeapon()"
    },
    {
      "trigger": "GetAimVector",
      "contents": "GetAimVector()"
    },
    {
      "trigger": "GetAllowWeaponsInVehicle",
      "contents": "GetAllowWeaponsInVehicle()"
    },
    {
      "trigger": "GetAllowFullRotation",
      "contents": "GetAllowFullRotation()"
    },
    {
      "trigger": "GetAmmo",
      "contents": "GetAmmo()"
    },
    {
      "trigger": "GetAmmoCount",
      "contents": "GetAmmoCount()"
    },
    {
      "trigger": "GetAvoidPlayers",
      "contents": "GetAvoidPlayers()"
    },
    {
      "trigger": "GetCanZoom",
      "contents": "GetCanZoom()"
    },
    {
      "trigger": "GetCanWalk",
      "contents": "GetCanWalk()"
    },
    {
      "trigger": "GetClassID",
      "contents": "GetClassID()"
    },
    {
      "trigger": "GetCrouchedWalkSpeed",
      "contents": "GetCrouchedWalkSpeed()"
    },
    {
      "trigger": "GetCount",
      "contents": "GetCount(${1:string type}, ${2:number minus = 0})"
    },
    {
      "trigger": "GetCurrentCommand",
      "contents": "GetCurrentCommand()"
    },
    {
      "trigger": "GetDrivingEntity",
      "contents": "GetDrivingEntity()"
    },
    {
      "trigger": "GetCurrentViewOffset",
      "contents": "GetCurrentViewOffset()"
    },
    {
      "trigger": "GetDrivingMode",
      "contents": "GetDrivingMode()"
    },
    {
      "trigger": "GetDuckSpeed",
      "contents": "GetDuckSpeed()"
    },
    {
      "trigger": "GetEntityInUse",
      "contents": "GetEntityInUse()"
    },
    {
      "trigger": "GetEyeTrace",
      "contents": "GetEyeTrace()"
    },
    {
      "trigger": "GetEyeTraceNoCursor",
      "contents": "GetEyeTraceNoCursor()"
    },
    {
      "trigger": "GetFOV",
      "contents": "GetFOV()"
    },
    {
      "trigger": "GetFriendStatus",
      "contents": "GetFriendStatus()"
    },
    {
      "trigger": "GetHands",
      "contents": "GetHands()"
    },
    {
      "trigger": "GetHoveredWidget",
      "contents": "GetHoveredWidget()"
    },
    {
      "trigger": "GetHull",
      "contents": "GetHull()"
    },
    {
      "trigger": "GetHullDuck",
      "contents": "GetHullDuck()"
    },
    {
      "trigger": "GetInfo",
      "contents": "GetInfo()"
    },
    {
      "trigger": "GetInfoNum",
      "contents": "GetInfoNum(${1:number default})"
    },
    {
      "trigger": "GetJumpPower",
      "contents": "GetJumpPower()"
    },
    {
      "trigger": "GetLaggedMovementValue",
      "contents": "GetLaggedMovementValue()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetNoCollideWithTeammates",
      "contents": "GetNoCollideWithTeammates()"
    },
    {
      "trigger": "GetObserverMode",
      "contents": "GetObserverMode()"
    },
    {
      "trigger": "GetObserverTarget",
      "contents": "GetObserverTarget()"
    },
    {
      "trigger": "GetPData",
      "contents": "GetPData(${1:string key}, ${2:any default = nil})"
    },
    {
      "trigger": "GetPlayerColor",
      "contents": "GetPlayerColor()"
    },
    {
      "trigger": "GetPlayerInfo",
      "contents": "GetPlayerInfo()"
    },
    {
      "trigger": "GetPreferredCarryAngles",
      "contents": "GetPreferredCarryAngles(${1:Entity carryEnt})"
    },
    {
      "trigger": "GetPressedWidget",
      "contents": "GetPressedWidget()"
    },
    {
      "trigger": "GetPunchAngle",
      "contents": "GetPunchAngle()"
    },
    {
      "trigger": "GetRagdollEntity",
      "contents": "GetRagdollEntity()"
    },
    {
      "trigger": "GetRunSpeed",
      "contents": "GetRunSpeed()"
    },
    {
      "trigger": "GetRenderAngles",
      "contents": "GetRenderAngles()"
    },
    {
      "trigger": "GetShootPos",
      "contents": "GetShootPos()"
    },
    {
      "trigger": "GetStepSize",
      "contents": "GetStepSize()"
    },
    {
      "trigger": "GetTimeoutSeconds",
      "contents": "GetTimeoutSeconds()"
    },
    {
      "trigger": "GetTool",
      "contents": "GetTool(${1:string mode = nil})"
    },
    {
      "trigger": "GetUnDuckSpeed",
      "contents": "GetUnDuckSpeed()"
    },
    {
      "trigger": "GetVehicle",
      "contents": "GetVehicle()"
    },
    {
      "trigger": "GetUserGroup",
      "contents": "GetUserGroup()"
    },
    {
      "trigger": "GetViewEntity",
      "contents": "GetViewEntity()"
    },
    {
      "trigger": "GetViewModel",
      "contents": "GetViewModel(${1:number index = 0})"
    },
    {
      "trigger": "GetViewOffset",
      "contents": "GetViewOffset()"
    },
    {
      "trigger": "GetViewOffsetDucked",
      "contents": "GetViewOffsetDucked()"
    },
    {
      "trigger": "GetViewPunchAngles",
      "contents": "GetViewPunchAngles()"
    },
    {
      "trigger": "GetWalkSpeed",
      "contents": "GetWalkSpeed()"
    },
    {
      "trigger": "GetWeapon",
      "contents": "GetWeapon(${1:string className})"
    },
    {
      "trigger": "GetWeaponColor",
      "contents": "GetWeaponColor()"
    },
    {
      "trigger": "GetWeapons",
      "contents": "GetWeapons()"
    },
    {
      "trigger": "Give",
      "contents": "Give(${1:string weaponClassName}, ${2:boolean bNoAmmo = false})"
    },
    {
      "trigger": "GodEnable",
      "contents": "GodEnable()"
    },
    {
      "trigger": "GiveAmmo",
      "contents": "GiveAmmo(${1:number amount}, ${2:string type}, ${3:boolean hidePopup = false})"
    },
    {
      "trigger": "GodDisable",
      "contents": "GodDisable()"
    },
    {
      "trigger": "HasWeapon",
      "contents": "HasWeapon(${1:string className})"
    },
    {
      "trigger": "HasGodMode",
      "contents": "HasGodMode()"
    },
    {
      "trigger": "InVehicle",
      "contents": "InVehicle()"
    },
    {
      "trigger": "IsBot",
      "contents": "IsBot()"
    },
    {
      "trigger": "IPAddress",
      "contents": "IPAddress()"
    },
    {
      "trigger": "IsAdmin",
      "contents": "IsAdmin()"
    },
    {
      "trigger": "IsConnected",
      "contents": "IsConnected()"
    },
    {
      "trigger": "IsDrivingEntity",
      "contents": "IsDrivingEntity()"
    },
    {
      "trigger": "IsFullyAuthenticated",
      "contents": "IsFullyAuthenticated()"
    },
    {
      "trigger": "IsListenServerHost",
      "contents": "IsListenServerHost()"
    },
    {
      "trigger": "IsPlayingTaunt",
      "contents": "IsPlayingTaunt()"
    },
    {
      "trigger": "IsMuted",
      "contents": "IsMuted()"
    },
    {
      "trigger": "IsSprinting",
      "contents": "IsSprinting()"
    },
    {
      "trigger": "IsSuitEquipped",
      "contents": "IsSuitEquipped()"
    },
    {
      "trigger": "IsSuperAdmin",
      "contents": "IsSuperAdmin()"
    },
    {
      "trigger": "IsTimingOut",
      "contents": "IsTimingOut()"
    },
    {
      "trigger": "IsFrozen",
      "contents": "IsFrozen()"
    },
    {
      "trigger": "IsTyping",
      "contents": "IsTyping()"
    },
    {
      "trigger": "IsUserGroup",
      "contents": "IsUserGroup(${1:string groupname})"
    },
    {
      "trigger": "IsVoiceAudible",
      "contents": "IsVoiceAudible()"
    },
    {
      "trigger": "IsWorldClicking",
      "contents": "IsWorldClicking()"
    },
    {
      "trigger": "IsSpeaking",
      "contents": "IsSpeaking()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown()"
    },
    {
      "trigger": "KeyDownLast",
      "contents": "KeyDownLast()"
    },
    {
      "trigger": "KeyPressed",
      "contents": "KeyPressed()"
    },
    {
      "trigger": "KeyReleased",
      "contents": "KeyReleased()"
    },
    {
      "trigger": "Kick",
      "contents": "Kick()"
    },
    {
      "trigger": "Kill",
      "contents": "Kill()"
    },
    {
      "trigger": "KillSilent",
      "contents": "KillSilent()"
    },
    {
      "trigger": "LagCompensation",
      "contents": "LagCompensation(${1:boolean lagCompensation})"
    },
    {
      "trigger": "LastHitGroup",
      "contents": "LastHitGroup()"
    },
    {
      "trigger": "LimitHit",
      "contents": "LimitHit(${1:string type})"
    },
    {
      "trigger": "Lock",
      "contents": "Lock()"
    },
    {
      "trigger": "MotionSensorPos",
      "contents": "MotionSensorPos(${1:number bone})"
    },
    {
      "trigger": "Nick",
      "contents": "Nick()"
    },
    {
      "trigger": "Name",
      "contents": "Name()"
    },
    {
      "trigger": "PhysgunUnfreeze",
      "contents": "PhysgunUnfreeze()"
    },
    {
      "trigger": "PacketLoss",
      "contents": "PacketLoss()"
    },
    {
      "trigger": "PickupObject",
      "contents": "PickupObject(${1:Entity entity})"
    },
    {
      "trigger": "PlayStepSound",
      "contents": "PlayStepSound(${1:number volume})"
    },
    {
      "trigger": "Ping",
      "contents": "Ping()"
    },
    {
      "trigger": "PrintMessage",
      "contents": "PrintMessage(${1:string message})"
    },
    {
      "trigger": "RemoveAmmo",
      "contents": "RemoveAmmo(${1:number ammoCount})"
    },
    {
      "trigger": "RemoveAllAmmo",
      "contents": "RemoveAllAmmo()"
    },
    {
      "trigger": "RemoveAllItems",
      "contents": "RemoveAllItems()"
    },
    {
      "trigger": "ResetHull",
      "contents": "ResetHull()"
    },
    {
      "trigger": "RemovePData",
      "contents": "RemovePData(${1:string key})"
    },
    {
      "trigger": "RemoveSuit",
      "contents": "RemoveSuit()"
    },
    {
      "trigger": "ScreenFade",
      "contents": "ScreenFade(${1:number clr = color_white}, ${2:number fadeTime}, ${3:number fadeHold})"
    },
    {
      "trigger": "SelectWeapon",
      "contents": "SelectWeapon()"
    },
    {
      "trigger": "Say",
      "contents": "Say(${1:string text}, ${2:boolean teamOnly = false})"
    },
    {
      "trigger": "SendHint",
      "contents": "SendHint(${1:string name}, ${2:number delay})"
    },
    {
      "trigger": "SetActiveWeapon",
      "contents": "SetActiveWeapon(${1:Weapon weapon})"
    },
    {
      "trigger": "SendLua",
      "contents": "SendLua(${1:string script})"
    },
    {
      "trigger": "SetAllowWeaponsInVehicle",
      "contents": "SetAllowWeaponsInVehicle(${1:boolean allow})"
    },
    {
      "trigger": "SetAllowFullRotation",
      "contents": "SetAllowFullRotation(${1:boolean Allowed})"
    },
    {
      "trigger": "SetAmmo",
      "contents": "SetAmmo(${1:number ammoCount})"
    },
    {
      "trigger": "SetArmor",
      "contents": "SetArmor(${1:number Amount})"
    },
    {
      "trigger": "SetCanWalk",
      "contents": "SetCanWalk(${1:boolean abletowalk})"
    },
    {
      "trigger": "SetAvoidPlayers",
      "contents": "SetAvoidPlayers(${1:boolean avoidPlayers})"
    },
    {
      "trigger": "SetCanZoom",
      "contents": "SetCanZoom(${1:boolean canZoom})"
    },
    {
      "trigger": "SetClassID",
      "contents": "SetClassID(${1:number classID})"
    },
    {
      "trigger": "SetCurrentViewOffset",
      "contents": "SetCurrentViewOffset(${1:Vector viewOffset})"
    },
    {
      "trigger": "SetCrouchedWalkSpeed",
      "contents": "SetCrouchedWalkSpeed(${1:number speed})"
    },
    {
      "trigger": "SetDeaths",
      "contents": "SetDeaths(${1:number deathcount})"
    },
    {
      "trigger": "SetDrivingEntity",
      "contents": "SetDrivingEntity(${1:Entity drivingEntity = NULL}, ${2:number drivingMode})"
    },
    {
      "trigger": "SetDSP",
      "contents": "SetDSP(${1:number soundFilter}, ${2:boolean fastReset})"
    },
    {
      "trigger": "SetDuckSpeed",
      "contents": "SetDuckSpeed(${1:number duckSpeed})"
    },
    {
      "trigger": "SetEyeAngles",
      "contents": "SetEyeAngles(${1:Angle angle})"
    },
    {
      "trigger": "SetFrags",
      "contents": "SetFrags(${1:number fragcount})"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov}, ${2:number time})"
    },
    {
      "trigger": "SetHands",
      "contents": "SetHands(${1:Entity hands})"
    },
    {
      "trigger": "SetHoveredWidget",
      "contents": "SetHoveredWidget(${1:Entity widget = NULL})"
    },
    {
      "trigger": "SetHullDuck",
      "contents": "SetHullDuck(${1:Vector hullMins}, ${2:Vector hullMaxs})"
    },
    {
      "trigger": "SetHull",
      "contents": "SetHull(${1:Vector hullMins}, ${2:Vector hullMaxs})"
    },
    {
      "trigger": "SetJumpPower",
      "contents": "SetJumpPower(${1:number jumpPower})"
    },
    {
      "trigger": "SetLaggedMovementValue",
      "contents": "SetLaggedMovementValue(${1:number timescale})"
    },
    {
      "trigger": "SetMaxSpeed",
      "contents": "SetMaxSpeed(${1:number walkSpeed})"
    },
    {
      "trigger": "SetNoCollideWithTeammates",
      "contents": "SetNoCollideWithTeammates(${1:boolean shouldNotCollide})"
    },
    {
      "trigger": "SetMuted",
      "contents": "SetMuted(${1:boolean mute})"
    },
    {
      "trigger": "SetNoTarget",
      "contents": "SetNoTarget(${1:boolean visibility})"
    },
    {
      "trigger": "SetPlayerColor",
      "contents": "SetPlayerColor(${1:Vector Color})"
    },
    {
      "trigger": "SetObserverMode",
      "contents": "SetObserverMode()"
    },
    {
      "trigger": "SetPData",
      "contents": "SetPData(${1:string key}, ${2:any value})"
    },
    {
      "trigger": "SetPressedWidget",
      "contents": "SetPressedWidget(${1:Entity pressedWidget = NULL})"
    },
    {
      "trigger": "SetRunSpeed",
      "contents": "SetRunSpeed(${1:number runSpeed})"
    },
    {
      "trigger": "SetRenderAngles",
      "contents": "SetRenderAngles(${1:Angle ang})"
    },
    {
      "trigger": "SetSuppressPickupNotices",
      "contents": "SetSuppressPickupNotices(${1:boolean doSuppress})"
    },
    {
      "trigger": "SetStepSize",
      "contents": "SetStepSize(${1:number stepHeight})"
    },
    {
      "trigger": "SetTeam",
      "contents": "SetTeam(${1:number Team})"
    },
    {
      "trigger": "SetUnDuckSpeed",
      "contents": "SetUnDuckSpeed(${1:number UnDuckSpeed})"
    },
    {
      "trigger": "SetUserGroup",
      "contents": "SetUserGroup(${1:string groupName})"
    },
    {
      "trigger": "SetupHands",
      "contents": "SetupHands(${1:Entity ent})"
    },
    {
      "trigger": "SetViewEntity",
      "contents": "SetViewEntity(${1:Entity viewEntity})"
    },
    {
      "trigger": "SetViewOffset",
      "contents": "SetViewOffset(${1:Vector viewOffset})"
    },
    {
      "trigger": "SetViewOffsetDucked",
      "contents": "SetViewOffsetDucked(${1:Vector viewOffset})"
    },
    {
      "trigger": "SetViewPunchAngles",
      "contents": "SetViewPunchAngles(${1:Angle punchAngle})"
    },
    {
      "trigger": "SetWalkSpeed",
      "contents": "SetWalkSpeed(${1:number walkSpeed})"
    },
    {
      "trigger": "SetWeaponColor",
      "contents": "SetWeaponColor(${1:Vector Color})"
    },
    {
      "trigger": "ShouldDrawLocalPlayer",
      "contents": "ShouldDrawLocalPlayer()"
    },
    {
      "trigger": "ShouldDropWeapon",
      "contents": "ShouldDropWeapon(${1:boolean drop})"
    },
    {
      "trigger": "ShowProfile",
      "contents": "ShowProfile()"
    },
    {
      "trigger": "SimulateGravGunDrop",
      "contents": "SimulateGravGunDrop(${1:Entity ent})"
    },
    {
      "trigger": "SimulateGravGunPickup",
      "contents": "SimulateGravGunPickup(${1:Entity ent})"
    },
    {
      "trigger": "Spectate",
      "contents": "Spectate()"
    },
    {
      "trigger": "SpectateEntity",
      "contents": "SpectateEntity(${1:Entity entity})"
    },
    {
      "trigger": "SprayDecal",
      "contents": "SprayDecal(${1:Vector sprayOrigin}, ${2:Vector sprayEndPos})"
    },
    {
      "trigger": "SprintDisable",
      "contents": "SprintDisable()"
    },
    {
      "trigger": "SprintEnable",
      "contents": "SprintEnable()"
    },
    {
      "trigger": "StartSprinting",
      "contents": "StartSprinting()"
    },
    {
      "trigger": "StartWalking",
      "contents": "StartWalking()"
    },
    {
      "trigger": "SteamID",
      "contents": "SteamID()"
    },
    {
      "trigger": "StopSprinting",
      "contents": "StopSprinting()"
    },
    {
      "trigger": "StopWalking",
      "contents": "StopWalking()"
    },
    {
      "trigger": "StripAmmo",
      "contents": "StripAmmo()"
    },
    {
      "trigger": "StopZooming",
      "contents": "StopZooming()"
    },
    {
      "trigger": "StripWeapons",
      "contents": "StripWeapons()"
    },
    {
      "trigger": "StripWeapon",
      "contents": "StripWeapon(${1:string weapon})"
    },
    {
      "trigger": "SuppressHint",
      "contents": "SuppressHint(${1:string name})"
    },
    {
      "trigger": "SwitchToDefaultWeapon",
      "contents": "SwitchToDefaultWeapon()"
    },
    {
      "trigger": "TimeConnected",
      "contents": "TimeConnected()"
    },
    {
      "trigger": "Team",
      "contents": "Team()"
    },
    {
      "trigger": "TranslateWeaponActivity",
      "contents": "TranslateWeaponActivity()"
    },
    {
      "trigger": "TraceHullAttack",
      "contents": "TraceHullAttack(${1:Vector startPos}, ${2:Vector endPos}, ${3:Vector mins}, ${4:Vector maxs}, ${5:number damage}, ${6:number damageForce}, ${7:boolean damageAllNPCs})"
    },
    {
      "trigger": "UnfreezePhysicsObjects",
      "contents": "UnfreezePhysicsObjects()"
    },
    {
      "trigger": "UniqueID",
      "contents": "UniqueID()"
    },
    {
      "trigger": "UniqueIDTable",
      "contents": "UniqueIDTable(${1:any key})"
    },
    {
      "trigger": "UnLock",
      "contents": "UnLock()"
    },
    {
      "trigger": "UnSpectate",
      "contents": "UnSpectate()"
    },
    {
      "trigger": "ViewPunch",
      "contents": "ViewPunch(${1:Angle PunchAngle})"
    },
    {
      "trigger": "UserID",
      "contents": "UserID()"
    },
    {
      "trigger": "ViewPunchReset",
      "contents": "ViewPunchReset(${1:number tolerance = 0})"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "VoiceVolume",
      "contents": "VoiceVolume()"
    },
    {
      "trigger": "GetBrightness",
      "contents": "GetBrightness()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetConstantAttenuation",
      "contents": "GetConstantAttenuation()"
    },
    {
      "trigger": "GetEnableShadows",
      "contents": "GetEnableShadows()"
    },
    {
      "trigger": "GetFarZ",
      "contents": "GetFarZ()"
    },
    {
      "trigger": "GetHorizontalFOV",
      "contents": "GetHorizontalFOV()"
    },
    {
      "trigger": "GetLinearAttenuation",
      "contents": "GetLinearAttenuation()"
    },
    {
      "trigger": "GetNearZ",
      "contents": "GetNearZ()"
    },
    {
      "trigger": "GetOrthographic",
      "contents": "GetOrthographic()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetQuadraticAttenuation",
      "contents": "GetQuadraticAttenuation()"
    },
    {
      "trigger": "GetVerticalFOV",
      "contents": "GetVerticalFOV()"
    },
    {
      "trigger": "GetTexture",
      "contents": "GetTexture()"
    },
    {
      "trigger": "GetTextureFrame",
      "contents": "GetTextureFrame()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angle})"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()"
    },
    {
      "trigger": "SetBrightness",
      "contents": "SetBrightness(${1:number brightness})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetConstantAttenuation",
      "contents": "SetConstantAttenuation(${1:number constAtten})"
    },
    {
      "trigger": "SetEnableShadows",
      "contents": "SetEnableShadows(${1:boolean newState})"
    },
    {
      "trigger": "SetFarZ",
      "contents": "SetFarZ(${1:number farZ})"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov})"
    },
    {
      "trigger": "SetHorizontalFOV",
      "contents": "SetHorizontalFOV(${1:number hFOV})"
    },
    {
      "trigger": "SetLinearAttenuation",
      "contents": "SetLinearAttenuation(${1:number linearAtten})"
    },
    {
      "trigger": "SetNearZ",
      "contents": "SetNearZ(${1:number nearZ})"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})"
    },
    {
      "trigger": "SetOrthographic",
      "contents": "SetOrthographic(${1:boolean orthographic}, ${2:number left}, ${3:number top}, ${4:number right}, ${5:number bottom})"
    },
    {
      "trigger": "SetQuadraticAttenuation",
      "contents": "SetQuadraticAttenuation(${1:number quadAtten})"
    },
    {
      "trigger": "SetTextureFrame",
      "contents": "SetTextureFrame(${1:number frame})"
    },
    {
      "trigger": "SetTexture",
      "contents": "SetTexture()"
    },
    {
      "trigger": "SetVerticalFOV",
      "contents": "SetVerticalFOV(${1:number vFOV})"
    },
    {
      "trigger": "Update",
      "contents": "Update()"
    },
    {
      "trigger": "AddTask",
      "contents": "AddTask(${1:string taskname}, ${2:any taskdata})"
    },
    {
      "trigger": "AddTaskEx",
      "contents": "AddTaskEx(${1:string start}, ${2:string run}, ${3:number data})"
    },
    {
      "trigger": "EngTask",
      "contents": "EngTask(${1:string taskname}, ${2:number taskdata})"
    },
    {
      "trigger": "GetTask",
      "contents": "GetTask(${1:number num})"
    },
    {
      "trigger": "NumTasks",
      "contents": "NumTasks()"
    },
    {
      "trigger": "Init",
      "contents": "Init()"
    },
    {
      "trigger": "Pop",
      "contents": "Pop(${1:number amount = 1})"
    },
    {
      "trigger": "Push",
      "contents": "Push(${1:any object})"
    },
    {
      "trigger": "Size",
      "contents": "Size()"
    },
    {
      "trigger": "Top",
      "contents": "Top()"
    },
    {
      "trigger": "Init",
      "contents": "Init()"
    },
    {
      "trigger": "InitFunctionName",
      "contents": "InitFunctionName(${1:string startname}, ${2:string runname}, ${3:number taskdata})"
    },
    {
      "trigger": "InitEngine",
      "contents": "InitEngine(${1:string taskname}, ${2:number taskdata})"
    },
    {
      "trigger": "IsEngineType",
      "contents": "IsEngineType()"
    },
    {
      "trigger": "IsFNameType",
      "contents": "IsFNameType()"
    },
    {
      "trigger": "Run",
      "contents": "Run(${1:NPC target})"
    },
    {
      "trigger": "Start",
      "contents": "Start(${1:NPC target})"
    },
    {
      "trigger": "Allowed",
      "contents": "Allowed()"
    },
    {
      "trigger": "BuildConVarList",
      "contents": "BuildConVarList()"
    },
    {
      "trigger": "CheckObjects",
      "contents": "CheckObjects()"
    },
    {
      "trigger": "ClearObjects",
      "contents": "ClearObjects()"
    },
    {
      "trigger": "Create",
      "contents": "Create()"
    },
    {
      "trigger": "CreateConVars",
      "contents": "CreateConVars()"
    },
    {
      "trigger": "GetBone",
      "contents": "GetBone()"
    },
    {
      "trigger": "GetClientInfo",
      "contents": "GetClientInfo(${1:string name})"
    },
    {
      "trigger": "GetClientNumber",
      "contents": "GetClientNumber(${1:string name}, ${2:number default = 0})"
    },
    {
      "trigger": "GetEnt",
      "contents": "GetEnt()"
    },
    {
      "trigger": "GetHelpText",
      "contents": "GetHelpText()"
    },
    {
      "trigger": "GetLocalPos",
      "contents": "GetLocalPos()"
    },
    {
      "trigger": "GetMode",
      "contents": "GetMode()"
    },
    {
      "trigger": "GetOperation",
      "contents": "GetOperation()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()"
    },
    {
      "trigger": "GetPhys",
      "contents": "GetPhys()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()"
    },
    {
      "trigger": "GetServerInfo",
      "contents": "GetServerInfo(${1:string name})"
    },
    {
      "trigger": "MakeGhostEntity",
      "contents": "MakeGhostEntity(${1:string model})"
    },
    {
      "trigger": "GetStage",
      "contents": "GetStage()"
    },
    {
      "trigger": "NumObjects",
      "contents": "NumObjects()"
    },
    {
      "trigger": "SetObject",
      "contents": "SetObject(${1:number id}, ${2:Entity ent}, ${3:PhysObj phys}, ${4:number bone}, ${5:Vector normal})"
    },
    {
      "trigger": "ReleaseGhostEntity",
      "contents": "ReleaseGhostEntity()"
    },
    {
      "trigger": "SetOperation",
      "contents": "SetOperation(${1:number operation})"
    },
    {
      "trigger": "SetStage",
      "contents": "SetStage(${1:number stage})"
    },
    {
      "trigger": "StartGhostEntity",
      "contents": "StartGhostEntity(${1:Entity ent})"
    },
    {
      "trigger": "UpdateData",
      "contents": "UpdateData()"
    },
    {
      "trigger": "UpdateGhostEntity",
      "contents": "UpdateGhostEntity()"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Vector vector})"
    },
    {
      "trigger": "Angle",
      "contents": "Angle()"
    },
    {
      "trigger": "AngleEx",
      "contents": "AngleEx(${1:Vector up})"
    },
    {
      "trigger": "Cross",
      "contents": "Cross(${1:Vector otherVector})"
    },
    {
      "trigger": "Distance",
      "contents": "Distance(${1:Vector otherVector})"
    },
    {
      "trigger": "DistToSqr",
      "contents": "DistToSqr(${1:Vector otherVec})"
    },
    {
      "trigger": "Div",
      "contents": "Div(${1:number divisor})"
    },
    {
      "trigger": "Dot",
      "contents": "Dot(${1:Vector otherVector})"
    },
    {
      "trigger": "DotProduct",
      "contents": "DotProduct(${1:Vector Vector})"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()"
    },
    {
      "trigger": "GetNormalized",
      "contents": "GetNormalized()"
    },
    {
      "trigger": "IsZero",
      "contents": "IsZero()"
    },
    {
      "trigger": "IsEqualTol",
      "contents": "IsEqualTol(${1:Vector compare}, ${2:number tolerance})"
    },
    {
      "trigger": "Length",
      "contents": "Length()"
    },
    {
      "trigger": "Normalize",
      "contents": "Normalize()"
    },
    {
      "trigger": "Mul",
      "contents": "Mul(${1:number multiplier})"
    },
    {
      "trigger": "LengthSqr",
      "contents": "LengthSqr()"
    },
    {
      "trigger": "Rotate",
      "contents": "Rotate(${1:Angle rotation})"
    },
    {
      "trigger": "Sub",
      "contents": "Sub(${1:Vector vector})"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:Vector vector})"
    },
    {
      "trigger": "ToColor",
      "contents": "ToColor()"
    },
    {
      "trigger": "WithinAABox",
      "contents": "WithinAABox(${1:Vector boxStart}, ${2:Vector boxEnd})"
    },
    {
      "trigger": "ToScreen",
      "contents": "ToScreen()"
    },
    {
      "trigger": "BoostTimeLeft",
      "contents": "BoostTimeLeft()"
    },
    {
      "trigger": "Zero",
      "contents": "Zero()"
    },
    {
      "trigger": "CheckExitPoint",
      "contents": "CheckExitPoint(${1:number yaw}, ${2:number distance})"
    },
    {
      "trigger": "EnableEngine",
      "contents": "EnableEngine(${1:boolean enable})"
    },
    {
      "trigger": "GetAmmo",
      "contents": "GetAmmo()"
    },
    {
      "trigger": "GetCameraDistance",
      "contents": "GetCameraDistance()"
    },
    {
      "trigger": "GetDriver",
      "contents": "GetDriver()"
    },
    {
      "trigger": "GetHLSpeed",
      "contents": "GetHLSpeed()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()"
    },
    {
      "trigger": "GetOperatingParams",
      "contents": "GetOperatingParams()"
    },
    {
      "trigger": "GetPassenger",
      "contents": "GetPassenger(${1:number passenger})"
    },
    {
      "trigger": "GetPassengerSeatPoint",
      "contents": "GetPassengerSeatPoint(${1:number role})"
    },
    {
      "trigger": "GetRPM",
      "contents": "GetRPM()"
    },
    {
      "trigger": "GetSpeed",
      "contents": "GetSpeed()"
    },
    {
      "trigger": "GetSteering",
      "contents": "GetSteering()"
    },
    {
      "trigger": "GetSteeringDegrees",
      "contents": "GetSteeringDegrees()"
    },
    {
      "trigger": "GetThirdPersonMode",
      "contents": "GetThirdPersonMode()"
    },
    {
      "trigger": "GetThrottle",
      "contents": "GetThrottle()"
    },
    {
      "trigger": "GetVehicleParams",
      "contents": "GetVehicleParams()"
    },
    {
      "trigger": "GetVehicleClass",
      "contents": "GetVehicleClass()"
    },
    {
      "trigger": "GetVehicleViewPosition",
      "contents": "GetVehicleViewPosition(${1:number role = 0})"
    },
    {
      "trigger": "GetWheel",
      "contents": "GetWheel(${1:number wheel})"
    },
    {
      "trigger": "GetWheelBaseHeight",
      "contents": "GetWheelBaseHeight(${1:number wheel})"
    },
    {
      "trigger": "GetWheelContactPoint",
      "contents": "GetWheelContactPoint(${1:number wheel})"
    },
    {
      "trigger": "GetWheelTotalHeight",
      "contents": "GetWheelTotalHeight(${1:number wheel})"
    },
    {
      "trigger": "GetWheelCount",
      "contents": "GetWheelCount()"
    },
    {
      "trigger": "HasBoost",
      "contents": "HasBoost()"
    },
    {
      "trigger": "IsBoosting",
      "contents": "IsBoosting()"
    },
    {
      "trigger": "HasBrakePedal",
      "contents": "HasBrakePedal()"
    },
    {
      "trigger": "IsEngineEnabled",
      "contents": "IsEngineEnabled()"
    },
    {
      "trigger": "IsValidVehicle",
      "contents": "IsValidVehicle()"
    },
    {
      "trigger": "IsEngineStarted",
      "contents": "IsEngineStarted()"
    },
    {
      "trigger": "IsVehicleBodyInWater",
      "contents": "IsVehicleBodyInWater()"
    },
    {
      "trigger": "SetBoost",
      "contents": "SetBoost(${1:number boost})"
    },
    {
      "trigger": "ReleaseHandbrake",
      "contents": "ReleaseHandbrake()"
    },
    {
      "trigger": "SetCameraDistance",
      "contents": "SetCameraDistance(${1:number distance})"
    },
    {
      "trigger": "SetHandbrake",
      "contents": "SetHandbrake(${1:boolean handbrake})"
    },
    {
      "trigger": "SetHasBrakePedal",
      "contents": "SetHasBrakePedal(${1:boolean brakePedal})"
    },
    {
      "trigger": "SetMaxReverseThrottle",
      "contents": "SetMaxReverseThrottle(${1:number maxRevThrottle})"
    },
    {
      "trigger": "SetMaxThrottle",
      "contents": "SetMaxThrottle(${1:number maxThrottle})"
    },
    {
      "trigger": "SetSpringLength",
      "contents": "SetSpringLength(${1:number wheel}, ${2:number length})"
    },
    {
      "trigger": "SetSteering",
      "contents": "SetSteering(${1:number front}, ${2:number rear})"
    },
    {
      "trigger": "SetSteeringDegrees",
      "contents": "SetSteeringDegrees(${1:number steeringDegrees})"
    },
    {
      "trigger": "SetThirdPersonMode",
      "contents": "SetThirdPersonMode(${1:boolean enable})"
    },
    {
      "trigger": "SetThrottle",
      "contents": "SetThrottle(${1:number throttle})"
    },
    {
      "trigger": "SetVehicleClass",
      "contents": "SetVehicleClass(${1:string class})"
    },
    {
      "trigger": "SetVehicleEntryAnim",
      "contents": "SetVehicleEntryAnim(${1:boolean bOn})"
    },
    {
      "trigger": "SetVehicleParams",
      "contents": "SetVehicleParams()"
    },
    {
      "trigger": "SetWheelFriction",
      "contents": "SetWheelFriction(${1:number wheel}, ${2:number friction})"
    },
    {
      "trigger": "StartEngine",
      "contents": "StartEngine(${1:boolean start})"
    },
    {
      "trigger": "GetField",
      "contents": "GetField(${1:number row}, ${2:number column})"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()"
    },
    {
      "trigger": "GetForward",
      "contents": "GetForward()"
    },
    {
      "trigger": "GetInverse",
      "contents": "GetInverse()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()"
    },
    {
      "trigger": "GetInverseTR",
      "contents": "GetInverseTR()"
    },
    {
      "trigger": "GetScale",
      "contents": "GetScale()"
    },
    {
      "trigger": "GetTranslation",
      "contents": "GetTranslation()"
    },
    {
      "trigger": "GetUp",
      "contents": "GetUp()"
    },
    {
      "trigger": "Identity",
      "contents": "Identity()"
    },
    {
      "trigger": "Invert",
      "contents": "Invert()"
    },
    {
      "trigger": "InvertTR",
      "contents": "InvertTR()"
    },
    {
      "trigger": "IsIdentity",
      "contents": "IsIdentity()"
    },
    {
      "trigger": "IsRotationMatrix",
      "contents": "IsRotationMatrix()"
    },
    {
      "trigger": "Rotate",
      "contents": "Rotate(${1:Angle rotation})"
    },
    {
      "trigger": "Scale",
      "contents": "Scale(${1:Vector scale})"
    },
    {
      "trigger": "ScaleTranslation",
      "contents": "ScaleTranslation(${1:number scale})"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:VMatrix src})"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angle})"
    },
    {
      "trigger": "SetField",
      "contents": "SetField(${1:number row}, ${2:number column}, ${3:number value})"
    },
    {
      "trigger": "SetForward",
      "contents": "SetForward(${1:Vector forward})"
    },
    {
      "trigger": "SetRight",
      "contents": "SetRight(${1:Vector forward})"
    },
    {
      "trigger": "SetScale",
      "contents": "SetScale(${1:Vector scale})"
    },
    {
      "trigger": "SetTranslation",
      "contents": "SetTranslation(${1:Vector translation})"
    },
    {
      "trigger": "SetUp",
      "contents": "SetUp(${1:Vector forward})"
    },
    {
      "trigger": "ToTable",
      "contents": "ToTable()"
    },
    {
      "trigger": "AllowsAutoSwitchFrom",
      "contents": "AllowsAutoSwitchFrom()"
    },
    {
      "trigger": "AllowsAutoSwitchTo",
      "contents": "AllowsAutoSwitchTo()"
    },
    {
      "trigger": "Translate",
      "contents": "Translate(${1:Vector translation})"
    },
    {
      "trigger": "CallOnClient",
      "contents": "CallOnClient(${1:string functionName})"
    },
    {
      "trigger": "DefaultReload",
      "contents": "DefaultReload()"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()"
    },
    {
      "trigger": "GetHoldType",
      "contents": "GetHoldType()"
    },
    {
      "trigger": "GetNextPrimaryFire",
      "contents": "GetNextPrimaryFire()"
    },
    {
      "trigger": "GetNextSecondaryFire",
      "contents": "GetNextSecondaryFire()"
    },
    {
      "trigger": "GetPrimaryAmmoType",
      "contents": "GetPrimaryAmmoType()"
    },
    {
      "trigger": "GetPrintName",
      "contents": "GetPrintName()"
    },
    {
      "trigger": "GetSecondaryAmmoType",
      "contents": "GetSecondaryAmmoType()"
    },
    {
      "trigger": "GetSlotPos",
      "contents": "GetSlotPos()"
    },
    {
      "trigger": "GetSlot",
      "contents": "GetSlot()"
    },
    {
      "trigger": "GetWeaponWorldModel",
      "contents": "GetWeaponWorldModel()"
    },
    {
      "trigger": "GetWeight",
      "contents": "GetWeight()"
    },
    {
      "trigger": "GetWeaponViewModel",
      "contents": "GetWeaponViewModel()"
    },
    {
      "trigger": "HasAmmo",
      "contents": "HasAmmo()"
    },
    {
      "trigger": "IsCarriedByLocalPlayer",
      "contents": "IsCarriedByLocalPlayer()"
    },
    {
      "trigger": "IsScripted",
      "contents": "IsScripted()"
    },
    {
      "trigger": "IsWeaponVisible",
      "contents": "IsWeaponVisible()"
    },
    {
      "trigger": "LastShootTime",
      "contents": "LastShootTime()"
    },
    {
      "trigger": "SendWeaponAnim",
      "contents": "SendWeaponAnim()"
    },
    {
      "trigger": "SetLastShootTime",
      "contents": "SetLastShootTime(${1:number time = CurTime()})"
    },
    {
      "trigger": "SetHoldType",
      "contents": "SetHoldType(${1:string name})"
    },
    {
      "trigger": "SetNextSecondaryFire",
      "contents": "SetNextSecondaryFire(${1:number time})"
    },
    {
      "trigger": "SetNextPrimaryFire",
      "contents": "SetNextPrimaryFire(${1:number time})"
    },
    {
      "trigger": "achievements.BalloonPopped",
      "contents": "achievements.BalloonPopped()"
    },
    {
      "trigger": "achievements.EatBall",
      "contents": "achievements.EatBall()"
    },
    {
      "trigger": "achievements.Count",
      "contents": "achievements.Count()"
    },
    {
      "trigger": "achievements.GetCount",
      "contents": "achievements.GetCount(${1:number achievementID})"
    },
    {
      "trigger": "achievements.GetGoal",
      "contents": "achievements.GetGoal(${1:number achievementID})"
    },
    {
      "trigger": "achievements.IncBaddies",
      "contents": "achievements.IncBaddies()"
    },
    {
      "trigger": "achievements.GetName",
      "contents": "achievements.GetName(${1:number achievementID})"
    },
    {
      "trigger": "achievements.IncBystander",
      "contents": "achievements.IncBystander()"
    },
    {
      "trigger": "achievements.IncGoodies",
      "contents": "achievements.IncGoodies()"
    },
    {
      "trigger": "achievements.IsAchieved",
      "contents": "achievements.IsAchieved(${1:number AchievementID})"
    },
    {
      "trigger": "achievements.Remover",
      "contents": "achievements.Remover()"
    },
    {
      "trigger": "achievements.SpawnedNPC",
      "contents": "achievements.SpawnedNPC()"
    },
    {
      "trigger": "achievements.SpawnedProp",
      "contents": "achievements.SpawnedProp()"
    },
    {
      "trigger": "achievements.SpawnedRagdoll",
      "contents": "achievements.SpawnedRagdoll()"
    },
    {
      "trigger": "achievements.SpawnMenuOpen",
      "contents": "achievements.SpawnMenuOpen()"
    },
    {
      "trigger": "ai.GetScheduleID",
      "contents": "ai.GetScheduleID()"
    },
    {
      "trigger": "baseclass.Get",
      "contents": "baseclass.Get(${1:string name})"
    },
    {
      "trigger": "ai.GetTaskID",
      "contents": "ai.GetTaskID(${1:string task})"
    },
    {
      "trigger": "baseclass.Set",
      "contents": "baseclass.Set(${1:string name}, ${2:table tab})"
    },
    {
      "trigger": "achievements.GetDesc",
      "contents": "achievements.GetDesc(${1:number achievementID})"
    },
    {
      "trigger": "bit.arshift",
      "contents": "bit.arshift(${1:number value}, ${2:number shiftCount})"
    },
    {
      "trigger": "bit.band",
      "contents": "bit.band(${1:number value}, ${2:number otherValues = nil})"
    },
    {
      "trigger": "bit.bnot",
      "contents": "bit.bnot(${1:number value})"
    },
    {
      "trigger": "bit.bor",
      "contents": "bit.bor(${1:number value1}, ${2:vararg ...})"
    },
    {
      "trigger": "bit.bswap",
      "contents": "bit.bswap(${1:number value})"
    },
    {
      "trigger": "bit.bxor",
      "contents": "bit.bxor(${1:number value}, ${2:number otherValues = nil})"
    },
    {
      "trigger": "bit.lshift",
      "contents": "bit.lshift(${1:number value}, ${2:number shiftCount})"
    },
    {
      "trigger": "bit.rol",
      "contents": "bit.rol(${1:number value}, ${2:number shiftCount})"
    },
    {
      "trigger": "bit.rshift",
      "contents": "bit.rshift(${1:number value}, ${2:number shiftCount})"
    },
    {
      "trigger": "bit.ror",
      "contents": "bit.ror(${1:number value}, ${2:number shiftCount})"
    },
    {
      "trigger": "bit.tobit",
      "contents": "bit.tobit(${1:number value})"
    },
    {
      "trigger": "bit.tohex",
      "contents": "bit.tohex(${1:number value}, ${2:number digits = 8})"
    },
    {
      "trigger": "cam.ApplyShake",
      "contents": "cam.ApplyShake(${1:Vector pos}, ${2:Angle angles}, ${3:number factor})"
    },
    {
      "trigger": "cam.EndOrthoView",
      "contents": "cam.EndOrthoView()"
    },
    {
      "trigger": "cam.End",
      "contents": "cam.End()"
    },
    {
      "trigger": "cam.IgnoreZ",
      "contents": "cam.IgnoreZ(${1:boolean ignoreZ})"
    },
    {
      "trigger": "cam.PopModelMatrix",
      "contents": "cam.PopModelMatrix()"
    },
    {
      "trigger": "cam.PushModelMatrix",
      "contents": "cam.PushModelMatrix(${1:VMatrix matrix})"
    },
    {
      "trigger": "cam.Start",
      "contents": "cam.Start()"
    },
    {
      "trigger": "cam.StartOrthoView",
      "contents": "cam.StartOrthoView(${1:number leftOffset}, ${2:number topOffset}, ${3:number rightOffset}, ${4:number bottomOffset})"
    },
    {
      "trigger": "chat.AddText",
      "contents": "chat.AddText()"
    },
    {
      "trigger": "chat.Close",
      "contents": "chat.Close()"
    },
    {
      "trigger": "chat.Open",
      "contents": "chat.Open(${1:number mode})"
    },
    {
      "trigger": "chat.GetChatBoxPos",
      "contents": "chat.GetChatBoxPos()"
    },
    {
      "trigger": "chat.GetChatBoxSize",
      "contents": "chat.GetChatBoxSize()"
    },
    {
      "trigger": "chat.PlaySound",
      "contents": "chat.PlaySound()"
    },
    {
      "trigger": "cleanup.Add",
      "contents": "cleanup.Add(${1:Player pl}, ${2:string type}, ${3:Entity ent})"
    },
    {
      "trigger": "cleanup.GetList",
      "contents": "cleanup.GetList()"
    },
    {
      "trigger": "cleanup.GetTable",
      "contents": "cleanup.GetTable()"
    },
    {
      "trigger": "cleanup.ReplaceEntity",
      "contents": "cleanup.ReplaceEntity(${1:Entity from}, ${2:Entity to})"
    },
    {
      "trigger": "cleanup.Register",
      "contents": "cleanup.Register(${1:string type})"
    },
    {
      "trigger": "cleanup.UpdateUI",
      "contents": "cleanup.UpdateUI()"
    },
    {
      "trigger": "concommand.AutoComplete",
      "contents": "concommand.AutoComplete(${1:string command}, ${2:string arguments})"
    },
    {
      "trigger": "concommand.Add",
      "contents": "concommand.Add(${1:string name}, ${2:string helpText = nil})"
    },
    {
      "trigger": "concommand.GetTable",
      "contents": "concommand.GetTable()"
    },
    {
      "trigger": "concommand.Remove",
      "contents": "concommand.Remove(${1:string name})"
    },
    {
      "trigger": "concommand.Run",
      "contents": "concommand.Run(${1:Player ply}, ${2:string cmd}, ${3:any args}, ${4:string argumentString})"
    },
    {
      "trigger": "constraint.AddConstraintTable",
      "contents": "constraint.AddConstraintTable(${1:Entity ent1}, ${2:Entity constrt}, ${3:Entity ent2 = nil}, ${4:Entity ent3 = nil}, ${5:Entity ent4 = nil})"
    },
    {
      "trigger": "constraint.AdvBallsocket",
      "contents": "constraint.AdvBallsocket(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number forcelimit}, ${8:number torquelimit}, ${9:number xmin}, ${10:number ymin}, ${11:number zmin}, ${12:number xmax}, ${13:number ymax}, ${14:number zmax}, ${15:number xfric}, ${16:number yfric}, ${17:number zfric}, ${18:number onlyrotation}, ${19:number nocollide})"
    },
    {
      "trigger": "constraint.AddConstraintTableNoDelete",
      "contents": "constraint.AddConstraintTableNoDelete(${1:Entity ent1}, ${2:Entity constrt}, ${3:Entity ent2 = nil}, ${4:Entity ent3 = nil}, ${5:Entity ent4 = nil})"
    },
    {
      "trigger": "constraint.Axis",
      "contents": "constraint.Axis(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number forcelimit}, ${8:number torquelimit}, ${9:number friction}, ${10:number nocollide}, ${11:Vector LocalAxis})"
    },
    {
      "trigger": "constraint.Ballsocket",
      "contents": "constraint.Ballsocket(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LocalPos}, ${6:number forcelimit}, ${7:number torquelimit}, ${8:number nocollide})"
    },
    {
      "trigger": "constraint.CanConstrain",
      "contents": "constraint.CanConstrain(${1:Entity ent}, ${2:number bone})"
    },
    {
      "trigger": "constraint.CreateKeyframeRope",
      "contents": "constraint.CreateKeyframeRope(${1:Vector pos}, ${2:number width}, ${3:string material}, ${4:Entity Constraint}, ${5:Entity Ent1}, ${6:Vector LPos1}, ${7:number Bone1}, ${8:Entity Ent2}, ${9:Vector LPos2}, ${10:number Bone2}, ${11:table kv})"
    },
    {
      "trigger": "constraint.CreateStaticAnchorPoint",
      "contents": "constraint.CreateStaticAnchorPoint(${1:Vector pos})"
    },
    {
      "trigger": "constraint.Elastic",
      "contents": "constraint.Elastic(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number constant}, ${8:number damping}, ${9:number rdamping}, ${10:string material}, ${11:number width}, ${12:boolean stretchonly})"
    },
    {
      "trigger": "constraint.Find",
      "contents": "constraint.Find(${1:Entity ent1}, ${2:Entity ent2}, ${3:string type}, ${4:number bone1}, ${5:number bone2})"
    },
    {
      "trigger": "constraint.FindConstraint",
      "contents": "constraint.FindConstraint(${1:Entity ent}, ${2:string type})"
    },
    {
      "trigger": "constraint.FindConstraintEntity",
      "contents": "constraint.FindConstraintEntity(${1:Entity ent}, ${2:string type})"
    },
    {
      "trigger": "constraint.FindConstraints",
      "contents": "constraint.FindConstraints(${1:Entity ent}, ${2:string type})"
    },
    {
      "trigger": "constraint.ForgetConstraints",
      "contents": "constraint.ForgetConstraints(${1:Entity ent})"
    },
    {
      "trigger": "constraint.GetAllConstrainedEntities",
      "contents": "constraint.GetAllConstrainedEntities(${1:Entity ent}, ${2:table ResultTable = nil})"
    },
    {
      "trigger": "constraint.GetTable",
      "contents": "constraint.GetTable(${1:Entity ent})"
    },
    {
      "trigger": "constraint.HasConstraints",
      "contents": "constraint.HasConstraints(${1:Entity ent})"
    },
    {
      "trigger": "constraint.Hydraulic",
      "contents": "constraint.Hydraulic(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number Length1}, ${8:number Length2}, ${9:number width}, ${10:number fixed}, ${11:number speed}, ${12:string material})"
    },
    {
      "trigger": "constraint.Keepupright",
      "contents": "constraint.Keepupright(${1:Entity ent}, ${2:Angle ang}, ${3:number bone}, ${4:number angularLimit})"
    },
    {
      "trigger": "constraint.Motor",
      "contents": "constraint.Motor(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number friction}, ${8:number torque}, ${9:number forcetime}, ${10:number nocollide}, ${11:number toggle}, ${12:number forcelimit}, ${13:number direction}, ${14:Vector LocalAxis})"
    },
    {
      "trigger": "constraint.NoCollide",
      "contents": "constraint.NoCollide(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2})"
    },
    {
      "trigger": "constraint.Muscle",
      "contents": "constraint.Muscle(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number Length1}, ${8:number Length2}, ${9:number width}, ${10:number fixed}, ${11:number period}, ${12:number amplitude}, ${13:boolean starton}, ${14:string material})"
    },
    {
      "trigger": "constraint.Pulley",
      "contents": "constraint.Pulley(${1:Entity Ent1}, ${2:Entity Ent4}, ${3:number Bone1}, ${4:number Bone4}, ${5:Vector LPos1}, ${6:Vector LPos4}, ${7:Vector WPos2}, ${8:Vector WPos3}, ${9:number forcelimit}, ${10:boolean rigid}, ${11:number width}, ${12:string material})"
    },
    {
      "trigger": "constraint.RemoveAll",
      "contents": "constraint.RemoveAll(${1:Entity ent})"
    },
    {
      "trigger": "constraint.RemoveConstraints",
      "contents": "constraint.RemoveConstraints(${1:Entity ent}, ${2:string type})"
    },
    {
      "trigger": "constraint.Rope",
      "contents": "constraint.Rope(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number length}, ${8:number addlength}, ${9:number forcelimit}, ${10:number width}, ${11:string material}, ${12:boolean rigid})"
    },
    {
      "trigger": "constraint.Slider",
      "contents": "constraint.Slider(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number width}, ${8:string material})"
    },
    {
      "trigger": "constraint.Weld",
      "contents": "constraint.Weld(${1:Entity ent1}, ${2:Entity ent2}, ${3:number bone2}, ${4:number forcelimit}, ${5:boolean nocollide}, ${6:boolean deleteent1onbreak})"
    },
    {
      "trigger": "construct.Magnet",
      "contents": "construct.Magnet(${1:Player ply}, ${2:Vector pos}, ${3:Angle ang}, ${4:string model}, ${5:string material}, ${6:number maxObjects}, ${7:number strength}, ${8:number nopull = 0}, ${9:number allowrot = 0}, ${10:number startOn = 0}, ${11:number toggle}, ${12:Vector vel = Vector( 0, 0, 0 )}, ${13:Angle aVel = Angle( 0, 0, 0 )}, ${14:boolean frozen = false})"
    },
    {
      "trigger": "constraint.Winch",
      "contents": "constraint.Winch(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number width}, ${8:number fwd_speed}, ${9:number bwd_speed}, ${10:string material}, ${11:boolean toggle})"
    },
    {
      "trigger": "construct.SetPhysProp",
      "contents": "construct.SetPhysProp(${1:Player ply}, ${2:Entity ent}, ${3:number physObjID}, ${4:PhysObj physObj})"
    },
    {
      "trigger": "controlpanel.Clear",
      "contents": "controlpanel.Clear()"
    },
    {
      "trigger": "controlpanel.Get",
      "contents": "controlpanel.Get(${1:string name})"
    },
    {
      "trigger": "cookie.GetNumber",
      "contents": "cookie.GetNumber(${1:string name}, ${2:any default = nil})"
    },
    {
      "trigger": "cookie.Delete",
      "contents": "cookie.Delete(${1:string name})"
    },
    {
      "trigger": "cookie.GetString",
      "contents": "cookie.GetString(${1:string name}, ${2:any default = nil})"
    },
    {
      "trigger": "cookie.Set",
      "contents": "cookie.Set(${1:string key}, ${2:string value})"
    },
    {
      "trigger": "coroutine.create",
      "contents": "coroutine.create(${1:function func})"
    },
    {
      "trigger": "coroutine.resume",
      "contents": "coroutine.resume(${1:thread coroutine})"
    },
    {
      "trigger": "coroutine.running",
      "contents": "coroutine.running()"
    },
    {
      "trigger": "coroutine.status",
      "contents": "coroutine.status(${1:thread coroutine})"
    },
    {
      "trigger": "coroutine.wait",
      "contents": "coroutine.wait(${1:number duration})"
    },
    {
      "trigger": "coroutine.wrap",
      "contents": "coroutine.wrap(${1:function coroutine})"
    },
    {
      "trigger": "coroutine.yield",
      "contents": "coroutine.yield()"
    },
    {
      "trigger": "cvars.AddChangeCallback",
      "contents": "cvars.AddChangeCallback(${1:string name})"
    },
    {
      "trigger": "cvars.Bool",
      "contents": "cvars.Bool(${1:string cvar}, ${2:boolean default = false})"
    },
    {
      "trigger": "cvars.Number",
      "contents": "cvars.Number(${1:string cvar}, ${2:any default = nil})"
    },
    {
      "trigger": "cvars.GetConVarCallbacks",
      "contents": "cvars.GetConVarCallbacks()"
    },
    {
      "trigger": "cvars.OnConVarChanged",
      "contents": "cvars.OnConVarChanged(${1:string name}, ${2:string oldVal}, ${3:string newVal})"
    },
    {
      "trigger": "cvars.String",
      "contents": "cvars.String(${1:string cvar}, ${2:any default = nil})"
    },
    {
      "trigger": "cvars.RemoveChangeCallback",
      "contents": "cvars.RemoveChangeCallback(${1:string name}, ${2:string indentifier})"
    },
    {
      "trigger": "debug.debug",
      "contents": "debug.debug()"
    },
    {
      "trigger": "debug.gethook",
      "contents": "debug.gethook(${1:thread thread = nil})"
    },
    {
      "trigger": "debug.getfenv",
      "contents": "debug.getfenv(${1:table object})"
    },
    {
      "trigger": "debug.getinfo",
      "contents": "debug.getinfo(${1:function funcOrStackLevel}, ${2:string fields = \"flnSu\"})"
    },
    {
      "trigger": "debug.getlocal",
      "contents": "debug.getlocal(${1:thread thread = Current thread}, ${2:number level}, ${3:number index})"
    },
    {
      "trigger": "debug.getmetatable",
      "contents": "debug.getmetatable(${1:any object})"
    },
    {
      "trigger": "debug.getregistry",
      "contents": "debug.getregistry()"
    },
    {
      "trigger": "debug.getupvalue",
      "contents": "debug.getupvalue(${1:function func})"
    },
    {
      "trigger": "debug.setfenv",
      "contents": "debug.setfenv(${1:table object}, ${2:table env})"
    },
    {
      "trigger": "debug.sethook",
      "contents": "debug.sethook(${1:thread thread}, ${2:function hook}, ${3:string mask}, ${4:number count})"
    },
    {
      "trigger": "debug.setlocal",
      "contents": "debug.setlocal(${1:thread thread = Current Thread}, ${2:number level}, ${3:number index}, ${4:any value = nil})"
    },
    {
      "trigger": "debug.setmetatable",
      "contents": "debug.setmetatable(${1:any object}, ${2:table metatable})"
    },
    {
      "trigger": "debug.Trace",
      "contents": "debug.Trace()"
    },
    {
      "trigger": "debug.setupvalue",
      "contents": "debug.setupvalue(${1:function func}, ${2:number index}, ${3:any val = nil})"
    },
    {
      "trigger": "debug.traceback",
      "contents": "debug.traceback(${1:thread thread = current thread}, ${2:string message = nil}, ${3:number level = 1})"
    },
    {
      "trigger": "debug.upvalueid",
      "contents": "debug.upvalueid(${1:function func}, ${2:number index})"
    },
    {
      "trigger": "debug.upvaluejoin",
      "contents": "debug.upvaluejoin(${1:function f1}, ${2:number n1}, ${3:function f2}, ${4:number n2})"
    },
    {
      "trigger": "debugoverlay.Axis",
      "contents": "debugoverlay.Axis(${1:Vector origin}, ${2:Angle ang}, ${3:number size}, ${4:number lifetime = 1}, ${5:boolean ignoreZ = false})"
    },
    {
      "trigger": "debugoverlay.Box",
      "contents": "debugoverlay.Box(${1:Vector origin}, ${2:Vector mins}, ${3:Vector maxs}, ${4:number lifetime = 1})"
    },
    {
      "trigger": "debugoverlay.BoxAngles",
      "contents": "debugoverlay.BoxAngles(${1:Vector pos}, ${2:Vector mins}, ${3:Vector maxs}, ${4:Angle ang}, ${5:number lifetime = 1})"
    },
    {
      "trigger": "debugoverlay.Cross",
      "contents": "debugoverlay.Cross(${1:Vector position}, ${2:number size}, ${3:number lifetime = 1}, ${4:boolean ignoreZ = false})"
    },
    {
      "trigger": "debugoverlay.EntityTextAtPosition",
      "contents": "debugoverlay.EntityTextAtPosition(${1:Vector pos}, ${2:number line}, ${3:string text}, ${4:number lifetime = 1})"
    },
    {
      "trigger": "debugoverlay.Grid",
      "contents": "debugoverlay.Grid(${1:Vector position})"
    },
    {
      "trigger": "debugoverlay.Line",
      "contents": "debugoverlay.Line(${1:Vector pos1}, ${2:Vector pos2}, ${3:number lifetime = 1}, ${4:boolean ignoreZ = false})"
    },
    {
      "trigger": "debugoverlay.ScreenText",
      "contents": "debugoverlay.ScreenText(${1:number x}, ${2:number y}, ${3:string text}, ${4:number lifetime = 1})"
    },
    {
      "trigger": "debugoverlay.Sphere",
      "contents": "debugoverlay.Sphere(${1:Vector origin}, ${2:number size}, ${3:number lifetime = 1}, ${4:boolean ignoreZ = false})"
    },
    {
      "trigger": "debugoverlay.SweptBox",
      "contents": "debugoverlay.SweptBox(${1:Vector vStart}, ${2:Vector vEnd}, ${3:Vector vMins}, ${4:Vector vMaxs}, ${5:Angle ang}, ${6:number lifetime = 1})"
    },
    {
      "trigger": "debugoverlay.Text",
      "contents": "debugoverlay.Text(${1:Vector origin}, ${2:string text}, ${3:number lifetime = 1}, ${4:boolean viewCheck = false})"
    },
    {
      "trigger": "debugoverlay.Triangle",
      "contents": "debugoverlay.Triangle(${1:Vector pos1}, ${2:Vector pos2}, ${3:Vector pos3}, ${4:number lifetime = 1}, ${5:boolean ignoreZ = false})"
    },
    {
      "trigger": "derma.DefineControl",
      "contents": "derma.DefineControl(${1:string name}, ${2:string description}, ${3:table tab}, ${4:string base})"
    },
    {
      "trigger": "derma.Color",
      "contents": "derma.Color(${1:string name}, ${2:Panel pnl}, ${3:table default})"
    },
    {
      "trigger": "derma.DefineSkin",
      "contents": "derma.DefineSkin(${1:string name}, ${2:string descriptions}, ${3:table skin})"
    },
    {
      "trigger": "derma.GetControlList",
      "contents": "derma.GetControlList()"
    },
    {
      "trigger": "derma.GetNamedSkin",
      "contents": "derma.GetNamedSkin(${1:string name})"
    },
    {
      "trigger": "derma.GetDefaultSkin",
      "contents": "derma.GetDefaultSkin()"
    },
    {
      "trigger": "derma.GetSkinTable",
      "contents": "derma.GetSkinTable()"
    },
    {
      "trigger": "derma.RefreshSkins",
      "contents": "derma.RefreshSkins()"
    },
    {
      "trigger": "derma.SkinChangeIndex",
      "contents": "derma.SkinChangeIndex()"
    },
    {
      "trigger": "derma.SkinHook",
      "contents": "derma.SkinHook(${1:string type}, ${2:string name}, ${3:Panel panel}, ${4:number w}, ${5:number h})"
    },
    {
      "trigger": "derma.SkinTexture",
      "contents": "derma.SkinTexture(${1:string name}, ${2:Panel pnl}, ${3:any fallback = nil})"
    },
    {
      "trigger": "dragndrop.CallReceiverFunction",
      "contents": "dragndrop.CallReceiverFunction(${1:boolean bDoDrop}, ${2:number command}, ${3:number mx}, ${4:number my})"
    },
    {
      "trigger": "dragndrop.Clear",
      "contents": "dragndrop.Clear()"
    },
    {
      "trigger": "dragndrop.Drop",
      "contents": "dragndrop.Drop()"
    },
    {
      "trigger": "dragndrop.GetDroppable",
      "contents": "dragndrop.GetDroppable()"
    },
    {
      "trigger": "dragndrop.HandleDroppedInGame",
      "contents": "dragndrop.HandleDroppedInGame()"
    },
    {
      "trigger": "dragndrop.HoverThink",
      "contents": "dragndrop.HoverThink()"
    },
    {
      "trigger": "dragndrop.IsDragging",
      "contents": "dragndrop.IsDragging()"
    },
    {
      "trigger": "dragndrop.StartDragging",
      "contents": "dragndrop.StartDragging()"
    },
    {
      "trigger": "dragndrop.StopDragging",
      "contents": "dragndrop.StopDragging()"
    },
    {
      "trigger": "dragndrop.Think",
      "contents": "dragndrop.Think()"
    },
    {
      "trigger": "dragndrop.UpdateReceiver",
      "contents": "dragndrop.UpdateReceiver()"
    },
    {
      "trigger": "draw.GetFontHeight",
      "contents": "draw.GetFontHeight(${1:string font})"
    },
    {
      "trigger": "draw.DrawText",
      "contents": "draw.DrawText(${1:string text}, ${2:number x = 0}, ${3:number y = 0})"
    },
    {
      "trigger": "draw.RoundedBoxEx",
      "contents": "draw.RoundedBoxEx(${1:number cornerRadius}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}, ${6:boolean roundTopLeft = false}, ${7:boolean roundTopRight = false}, ${8:boolean roundBottomLeft = false}, ${9:boolean roundBottomRight = false})"
    },
    {
      "trigger": "draw.NoTexture",
      "contents": "draw.NoTexture()"
    },
    {
      "trigger": "draw.RoundedBox",
      "contents": "draw.RoundedBox(${1:number cornerRadius}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height})"
    },
    {
      "trigger": "draw.SimpleText",
      "contents": "draw.SimpleText(${1:string text}, ${2:number x = 0}, ${3:number y = 0})"
    },
    {
      "trigger": "draw.SimpleTextOutlined",
      "contents": "draw.SimpleTextOutlined(${1:string Text}, ${2:number x = 0}, ${3:number y = 0}, ${4:number outlinewidth})"
    },
    {
      "trigger": "draw.Text",
      "contents": "draw.Text()"
    },
    {
      "trigger": "draw.TextShadow",
      "contents": "draw.TextShadow(${1:number distance}, ${2:number alpha = 200})"
    },
    {
      "trigger": "draw.TexturedQuad",
      "contents": "draw.TexturedQuad()"
    },
    {
      "trigger": "draw.WordBox",
      "contents": "draw.WordBox(${1:number bordersize}, ${2:number x}, ${3:number y}, ${4:string text})"
    },
    {
      "trigger": "drive.CalcView",
      "contents": "drive.CalcView(${1:Player ply})"
    },
    {
      "trigger": "drive.CreateMove",
      "contents": "drive.CreateMove(${1:CUserCmd cmd})"
    },
    {
      "trigger": "drive.DestroyMethod",
      "contents": "drive.DestroyMethod(${1:Player ply})"
    },
    {
      "trigger": "drive.End",
      "contents": "drive.End(${1:Player ply}, ${2:Entity ent})"
    },
    {
      "trigger": "drive.FinishMove",
      "contents": "drive.FinishMove(${1:Player ply}, ${2:CMoveData mv})"
    },
    {
      "trigger": "drive.GetMethod",
      "contents": "drive.GetMethod(${1:Player ply})"
    },
    {
      "trigger": "drive.Move",
      "contents": "drive.Move(${1:Player ply}, ${2:CMoveData mv})"
    },
    {
      "trigger": "drive.PlayerStartDriving",
      "contents": "drive.PlayerStartDriving(${1:Player ply}, ${2:Entity ent}, ${3:string mode})"
    },
    {
      "trigger": "drive.PlayerStopDriving",
      "contents": "drive.PlayerStopDriving(${1:Player ply})"
    },
    {
      "trigger": "drive.Register",
      "contents": "drive.Register(${1:string name}, ${2:table data}, ${3:string base})"
    },
    {
      "trigger": "drive.Start",
      "contents": "drive.Start(${1:Player ply}, ${2:Entity ent})"
    },
    {
      "trigger": "drive.StartMove",
      "contents": "drive.StartMove(${1:Player ply}, ${2:CMoveData mv}, ${3:CUserCmd cmd})"
    },
    {
      "trigger": "duplicator.Allow",
      "contents": "duplicator.Allow(${1:string classname})"
    },
    {
      "trigger": "duplicator.ApplyBoneModifiers",
      "contents": "duplicator.ApplyBoneModifiers(${1:Player ply}, ${2:Entity ent})"
    },
    {
      "trigger": "duplicator.ApplyEntityModifiers",
      "contents": "duplicator.ApplyEntityModifiers(${1:Player ply}, ${2:Entity ent})"
    },
    {
      "trigger": "duplicator.ClearEntityModifier",
      "contents": "duplicator.ClearEntityModifier(${1:Entity ent}, ${2:any key})"
    },
    {
      "trigger": "duplicator.Copy",
      "contents": "duplicator.Copy(${1:Entity ent})"
    },
    {
      "trigger": "duplicator.CopyEnts",
      "contents": "duplicator.CopyEnts(${1:table ents})"
    },
    {
      "trigger": "duplicator.CopyEntTable",
      "contents": "duplicator.CopyEntTable(${1:Entity ent})"
    },
    {
      "trigger": "duplicator.CreateConstraintFromTable",
      "contents": "duplicator.CreateConstraintFromTable(${1:table constraint}, ${2:table entityList})"
    },
    {
      "trigger": "duplicator.CreateEntityFromTable",
      "contents": "duplicator.CreateEntityFromTable(${1:Player ply})"
    },
    {
      "trigger": "duplicator.DoBoneManipulator",
      "contents": "duplicator.DoBoneManipulator(${1:Entity ent})"
    },
    {
      "trigger": "duplicator.DoFlex",
      "contents": "duplicator.DoFlex(${1:Entity ent}, ${2:table flex}, ${3:number scale = nil})"
    },
    {
      "trigger": "duplicator.DoGeneric",
      "contents": "duplicator.DoGeneric(${1:Entity ent}, ${2:table data})"
    },
    {
      "trigger": "duplicator.DoGenericPhysics",
      "contents": "duplicator.DoGenericPhysics(${1:Entity ent}, ${2:Player ply = nil}, ${3:table data})"
    },
    {
      "trigger": "duplicator.GenericDuplicatorFunction",
      "contents": "duplicator.GenericDuplicatorFunction(${1:Player ply}, ${2:table data})"
    },
    {
      "trigger": "duplicator.FindEntityClass",
      "contents": "duplicator.FindEntityClass(${1:string name})"
    },
    {
      "trigger": "duplicator.GetAllConstrainedEntitiesAndConstraints",
      "contents": "duplicator.GetAllConstrainedEntitiesAndConstraints(${1:Entity ent}, ${2:table entStorageTable}, ${3:table constraintStorageTable})"
    },
    {
      "trigger": "duplicator.IsAllowed",
      "contents": "duplicator.IsAllowed(${1:string classname})"
    },
    {
      "trigger": "duplicator.Paste",
      "contents": "duplicator.Paste(${1:Player Player}, ${2:table EntityList}, ${3:table ConstraintList})"
    },
    {
      "trigger": "duplicator.RegisterBoneModifier",
      "contents": "duplicator.RegisterBoneModifier(${1:any key})"
    },
    {
      "trigger": "duplicator.RegisterEntityModifier",
      "contents": "duplicator.RegisterEntityModifier(${1:string name})"
    },
    {
      "trigger": "duplicator.RegisterEntityClass",
      "contents": "duplicator.RegisterEntityClass(${1:string name}, ${2:function function})"
    },
    {
      "trigger": "duplicator.RegisterConstraint",
      "contents": "duplicator.RegisterConstraint(${1:string name}, ${2:function callback}, ${3:any ...})"
    },
    {
      "trigger": "duplicator.RemoveMapCreatedEntities",
      "contents": "duplicator.RemoveMapCreatedEntities()"
    },
    {
      "trigger": "duplicator.SetLocalAng",
      "contents": "duplicator.SetLocalAng(${1:Angle v})"
    },
    {
      "trigger": "duplicator.SetLocalPos",
      "contents": "duplicator.SetLocalPos(${1:Vector v})"
    },
    {
      "trigger": "duplicator.StoreEntityModifier",
      "contents": "duplicator.StoreEntityModifier(${1:Entity entity}, ${2:table data})"
    },
    {
      "trigger": "duplicator.WorkoutSize",
      "contents": "duplicator.WorkoutSize(${1:table Ents})"
    },
    {
      "trigger": "duplicator.StoreBoneModifier",
      "contents": "duplicator.StoreBoneModifier(${1:Entity ent}, ${2:any key}, ${3:table data})"
    },
    {
      "trigger": "effects.Create",
      "contents": "effects.Create(${1:string name})"
    },
    {
      "trigger": "engine.ActiveGamemode",
      "contents": "engine.ActiveGamemode()"
    },
    {
      "trigger": "effects.Register",
      "contents": "effects.Register(${1:table effect_table}, ${2:string name})"
    },
    {
      "trigger": "engine.CloseServer",
      "contents": "engine.CloseServer()"
    },
    {
      "trigger": "engine.GetAddons",
      "contents": "engine.GetAddons()"
    },
    {
      "trigger": "engine.GetDemoPlaybackStartTick",
      "contents": "engine.GetDemoPlaybackStartTick()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTick",
      "contents": "engine.GetDemoPlaybackTick()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTimeScale",
      "contents": "engine.GetDemoPlaybackTimeScale()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTotalTicks",
      "contents": "engine.GetDemoPlaybackTotalTicks()"
    },
    {
      "trigger": "engine.GetGamemodes",
      "contents": "engine.GetGamemodes()"
    },
    {
      "trigger": "engine.GetGames",
      "contents": "engine.GetGames()"
    },
    {
      "trigger": "engine.GetUserContent",
      "contents": "engine.GetUserContent()"
    },
    {
      "trigger": "engine.IsPlayingDemo",
      "contents": "engine.IsPlayingDemo()"
    },
    {
      "trigger": "engine.IsRecordingDemo",
      "contents": "engine.IsRecordingDemo()"
    },
    {
      "trigger": "engine.LightStyle",
      "contents": "engine.LightStyle(${1:number lightstyle}, ${2:string pattern})"
    },
    {
      "trigger": "engine.OpenDupe",
      "contents": "engine.OpenDupe(${1:string dupeName})"
    },
    {
      "trigger": "engine.ServerFrameTime",
      "contents": "engine.ServerFrameTime()"
    },
    {
      "trigger": "engine.SetMounted",
      "contents": "engine.SetMounted(${1:string depotID}, ${2:boolean doMount})"
    },
    {
      "trigger": "engine.TickCount",
      "contents": "engine.TickCount()"
    },
    {
      "trigger": "engine.VideoSettings",
      "contents": "engine.VideoSettings()"
    },
    {
      "trigger": "engine.TickInterval",
      "contents": "engine.TickInterval()"
    },
    {
      "trigger": "engine.WriteDupe",
      "contents": "engine.WriteDupe()"
    },
    {
      "trigger": "engine.WriteSave",
      "contents": "engine.WriteSave(${1:string saveData}, ${2:string name}, ${3:number time}, ${4:string map})"
    },
    {
      "trigger": "ents.Create",
      "contents": "ents.Create(${1:string class})"
    },
    {
      "trigger": "ents.CreateClientProp",
      "contents": "ents.CreateClientProp()"
    },
    {
      "trigger": "ents.CreateClientside",
      "contents": "ents.CreateClientside(${1:string class})"
    },
    {
      "trigger": "ents.FindAlongRay",
      "contents": "ents.FindAlongRay(${1:Vector start}, ${2:Vector end}, ${3:Vector mins = nil}, ${4:Vector maxs = nil})"
    },
    {
      "trigger": "ents.FindByClass",
      "contents": "ents.FindByClass(${1:string class})"
    },
    {
      "trigger": "ents.FindByClassAndParent",
      "contents": "ents.FindByClassAndParent(${1:string class}, ${2:Entity parent})"
    },
    {
      "trigger": "ents.FindByModel",
      "contents": "ents.FindByModel(${1:string model})"
    },
    {
      "trigger": "ents.FindByName",
      "contents": "ents.FindByName(${1:string name})"
    },
    {
      "trigger": "ents.FindInBox",
      "contents": "ents.FindInBox(${1:Vector boxMins}, ${2:Vector boxMaxs})"
    },
    {
      "trigger": "ents.FindInCone",
      "contents": "ents.FindInCone(${1:Vector origin}, ${2:Vector normal}, ${3:number range}, ${4:number angle_cos})"
    },
    {
      "trigger": "ents.FindInPVS",
      "contents": "ents.FindInPVS()"
    },
    {
      "trigger": "ents.FindInSphere",
      "contents": "ents.FindInSphere(${1:Vector origin}, ${2:number radius})"
    },
    {
      "trigger": "ents.FireTargets",
      "contents": "ents.FireTargets(${1:string target}, ${2:Entity activator}, ${3:Entity caller})"
    },
    {
      "trigger": "ents.GetAll",
      "contents": "ents.GetAll()"
    },
    {
      "trigger": "ents.GetByIndex",
      "contents": "ents.GetByIndex(${1:number entIdx})"
    },
    {
      "trigger": "ents.GetCount",
      "contents": "ents.GetCount(${1:boolean IncludeKillMe = false})"
    },
    {
      "trigger": "ents.GetEdictCount",
      "contents": "ents.GetEdictCount()"
    },
    {
      "trigger": "ents.GetMapCreatedEntity",
      "contents": "ents.GetMapCreatedEntity(${1:number id})"
    },
    {
      "trigger": "file.Append",
      "contents": "file.Append(${1:string name}, ${2:string content})"
    },
    {
      "trigger": "file.CreateDir",
      "contents": "file.CreateDir(${1:string name})"
    },
    {
      "trigger": "file.Delete",
      "contents": "file.Delete(${1:string name})"
    },
    {
      "trigger": "file.Exists",
      "contents": "file.Exists(${1:string name}, ${2:string path})"
    },
    {
      "trigger": "file.Find",
      "contents": "file.Find(${1:string name}, ${2:string path}, ${3:string sorting = \"nameasc\"})"
    },
    {
      "trigger": "file.Open",
      "contents": "file.Open(${1:string fileMode}, ${2:string path})"
    },
    {
      "trigger": "file.IsDir",
      "contents": "file.IsDir(${1:string fileName}, ${2:string path})"
    },
    {
      "trigger": "file.Read",
      "contents": "file.Read(${1:string fileName}, ${2:string path = \"DATA\"})"
    },
    {
      "trigger": "file.Rename",
      "contents": "file.Rename()"
    },
    {
      "trigger": "file.Size",
      "contents": "file.Size(${1:string fileName}, ${2:string path})"
    },
    {
      "trigger": "file.Time",
      "contents": "file.Time(${1:string path}, ${2:string gamePath})"
    },
    {
      "trigger": "file.Write",
      "contents": "file.Write(${1:string fileName}, ${2:string content})"
    },
    {
      "trigger": "game.AddAmmoType",
      "contents": "game.AddAmmoType()"
    },
    {
      "trigger": "game.AddDecal",
      "contents": "game.AddDecal(${1:string decalName}, ${2:string materialName})"
    },
    {
      "trigger": "game.AddParticles",
      "contents": "game.AddParticles(${1:string particleFileName})"
    },
    {
      "trigger": "game.BuildAmmoTypes",
      "contents": "game.BuildAmmoTypes()"
    },
    {
      "trigger": "game.CleanUpMap",
      "contents": "game.CleanUpMap(${1:boolean dontSendToClients = false})"
    },
    {
      "trigger": "game.ConsoleCommand",
      "contents": "game.ConsoleCommand(${1:string stringCommand})"
    },
    {
      "trigger": "game.GetAmmoForce",
      "contents": "game.GetAmmoForce(${1:number id})"
    },
    {
      "trigger": "game.GetAmmoDamageType",
      "contents": "game.GetAmmoDamageType(${1:number id})"
    },
    {
      "trigger": "game.GetAmmoID",
      "contents": "game.GetAmmoID(${1:string name})"
    },
    {
      "trigger": "game.GetAmmoMax",
      "contents": "game.GetAmmoMax(${1:number id})"
    },
    {
      "trigger": "game.GetAmmoName",
      "contents": "game.GetAmmoName(${1:number id})"
    },
    {
      "trigger": "game.GetAmmoNPCDamage",
      "contents": "game.GetAmmoNPCDamage(${1:number id})"
    },
    {
      "trigger": "game.GetAmmoPlayerDamage",
      "contents": "game.GetAmmoPlayerDamage(${1:number id})"
    },
    {
      "trigger": "game.GetGlobalCounter",
      "contents": "game.GetGlobalCounter(${1:string name})"
    },
    {
      "trigger": "game.GetGlobalState",
      "contents": "game.GetGlobalState(${1:string name})"
    },
    {
      "trigger": "game.GetIPAddress",
      "contents": "game.GetIPAddress()"
    },
    {
      "trigger": "game.GetMap",
      "contents": "game.GetMap()"
    },
    {
      "trigger": "game.GetMapNext",
      "contents": "game.GetMapNext()"
    },
    {
      "trigger": "game.GetMapVersion",
      "contents": "game.GetMapVersion()"
    },
    {
      "trigger": "game.GetSkillLevel",
      "contents": "game.GetSkillLevel()"
    },
    {
      "trigger": "game.GetTimeScale",
      "contents": "game.GetTimeScale()"
    },
    {
      "trigger": "game.GetWorld",
      "contents": "game.GetWorld()"
    },
    {
      "trigger": "game.IsDedicated",
      "contents": "game.IsDedicated()"
    },
    {
      "trigger": "game.KickID",
      "contents": "game.KickID(${1:string id}, ${2:string reason = \"No reason given\"})"
    },
    {
      "trigger": "game.LoadNextMap",
      "contents": "game.LoadNextMap()"
    },
    {
      "trigger": "game.MaxPlayers",
      "contents": "game.MaxPlayers()"
    },
    {
      "trigger": "game.MapLoadType",
      "contents": "game.MapLoadType()"
    },
    {
      "trigger": "game.MountGMA",
      "contents": "game.MountGMA(${1:string path})"
    },
    {
      "trigger": "game.SetGlobalCounter",
      "contents": "game.SetGlobalCounter(${1:string name}, ${2:number count})"
    },
    {
      "trigger": "game.RemoveRagdolls",
      "contents": "game.RemoveRagdolls()"
    },
    {
      "trigger": "game.SetGlobalState",
      "contents": "game.SetGlobalState(${1:string name})"
    },
    {
      "trigger": "game.SetSkillLevel",
      "contents": "game.SetSkillLevel(${1:number level})"
    },
    {
      "trigger": "game.SetTimeScale",
      "contents": "game.SetTimeScale(${1:number timeScale})"
    },
    {
      "trigger": "game.SinglePlayer",
      "contents": "game.SinglePlayer()"
    },
    {
      "trigger": "game.StartSpot",
      "contents": "game.StartSpot()"
    },
    {
      "trigger": "gameevent.Listen",
      "contents": "gameevent.Listen(${1:string eventName})"
    },
    {
      "trigger": "gamemode.Call",
      "contents": "gamemode.Call(${1:string name}, ${2:vararg args})"
    },
    {
      "trigger": "gamemode.Get",
      "contents": "gamemode.Get(${1:string name})"
    },
    {
      "trigger": "gamemode.Register",
      "contents": "gamemode.Register(${1:table gm}, ${2:string name}, ${3:string derived})"
    },
    {
      "trigger": "AccessorFunc",
      "contents": "AccessorFunc(${1:table tab}, ${2:any key}, ${3:string name})"
    },
    {
      "trigger": "AddBackgroundImage",
      "contents": "AddBackgroundImage(${1:string path})"
    },
    {
      "trigger": "AddConsoleCommand",
      "contents": "AddConsoleCommand(${1:string name}, ${2:string helpText})"
    },
    {
      "trigger": "AddCSLuaFile",
      "contents": "AddCSLuaFile()"
    },
    {
      "trigger": "AddonMaterial",
      "contents": "AddonMaterial(${1:string name})"
    },
    {
      "trigger": "AddOriginToPVS",
      "contents": "AddOriginToPVS(${1:Vector position})"
    },
    {
      "trigger": "AddWorldTip",
      "contents": "AddWorldTip(${1:number entindex = nil}, ${2:string text}, ${3:number dieTime = SysTime() + 0.05}, ${4:Vector pos = ent:GetPos()}, ${5:Entity ent = nil})"
    },
    {
      "trigger": "Angle",
      "contents": "Angle(${1:number yaw = 0}, ${2:number roll = 0})"
    },
    {
      "trigger": "AngleRand",
      "contents": "AngleRand(${1:number min = -90 for pitch, -180 for yaw and roll}, ${2:number max = 90 for pitch, 180 for yaw and roll})"
    },
    {
      "trigger": "assert",
      "contents": "assert(${1:any expression}, ${2:string errorMessage = \"assertion failed!\"}, ${3:vararg returns = nil})"
    },
    {
      "trigger": "BroadcastLua",
      "contents": "BroadcastLua(${1:string code})"
    },
    {
      "trigger": "BuildNetworkedVarsTable",
      "contents": "BuildNetworkedVarsTable()"
    },
    {
      "trigger": "CanAddServerToFavorites",
      "contents": "CanAddServerToFavorites()"
    },
    {
      "trigger": "CancelLoading",
      "contents": "CancelLoading()"
    },
    {
      "trigger": "ChangeBackground",
      "contents": "ChangeBackground(${1:string currentgm})"
    },
    {
      "trigger": "ClearBackgroundImages",
      "contents": "ClearBackgroundImages()"
    },
    {
      "trigger": "ChangeTooltip",
      "contents": "ChangeTooltip(${1:Panel panel})"
    },
    {
      "trigger": "ClientsideModel",
      "contents": "ClientsideModel()"
    },
    {
      "trigger": "ClientsideScene",
      "contents": "ClientsideScene(${1:string name}, ${2:Entity targetEnt})"
    },
    {
      "trigger": "CloseDermaMenus",
      "contents": "CloseDermaMenus()"
    },
    {
      "trigger": "ClientsideRagdoll",
      "contents": "ClientsideRagdoll()"
    },
    {
      "trigger": "collectgarbage",
      "contents": "collectgarbage(${1:string action = \"collect\"}, ${2:number arg})"
    },
    {
      "trigger": "Color",
      "contents": "Color(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a = 255})"
    },
    {
      "trigger": "ColorAlpha",
      "contents": "ColorAlpha(${1:number alpha})"
    },
    {
      "trigger": "ColorRand",
      "contents": "ColorRand(${1:boolean a = false})"
    },
    {
      "trigger": "ColorToHSV",
      "contents": "ColorToHSV()"
    },
    {
      "trigger": "CompileFile",
      "contents": "CompileFile(${1:string path})"
    },
    {
      "trigger": "CompileString",
      "contents": "CompileString(${1:string code}, ${2:string identifier}, ${3:boolean HandleError = true})"
    },
    {
      "trigger": "ConsoleAutoComplete",
      "contents": "ConsoleAutoComplete(${1:string text})"
    },
    {
      "trigger": "ConVarExists",
      "contents": "ConVarExists()"
    },
    {
      "trigger": "CreateConVar",
      "contents": "CreateConVar(${1:string name}, ${2:string value}, ${3:string helptext = \"\"})"
    },
    {
      "trigger": "CreateClientConVar",
      "contents": "CreateClientConVar(${1:string name}, ${2:string default}, ${3:boolean shouldsave = true}, ${4:string helptext = \"\"})"
    },
    {
      "trigger": "CreateMaterial",
      "contents": "CreateMaterial(${1:string name}, ${2:string shaderName})"
    },
    {
      "trigger": "CreateParticleSystem",
      "contents": "CreateParticleSystem(${1:Entity ent}, ${2:string effect}, ${3:number entAttachment = 0})"
    },
    {
      "trigger": "CreatePhysCollideBox",
      "contents": "CreatePhysCollideBox(${1:Vector maxs})"
    },
    {
      "trigger": "CreateSprite",
      "contents": "CreateSprite(${1:IMaterial material})"
    },
    {
      "trigger": "CreateSound",
      "contents": "CreateSound(${1:Entity targetEnt}, ${2:string soundName})"
    },
    {
      "trigger": "CreatePhysCollidesFromModel",
      "contents": "CreatePhysCollidesFromModel(${1:string modelName})"
    },
    {
      "trigger": "CurTime",
      "contents": "CurTime()"
    },
    {
      "trigger": "DamageInfo",
      "contents": "DamageInfo()"
    },
    {
      "trigger": "DebugInfo",
      "contents": "DebugInfo(${1:number slot}, ${2:string info})"
    },
    {
      "trigger": "DeriveGamemode",
      "contents": "DeriveGamemode(${1:string base})"
    },
    {
      "trigger": "DermaMenu",
      "contents": "DermaMenu(${1:Panel parent})"
    },
    {
      "trigger": "DisableClipping",
      "contents": "DisableClipping(${1:boolean disable})"
    },
    {
      "trigger": "DOFModeHack",
      "contents": "DOFModeHack(${1:boolean enable})"
    },
    {
      "trigger": "DrawBackground",
      "contents": "DrawBackground()"
    },
    {
      "trigger": "DrawBloom",
      "contents": "DrawBloom(${1:number Darken}, ${2:number Multiply}, ${3:number SizeX}, ${4:number SizeY}, ${5:number Passes}, ${6:number ColorMultiply}, ${7:number Red}, ${8:number Green}, ${9:number Blue})"
    },
    {
      "trigger": "DrawColorModify",
      "contents": "DrawColorModify()"
    },
    {
      "trigger": "DrawMotionBlur",
      "contents": "DrawMotionBlur(${1:number AddAlpha}, ${2:number DrawAlpha}, ${3:number Delay})"
    },
    {
      "trigger": "DrawMaterialOverlay",
      "contents": "DrawMaterialOverlay(${1:string Material}, ${2:number RefractAmount})"
    },
    {
      "trigger": "DrawSunbeams",
      "contents": "DrawSunbeams(${1:number darken}, ${2:number multiplier}, ${3:number sunSize}, ${4:number sunX}, ${5:number sunY})"
    },
    {
      "trigger": "DrawSobel",
      "contents": "DrawSobel(${1:number Threshold})"
    },
    {
      "trigger": "DrawSharpen",
      "contents": "DrawSharpen(${1:number Contrast}, ${2:number Distance})"
    },
    {
      "trigger": "DrawTexturize",
      "contents": "DrawTexturize(${1:number Scale})"
    },
    {
      "trigger": "DropEntityIfHeld",
      "contents": "DropEntityIfHeld(${1:Entity ent})"
    },
    {
      "trigger": "DrawToyTown",
      "contents": "DrawToyTown(${1:number Passes}, ${2:number Height})"
    },
    {
      "trigger": "DynamicLight",
      "contents": "DynamicLight(${1:number index}, ${2:boolean elight = false})"
    },
    {
      "trigger": "EffectData",
      "contents": "EffectData()"
    },
    {
      "trigger": "Either",
      "contents": "Either(${1:any condition}, ${2:any truevar}, ${3:any falsevar})"
    },
    {
      "trigger": "EmitSentence",
      "contents": "EmitSentence(${1:string soundName}, ${2:Vector position}, ${3:number volume = 1}, ${4:number pitch = 100})"
    },
    {
      "trigger": "EndTooltip",
      "contents": "EndTooltip(${1:Panel panel})"
    },
    {
      "trigger": "EmitSound",
      "contents": "EmitSound(${1:string soundName}, ${2:Vector position}, ${3:number volume = 1}, ${4:number pitch = 100})"
    },
    {
      "trigger": "error",
      "contents": "error(${1:string message}, ${2:number errorLevel = 1})"
    },
    {
      "trigger": "Error",
      "contents": "Error(${1:vararg arguments})"
    },
    {
      "trigger": "EyeAngles",
      "contents": "EyeAngles()"
    },
    {
      "trigger": "ErrorNoHalt",
      "contents": "ErrorNoHalt(${1:vararg arguments})"
    },
    {
      "trigger": "EyeVector",
      "contents": "EyeVector()"
    },
    {
      "trigger": "EyePos",
      "contents": "EyePos()"
    },
    {
      "trigger": "FindMetaTable",
      "contents": "FindMetaTable(${1:string metaName})"
    },
    {
      "trigger": "FindTooltip",
      "contents": "FindTooltip(${1:Panel panel})"
    },
    {
      "trigger": "Format",
      "contents": "Format(${1:string format}, ${2:vararg formatParameters})"
    },
    {
      "trigger": "FrameNumber",
      "contents": "FrameNumber()"
    },
    {
      "trigger": "GameDetails",
      "contents": "GameDetails(${1:string servername}, ${2:string serverurl}, ${3:string mapname}, ${4:number maxplayers}, ${5:string gamemode})"
    },
    {
      "trigger": "FrameTime",
      "contents": "FrameTime()"
    },
    {
      "trigger": "GetConVar",
      "contents": "GetConVar(${1:string name})"
    },
    {
      "trigger": "gcinfo",
      "contents": "gcinfo()"
    },
    {
      "trigger": "GetConVarString",
      "contents": "GetConVarString(${1:string name})"
    },
    {
      "trigger": "GetConVarNumber",
      "contents": "GetConVarNumber(${1:string name})"
    },
    {
      "trigger": "GetDefaultLoadingHTML",
      "contents": "GetDefaultLoadingHTML()"
    },
    {
      "trigger": "GetDemoFileDetails",
      "contents": "GetDemoFileDetails(${1:string filename})"
    },
    {
      "trigger": "Entity",
      "contents": "Entity(${1:number entityIndex})"
    },
    {
      "trigger": "getfenv",
      "contents": "getfenv(${1:function location = 1})"
    },
    {
      "trigger": "GetDownloadables",
      "contents": "GetDownloadables()"
    },
    {
      "trigger": "GetGlobalAngle",
      "contents": "GetGlobalAngle(${1:string index}, ${2:Angle default = Angle( 0, 0, 0 )})"
    },
    {
      "trigger": "GetGlobalBool",
      "contents": "GetGlobalBool(${1:string index}, ${2:boolean default = false})"
    },
    {
      "trigger": "GetGlobalEntity",
      "contents": "GetGlobalEntity(${1:string index}, ${2:Entity default = NULL})"
    },
    {
      "trigger": "GetGlobalFloat",
      "contents": "GetGlobalFloat(${1:string index}, ${2:number default = 0})"
    },
    {
      "trigger": "GetGlobalInt",
      "contents": "GetGlobalInt(${1:string index}, ${2:number default = 0})"
    },
    {
      "trigger": "GetGlobalString",
      "contents": "GetGlobalString(${1:string index}, ${2:string default = \"\"})"
    },
    {
      "trigger": "GetGlobalVector",
      "contents": "GetGlobalVector(${1:string Index}, ${2:Vector Default})"
    },
    {
      "trigger": "GetHostName",
      "contents": "GetHostName()"
    },
    {
      "trigger": "GetHUDPanel",
      "contents": "GetHUDPanel()"
    },
    {
      "trigger": "GetLoadPanel",
      "contents": "GetLoadPanel()"
    },
    {
      "trigger": "GetLoadStatus",
      "contents": "GetLoadStatus()"
    },
    {
      "trigger": "getmetatable",
      "contents": "getmetatable(${1:any object})"
    },
    {
      "trigger": "GetMapList",
      "contents": "GetMapList()"
    },
    {
      "trigger": "GetOverlayPanel",
      "contents": "GetOverlayPanel()"
    },
    {
      "trigger": "GetRenderTarget",
      "contents": "GetRenderTarget(${1:string name}, ${2:number width}, ${3:number height}, ${4:boolean additive = false})"
    },
    {
      "trigger": "GetRenderTargetEx",
      "contents": "GetRenderTargetEx(${1:number width}, ${2:number height})"
    },
    {
      "trigger": "GetSaveFileDetails",
      "contents": "GetSaveFileDetails(${1:string filename})"
    },
    {
      "trigger": "GetViewEntity",
      "contents": "GetViewEntity()"
    },
    {
      "trigger": "HSVToColor",
      "contents": "HSVToColor(${1:number hue}, ${2:number saturation}, ${3:number value})"
    },
    {
      "trigger": "HTTP",
      "contents": "HTTP()"
    },
    {
      "trigger": "include",
      "contents": "include()"
    },
    {
      "trigger": "ipairs",
      "contents": "ipairs(${1:table tab})"
    },
    {
      "trigger": "IncludeCS",
      "contents": "IncludeCS(${1:string filename})"
    },
    {
      "trigger": "isangle",
      "contents": "isangle(${1:any variable})"
    },
    {
      "trigger": "isbool",
      "contents": "isbool(${1:any variable})"
    },
    {
      "trigger": "IsColor",
      "contents": "IsColor(${1:any Object})"
    },
    {
      "trigger": "IsEntity",
      "contents": "IsEntity(${1:any variable})"
    },
    {
      "trigger": "IsEnemyEntityName",
      "contents": "IsEnemyEntityName(${1:string className})"
    },
    {
      "trigger": "isentity",
      "contents": "isentity(${1:any variable})"
    },
    {
      "trigger": "IsFriendEntityName",
      "contents": "IsFriendEntityName(${1:string className})"
    },
    {
      "trigger": "IsFirstTimePredicted",
      "contents": "IsFirstTimePredicted()"
    },
    {
      "trigger": "isfunction",
      "contents": "isfunction(${1:any variable})"
    },
    {
      "trigger": "ismatrix",
      "contents": "ismatrix(${1:any variable})"
    },
    {
      "trigger": "IsInGame",
      "contents": "IsInGame()"
    },
    {
      "trigger": "IsMounted",
      "contents": "IsMounted(${1:string game})"
    },
    {
      "trigger": "ispanel",
      "contents": "ispanel(${1:any variable})"
    },
    {
      "trigger": "isnumber",
      "contents": "isnumber(${1:any variable})"
    },
    {
      "trigger": "IsTableOfEntitiesValid",
      "contents": "IsTableOfEntitiesValid(${1:table table})"
    },
    {
      "trigger": "isstring",
      "contents": "isstring(${1:any variable})"
    },
    {
      "trigger": "istable",
      "contents": "istable(${1:any variable})"
    },
    {
      "trigger": "IsUselessModel",
      "contents": "IsUselessModel(${1:string modelName})"
    },
    {
      "trigger": "isvector",
      "contents": "isvector(${1:any variable})"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid(${1:any toBeValidated})"
    },
    {
      "trigger": "JoinServer",
      "contents": "JoinServer(${1:string IP})"
    },
    {
      "trigger": "LanguageChanged",
      "contents": "LanguageChanged(${1:string lang})"
    },
    {
      "trigger": "Label",
      "contents": "Label(${1:string text}, ${2:Panel parent = nil})"
    },
    {
      "trigger": "Lerp",
      "contents": "Lerp(${1:number t}, ${2:number from}, ${3:number to})"
    },
    {
      "trigger": "LerpAngle",
      "contents": "LerpAngle(${1:number ratio}, ${2:Angle angleStart}, ${3:Angle angleEnd})"
    },
    {
      "trigger": "LerpVector",
      "contents": "LerpVector(${1:number fraction}, ${2:Vector from}, ${3:Vector to})"
    },
    {
      "trigger": "LoadLastMap",
      "contents": "LoadLastMap()"
    },
    {
      "trigger": "LoadPresets",
      "contents": "LoadPresets()"
    },
    {
      "trigger": "Localize",
      "contents": "Localize(${1:string localisationToken}, ${2:string default})"
    },
    {
      "trigger": "LocalPlayer",
      "contents": "LocalPlayer()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector localPos}, ${2:Vector originPos}, ${3:Angle originAngle})"
    },
    {
      "trigger": "Material",
      "contents": "Material()"
    },
    {
      "trigger": "Matrix",
      "contents": "Matrix()"
    },
    {
      "trigger": "Model",
      "contents": "Model(${1:string model})"
    },
    {
      "trigger": "Mesh",
      "contents": "Mesh(${1:IMaterial mat = nil})"
    },
    {
      "trigger": "module",
      "contents": "module(${1:string name}, ${2:vararg loaders})"
    },
    {
      "trigger": "Msg",
      "contents": "Msg(${1:vararg args})"
    },
    {
      "trigger": "MsgAll",
      "contents": "MsgAll(${1:vararg args})"
    },
    {
      "trigger": "MsgN",
      "contents": "MsgN()"
    },
    {
      "trigger": "MsgC",
      "contents": "MsgC(${1:vararg args})"
    },
    {
      "trigger": "NamedColor",
      "contents": "NamedColor(${1:string name})"
    },
    {
      "trigger": "next",
      "contents": "next(${1:table tab}, ${2:any prevKey = nil})"
    },
    {
      "trigger": "newproxy",
      "contents": "newproxy(${1:boolean addMetatable  = false})"
    },
    {
      "trigger": "NumDownloadables",
      "contents": "NumDownloadables()"
    },
    {
      "trigger": "OnModelLoaded",
      "contents": "OnModelLoaded(${1:string modelName}, ${2:number numPostParams}, ${3:number numSeq}, ${4:number numAttachments}, ${5:number numBoneControllers}, ${6:number numSkins}, ${7:number size})"
    },
    {
      "trigger": "OpenFolder",
      "contents": "OpenFolder(${1:string folder})"
    },
    {
      "trigger": "NumModelSkins",
      "contents": "NumModelSkins(${1:string modelName})"
    },
    {
      "trigger": "OrderVectors",
      "contents": "OrderVectors(${1:Vector vector1}, ${2:Vector vector2})"
    },
    {
      "trigger": "pairs",
      "contents": "pairs(${1:table tab})"
    },
    {
      "trigger": "Particle",
      "contents": "Particle(${1:string file})"
    },
    {
      "trigger": "ParticleEffect",
      "contents": "ParticleEffect(${1:string particleName}, ${2:Vector position}, ${3:Angle angles}, ${4:Entity parent = NULL})"
    },
    {
      "trigger": "ParticleEmitter",
      "contents": "ParticleEmitter(${1:Vector position}, ${2:boolean use3D})"
    },
    {
      "trigger": "ParticleEffectAttach",
      "contents": "ParticleEffectAttach(${1:string particleName}, ${2:Entity entity}, ${3:number attachmentID})"
    },
    {
      "trigger": "Path",
      "contents": "Path(${1:string type})"
    },
    {
      "trigger": "pcall",
      "contents": "pcall(${1:function func}, ${2:vararg arguments})"
    },
    {
      "trigger": "Player",
      "contents": "Player(${1:number playerIndex})"
    },
    {
      "trigger": "PositionSpawnIcon",
      "contents": "PositionSpawnIcon(${1:Entity model}, ${2:Vector position}, ${3:boolean noAngles})"
    },
    {
      "trigger": "PrecacheParticleSystem",
      "contents": "PrecacheParticleSystem(${1:string particleSystemName})"
    },
    {
      "trigger": "PrecacheScene",
      "contents": "PrecacheScene(${1:string scene})"
    },
    {
      "trigger": "PrecacheSentenceFile",
      "contents": "PrecacheSentenceFile(${1:string filename})"
    },
    {
      "trigger": "PrecacheSentenceGroup",
      "contents": "PrecacheSentenceGroup(${1:string group})"
    },
    {
      "trigger": "print",
      "contents": "print(${1:vararg args})"
    },
    {
      "trigger": "PrintMessage",
      "contents": "PrintMessage(${1:string message})"
    },
    {
      "trigger": "PrintTable",
      "contents": "PrintTable(${1:table tableToPrint}, ${2:number indent = 0})"
    },
    {
      "trigger": "ProjectedTexture",
      "contents": "ProjectedTexture()"
    },
    {
      "trigger": "ProtectedCall",
      "contents": "ProtectedCall(${1:function func})"
    },
    {
      "trigger": "RandomPairs",
      "contents": "RandomPairs(${1:table table}, ${2:boolean descending})"
    },
    {
      "trigger": "rawequal",
      "contents": "rawequal(${1:any value1}, ${2:any value2})"
    },
    {
      "trigger": "rawget",
      "contents": "rawget(${1:table table}, ${2:any index})"
    },
    {
      "trigger": "rawset",
      "contents": "rawset(${1:table table}, ${2:any index}, ${3:any value})"
    },
    {
      "trigger": "RealFrameTime",
      "contents": "RealFrameTime()"
    },
    {
      "trigger": "RealTime",
      "contents": "RealTime()"
    },
    {
      "trigger": "RecipientFilter",
      "contents": "RecipientFilter()"
    },
    {
      "trigger": "RecordDemoFrame",
      "contents": "RecordDemoFrame()"
    },
    {
      "trigger": "RegisterDermaMenuForClose",
      "contents": "RegisterDermaMenuForClose(${1:Panel menu})"
    },
    {
      "trigger": "RememberCursorPosition",
      "contents": "RememberCursorPosition()"
    },
    {
      "trigger": "RemoveTooltip",
      "contents": "RemoveTooltip()"
    },
    {
      "trigger": "RenderAngles",
      "contents": "RenderAngles()"
    },
    {
      "trigger": "RenderDoF",
      "contents": "RenderDoF(${1:Vector origin}, ${2:Angle angle}, ${3:Vector usableFocusPoint}, ${4:number angleSize}, ${5:number radialSteps}, ${6:number passes}, ${7:boolean spin}, ${8:table inView}, ${9:number fov})"
    },
    {
      "trigger": "RenderStereoscopy",
      "contents": "RenderStereoscopy(${1:Vector viewOrigin}, ${2:Angle viewAngles})"
    },
    {
      "trigger": "RenderSuperDoF",
      "contents": "RenderSuperDoF(${1:Vector viewOrigin}, ${2:Angle viewAngles}, ${3:number viewFOV})"
    },
    {
      "trigger": "require",
      "contents": "require(${1:string name})"
    },
    {
      "trigger": "RunConsoleCommand",
      "contents": "RunConsoleCommand(${1:string command})"
    },
    {
      "trigger": "RestoreCursorPosition",
      "contents": "RestoreCursorPosition()"
    },
    {
      "trigger": "RunGameUICommand",
      "contents": "RunGameUICommand()"
    },
    {
      "trigger": "RunString",
      "contents": "RunString(${1:string code}, ${2:string identifier = \"RunString\"}, ${3:boolean handleError = true})"
    },
    {
      "trigger": "RunStringEx",
      "contents": "RunStringEx()"
    },
    {
      "trigger": "SafeRemoveEntity",
      "contents": "SafeRemoveEntity(${1:Entity ent})"
    },
    {
      "trigger": "SafeRemoveEntityDelayed",
      "contents": "SafeRemoveEntityDelayed(${1:Entity entity}, ${2:number delay})"
    },
    {
      "trigger": "SaveLastMap",
      "contents": "SaveLastMap(${1:string map}, ${2:string category})"
    },
    {
      "trigger": "SavePresets",
      "contents": "SavePresets(${1:table presets})"
    },
    {
      "trigger": "ScreenScale",
      "contents": "ScreenScale(${1:number Size})"
    },
    {
      "trigger": "ScrH",
      "contents": "ScrH()"
    },
    {
      "trigger": "ScrW",
      "contents": "ScrW()"
    },
    {
      "trigger": "select",
      "contents": "select(${1:vararg vararg})"
    },
    {
      "trigger": "SendUserMessage",
      "contents": "SendUserMessage(${1:string name}, ${2:vararg args})"
    },
    {
      "trigger": "ServerLog",
      "contents": "ServerLog(${1:string parameter})"
    },
    {
      "trigger": "SetClipboardText",
      "contents": "SetClipboardText(${1:string text})"
    },
    {
      "trigger": "setfenv",
      "contents": "setfenv(${1:function location}, ${2:table enviroment})"
    },
    {
      "trigger": "SetGlobalAngle",
      "contents": "SetGlobalAngle(${1:any index}, ${2:Angle angle})"
    },
    {
      "trigger": "SetGlobalBool",
      "contents": "SetGlobalBool(${1:any index}, ${2:boolean bool})"
    },
    {
      "trigger": "SetGlobalEntity",
      "contents": "SetGlobalEntity(${1:any index}, ${2:Entity ent})"
    },
    {
      "trigger": "SetGlobalFloat",
      "contents": "SetGlobalFloat(${1:any index}, ${2:number float})"
    },
    {
      "trigger": "SetGlobalInt",
      "contents": "SetGlobalInt(${1:string index}, ${2:number value})"
    },
    {
      "trigger": "SetGlobalString",
      "contents": "SetGlobalString(${1:any index}, ${2:string string})"
    },
    {
      "trigger": "SetGlobalVector",
      "contents": "SetGlobalVector(${1:any index}, ${2:Vector vec})"
    },
    {
      "trigger": "setmetatable",
      "contents": "setmetatable(${1:table Tab}, ${2:table Metatable})"
    },
    {
      "trigger": "SetPhysConstraintSystem",
      "contents": "SetPhysConstraintSystem(${1:Entity constraintSystem})"
    },
    {
      "trigger": "SortedPairs",
      "contents": "SortedPairs(${1:table table}, ${2:boolean desc = false})"
    },
    {
      "trigger": "SortedPairsByMemberValue",
      "contents": "SortedPairsByMemberValue(${1:table table}, ${2:any memberKey}, ${3:boolean descending = false})"
    },
    {
      "trigger": "Sound",
      "contents": "Sound(${1:string soundPath})"
    },
    {
      "trigger": "SortedPairsByValue",
      "contents": "SortedPairsByValue(${1:table table}, ${2:boolean descending = false})"
    },
    {
      "trigger": "SoundDuration",
      "contents": "SoundDuration(${1:string soundName})"
    },
    {
      "trigger": "SScale",
      "contents": "SScale(${1:number Size})"
    },
    {
      "trigger": "SQLStr",
      "contents": "SQLStr(${1:string input}, ${2:boolean noQuotes = false})"
    },
    {
      "trigger": "STNDRD",
      "contents": "STNDRD(${1:number number})"
    },
    {
      "trigger": "SuppressHostEvents",
      "contents": "SuppressHostEvents(${1:Player suppressPlayer})"
    },
    {
      "trigger": "SysTime",
      "contents": "SysTime()"
    },
    {
      "trigger": "TauntCamera",
      "contents": "TauntCamera()"
    },
    {
      "trigger": "TextEntryLoseFocus",
      "contents": "TextEntryLoseFocus()"
    },
    {
      "trigger": "TimedCos",
      "contents": "TimedCos(${1:number frequency}, ${2:number min}, ${3:number max}, ${4:number offset})"
    },
    {
      "trigger": "TimedSin",
      "contents": "TimedSin(${1:number frequency}, ${2:number origin}, ${3:number max}, ${4:number offset})"
    },
    {
      "trigger": "tobool",
      "contents": "tobool(${1:any val})"
    },
    {
      "trigger": "ToggleFavourite",
      "contents": "ToggleFavourite(${1:string map})"
    },
    {
      "trigger": "tonumber",
      "contents": "tonumber(${1:any value}, ${2:number base = 10})"
    },
    {
      "trigger": "TranslateDownloadableName",
      "contents": "TranslateDownloadableName(${1:string filename})"
    },
    {
      "trigger": "tostring",
      "contents": "tostring(${1:any value})"
    },
    {
      "trigger": "type",
      "contents": "type(${1:any var})"
    },
    {
      "trigger": "TypeID",
      "contents": "TypeID(${1:any variable})"
    },
    {
      "trigger": "unpack",
      "contents": "unpack(${1:table tbl}, ${2:number startIndex = 1}, ${3:number endIndex = #tbl})"
    },
    {
      "trigger": "UnPredictedCurTime",
      "contents": "UnPredictedCurTime()"
    },
    {
      "trigger": "UpdateLoadPanel",
      "contents": "UpdateLoadPanel(${1:string javascript})"
    },
    {
      "trigger": "ValidPanel",
      "contents": "ValidPanel(${1:Panel panel})"
    },
    {
      "trigger": "Vector",
      "contents": "Vector(${1:number y = 0}, ${2:number z = 0})"
    },
    {
      "trigger": "VectorRand",
      "contents": "VectorRand(${1:number min = -1}, ${2:number max = 1})"
    },
    {
      "trigger": "VGUIRect",
      "contents": "VGUIRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "VGUIFrameTime",
      "contents": "VGUIFrameTime()"
    },
    {
      "trigger": "VisualizeLayout",
      "contents": "VisualizeLayout(${1:Panel panel})"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector position}, ${2:Angle angle}, ${3:Vector newSystemOrigin}, ${4:Angle newSystemAngles})"
    },
    {
      "trigger": "WorkshopFileBase",
      "contents": "WorkshopFileBase(${1:string namespace}, ${2:table requiredTags})"
    },
    {
      "trigger": "xpcall",
      "contents": "xpcall(${1:function func}, ${2:vararg arguments})"
    },
    {
      "trigger": "gmsave.LoadMap",
      "contents": "gmsave.LoadMap(${1:string mapData}, ${2:Player ply})"
    },
    {
      "trigger": "gmod.GetGamemode",
      "contents": "gmod.GetGamemode()"
    },
    {
      "trigger": "gmsave.PlayerLoad",
      "contents": "gmsave.PlayerLoad(${1:Player ply}, ${2:table data})"
    },
    {
      "trigger": "gmsave.PlayerSave",
      "contents": "gmsave.PlayerSave(${1:Player ply})"
    },
    {
      "trigger": "gmsave.SaveMap",
      "contents": "gmsave.SaveMap(${1:Player ply})"
    },
    {
      "trigger": "gmsave.ShouldSaveEntity",
      "contents": "gmsave.ShouldSaveEntity(${1:Entity ent}, ${2:table t})"
    },
    {
      "trigger": "gui.ActivateGameUI",
      "contents": "gui.ActivateGameUI()"
    },
    {
      "trigger": "gui.EnableScreenClicker",
      "contents": "gui.EnableScreenClicker(${1:boolean enabled})"
    },
    {
      "trigger": "gui.HideGameUI",
      "contents": "gui.HideGameUI()"
    },
    {
      "trigger": "gui.InternalCursorMoved",
      "contents": "gui.InternalCursorMoved(${1:number deltaX}, ${2:number deltaY})"
    },
    {
      "trigger": "gui.InternalKeyCodePressed",
      "contents": "gui.InternalKeyCodePressed()"
    },
    {
      "trigger": "gui.InternalKeyCodeReleased",
      "contents": "gui.InternalKeyCodeReleased()"
    },
    {
      "trigger": "gui.InternalKeyCodeTyped",
      "contents": "gui.InternalKeyCodeTyped()"
    },
    {
      "trigger": "gui.InternalKeyTyped",
      "contents": "gui.InternalKeyTyped(${1:number code})"
    },
    {
      "trigger": "gui.InternalMouseDoublePressed",
      "contents": "gui.InternalMouseDoublePressed()"
    },
    {
      "trigger": "gui.InternalMousePressed",
      "contents": "gui.InternalMousePressed()"
    },
    {
      "trigger": "gui.InternalMouseReleased",
      "contents": "gui.InternalMouseReleased()"
    },
    {
      "trigger": "gui.InternalMouseWheeled",
      "contents": "gui.InternalMouseWheeled(${1:number delta})"
    },
    {
      "trigger": "gui.IsConsoleVisible",
      "contents": "gui.IsConsoleVisible()"
    },
    {
      "trigger": "gui.IsGameUIVisible",
      "contents": "gui.IsGameUIVisible()"
    },
    {
      "trigger": "gui.MousePos",
      "contents": "gui.MousePos()"
    },
    {
      "trigger": "gui.MouseX",
      "contents": "gui.MouseX()"
    },
    {
      "trigger": "gui.MouseY",
      "contents": "gui.MouseY()"
    },
    {
      "trigger": "gui.OpenURL",
      "contents": "gui.OpenURL(${1:string url})"
    },
    {
      "trigger": "gui.ScreenToVector",
      "contents": "gui.ScreenToVector(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "gui.SetMousePos",
      "contents": "gui.SetMousePos(${1:number mouseX}, ${2:number mouseY})"
    },
    {
      "trigger": "gui.ShowConsole",
      "contents": "gui.ShowConsole()"
    },
    {
      "trigger": "GWEN.CreateTextureBorder",
      "contents": "GWEN.CreateTextureBorder(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h}, ${5:number left}, ${6:number top}, ${7:number right}, ${8:number bottom}, ${9:IMaterial source = nil})"
    },
    {
      "trigger": "GWEN.CreateTextureCentered",
      "contents": "GWEN.CreateTextureCentered(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "GWEN.CreateTextureNormal",
      "contents": "GWEN.CreateTextureNormal(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "GWEN.TextureColor",
      "contents": "GWEN.TextureColor(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "halo.Add",
      "contents": "halo.Add(${1:table entities}, ${2:number blurX = 2}, ${3:number blurY = 2}, ${4:number passes = 1}, ${5:boolean additive = true}, ${6:boolean ignoreZ = false})"
    },
    {
      "trigger": "halo.Render",
      "contents": "halo.Render(${1:table entry})"
    },
    {
      "trigger": "halo.RenderedEntity",
      "contents": "halo.RenderedEntity()"
    },
    {
      "trigger": "hammer.SendCommand",
      "contents": "hammer.SendCommand(${1:string cmd})"
    },
    {
      "trigger": "hook.Add",
      "contents": "hook.Add(${1:string eventName})"
    },
    {
      "trigger": "hook.Call",
      "contents": "hook.Call(${1:string eventName}, ${2:table gamemodeTable}, ${3:vararg args})"
    },
    {
      "trigger": "hook.GetTable",
      "contents": "hook.GetTable()"
    },
    {
      "trigger": "hook.Remove",
      "contents": "hook.Remove(${1:string eventName}, ${2:any identifier})"
    },
    {
      "trigger": "hook.Run",
      "contents": "hook.Run(${1:string eventName}, ${2:vararg args})"
    },
    {
      "trigger": "http.Fetch",
      "contents": "http.Fetch(${1:string url})"
    },
    {
      "trigger": "http.Post",
      "contents": "http.Post(${1:string url}, ${2:table parameters}, ${3:function onSuccess = nil}, ${4:function onFailure = nil})"
    },
    {
      "trigger": "input.CheckKeyTrapping",
      "contents": "input.CheckKeyTrapping()"
    },
    {
      "trigger": "input.GetCursorPos",
      "contents": "input.GetCursorPos()"
    },
    {
      "trigger": "input.GetKeyCode",
      "contents": "input.GetKeyCode(${1:string button})"
    },
    {
      "trigger": "input.GetKeyName",
      "contents": "input.GetKeyName()"
    },
    {
      "trigger": "input.IsControlDown",
      "contents": "input.IsControlDown()"
    },
    {
      "trigger": "input.IsButtonDown",
      "contents": "input.IsButtonDown()"
    },
    {
      "trigger": "input.IsKeyTrapping",
      "contents": "input.IsKeyTrapping()"
    },
    {
      "trigger": "input.IsMouseDown",
      "contents": "input.IsMouseDown()"
    },
    {
      "trigger": "input.IsKeyDown",
      "contents": "input.IsKeyDown()"
    },
    {
      "trigger": "input.LookupBinding",
      "contents": "input.LookupBinding(${1:string binding}, ${2:boolean exact = false})"
    },
    {
      "trigger": "input.IsShiftDown",
      "contents": "input.IsShiftDown()"
    },
    {
      "trigger": "input.LookupKeyBinding",
      "contents": "input.LookupKeyBinding()"
    },
    {
      "trigger": "input.SetCursorPos",
      "contents": "input.SetCursorPos(${1:number mouseX}, ${2:number mouseY})"
    },
    {
      "trigger": "input.SelectWeapon",
      "contents": "input.SelectWeapon(${1:Weapon weapon})"
    },
    {
      "trigger": "input.StartKeyTrapping",
      "contents": "input.StartKeyTrapping()"
    },
    {
      "trigger": "input.WasKeyReleased",
      "contents": "input.WasKeyReleased()"
    },
    {
      "trigger": "input.WasKeyPressed",
      "contents": "input.WasKeyPressed()"
    },
    {
      "trigger": "input.WasKeyTyped",
      "contents": "input.WasKeyTyped()"
    },
    {
      "trigger": "input.WasMousePressed",
      "contents": "input.WasMousePressed()"
    },
    {
      "trigger": "input.WasMouseDoublePressed",
      "contents": "input.WasMouseDoublePressed()"
    },
    {
      "trigger": "input.WasMouseReleased",
      "contents": "input.WasMouseReleased()"
    },
    {
      "trigger": "jit.arch",
      "contents": "jit.arch()"
    },
    {
      "trigger": "jit.flush",
      "contents": "jit.flush()"
    },
    {
      "trigger": "jit.attach",
      "contents": "jit.attach(${1:string event})"
    },
    {
      "trigger": "jit.off",
      "contents": "jit.off()"
    },
    {
      "trigger": "jit.on",
      "contents": "jit.on()"
    },
    {
      "trigger": "jit.status",
      "contents": "jit.status()"
    },
    {
      "trigger": "jit.os",
      "contents": "jit.os()"
    },
    {
      "trigger": "jit.version",
      "contents": "jit.version()"
    },
    {
      "trigger": "killicon.AddAlias",
      "contents": "killicon.AddAlias(${1:string new_class}, ${2:string existing_class})"
    },
    {
      "trigger": "killicon.Add",
      "contents": "killicon.Add(${1:string class}, ${2:string texture}, ${3:table color})"
    },
    {
      "trigger": "killicon.AddFont",
      "contents": "killicon.AddFont(${1:string class}, ${2:string font}, ${3:string symbol}, ${4:table color})"
    },
    {
      "trigger": "killicon.Exists",
      "contents": "killicon.Exists(${1:string class})"
    },
    {
      "trigger": "killicon.Draw",
      "contents": "killicon.Draw(${1:number x}, ${2:number y}, ${3:string name}, ${4:number alpha})"
    },
    {
      "trigger": "killicon.GetSize",
      "contents": "killicon.GetSize(${1:string name})"
    },
    {
      "trigger": "language.Add",
      "contents": "language.Add(${1:string placeholder}, ${2:string fulltext})"
    },
    {
      "trigger": "language.GetPhrase",
      "contents": "language.GetPhrase(${1:string phrase})"
    },
    {
      "trigger": "list.Add",
      "contents": "list.Add(${1:string identifier}, ${2:any item})"
    },
    {
      "trigger": "list.Contains",
      "contents": "list.Contains(${1:string list}, ${2:any value})"
    },
    {
      "trigger": "list.GetForEdit",
      "contents": "list.GetForEdit(${1:string identifier})"
    },
    {
      "trigger": "list.Get",
      "contents": "list.Get(${1:string identifier})"
    },
    {
      "trigger": "list.Set",
      "contents": "list.Set(${1:string identifier}, ${2:any key}, ${3:any item})"
    },
    {
      "trigger": "list.HasEntry",
      "contents": "list.HasEntry(${1:string list}, ${2:any key})"
    },
    {
      "trigger": "markup.Parse",
      "contents": "markup.Parse(${1:string markup}, ${2:number maxwidth})"
    },
    {
      "trigger": "math.acos",
      "contents": "math.acos(${1:number cos})"
    },
    {
      "trigger": "math.abs",
      "contents": "math.abs(${1:number x})"
    },
    {
      "trigger": "math.AngleDifference",
      "contents": "math.AngleDifference(${1:number a}, ${2:number b})"
    },
    {
      "trigger": "math.Approach",
      "contents": "math.Approach(${1:number current}, ${2:number target}, ${3:number change})"
    },
    {
      "trigger": "math.ApproachAngle",
      "contents": "math.ApproachAngle(${1:number currentAngle}, ${2:number targetAngle}, ${3:number rate})"
    },
    {
      "trigger": "math.asin",
      "contents": "math.asin(${1:number normal})"
    },
    {
      "trigger": "math.atan",
      "contents": "math.atan(${1:number normal})"
    },
    {
      "trigger": "math.BinToInt",
      "contents": "math.BinToInt(${1:string string})"
    },
    {
      "trigger": "math.calcBSplineN",
      "contents": "math.calcBSplineN(${1:number i}, ${2:number t}, ${3:number tinc})"
    },
    {
      "trigger": "math.BSplinePoint",
      "contents": "math.BSplinePoint(${1:number tDiff}, ${2:number tMax})"
    },
    {
      "trigger": "math.ceil",
      "contents": "math.ceil(${1:number number})"
    },
    {
      "trigger": "math.cosh",
      "contents": "math.cosh(${1:number number})"
    },
    {
      "trigger": "math.cos",
      "contents": "math.cos(${1:number number})"
    },
    {
      "trigger": "math.Clamp",
      "contents": "math.Clamp(${1:number input}, ${2:number min}, ${3:number max})"
    },
    {
      "trigger": "math.deg",
      "contents": "math.deg(${1:number radians})"
    },
    {
      "trigger": "math.Distance",
      "contents": "math.Distance(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})"
    },
    {
      "trigger": "math.Dist",
      "contents": "math.Dist(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})"
    },
    {
      "trigger": "math.EaseInOut",
      "contents": "math.EaseInOut(${1:number progress}, ${2:number easeIn}, ${3:number easeOut})"
    },
    {
      "trigger": "math.exp",
      "contents": "math.exp(${1:number exponent})"
    },
    {
      "trigger": "math.floor",
      "contents": "math.floor(${1:number number})"
    },
    {
      "trigger": "math.fmod",
      "contents": "math.fmod(${1:number base}, ${2:number modulator})"
    },
    {
      "trigger": "math.frexp",
      "contents": "math.frexp(${1:number x})"
    },
    {
      "trigger": "math.huge",
      "contents": "math.huge()"
    },
    {
      "trigger": "math.IntToBin",
      "contents": "math.IntToBin(${1:number int})"
    },
    {
      "trigger": "math.ldexp",
      "contents": "math.ldexp(${1:number normalizedFraction}, ${2:number exponent})"
    },
    {
      "trigger": "math.log",
      "contents": "math.log(${1:number x}, ${2:number base = <span class})"
    },
    {
      "trigger": "math.max",
      "contents": "math.max(${1:vararg numbers})"
    },
    {
      "trigger": "math.min",
      "contents": "math.min(${1:vararg numbers})"
    },
    {
      "trigger": "math.mod",
      "contents": "math.mod(${1:number base}, ${2:number modulator})"
    },
    {
      "trigger": "math.modf",
      "contents": "math.modf(${1:number base})"
    },
    {
      "trigger": "math.NormalizeAngle",
      "contents": "math.NormalizeAngle(${1:number angle})"
    },
    {
      "trigger": "math.pi",
      "contents": "math.pi()"
    },
    {
      "trigger": "math.rad",
      "contents": "math.rad(${1:number degrees})"
    },
    {
      "trigger": "math.pow",
      "contents": "math.pow(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "math.Rand",
      "contents": "math.Rand(${1:number min}, ${2:number max})"
    },
    {
      "trigger": "math.random",
      "contents": "math.random(${1:number m = nil}, ${2:number n = nil})"
    },
    {
      "trigger": "math.randomseed",
      "contents": "math.randomseed(${1:number seed})"
    },
    {
      "trigger": "math.Remap",
      "contents": "math.Remap(${1:number value}, ${2:number inMin}, ${3:number inMax}, ${4:number outMin}, ${5:number outMax})"
    },
    {
      "trigger": "math.sin",
      "contents": "math.sin(${1:number number})"
    },
    {
      "trigger": "math.Round",
      "contents": "math.Round(${1:number value}, ${2:number decimals = 0})"
    },
    {
      "trigger": "math.sinh",
      "contents": "math.sinh(${1:number number})"
    },
    {
      "trigger": "math.sqrt",
      "contents": "math.sqrt(${1:number value})"
    },
    {
      "trigger": "math.tan",
      "contents": "math.tan(${1:number value})"
    },
    {
      "trigger": "math.tanh",
      "contents": "math.tanh(${1:number number})"
    },
    {
      "trigger": "math.TimeFraction",
      "contents": "math.TimeFraction(${1:number start}, ${2:number end}, ${3:number current})"
    },
    {
      "trigger": "math.Truncate",
      "contents": "math.Truncate(${1:number num}, ${2:number digits = 0})"
    },
    {
      "trigger": "matproxy.Add",
      "contents": "matproxy.Add()"
    },
    {
      "trigger": "matproxy.Call",
      "contents": "matproxy.Call(${1:string uname}, ${2:IMaterial mat}, ${3:Entity ent})"
    },
    {
      "trigger": "matproxy.Init",
      "contents": "matproxy.Init(${1:string name}, ${2:string uname}, ${3:IMaterial mat}, ${4:table values})"
    },
    {
      "trigger": "matproxy.ShouldOverrideProxy",
      "contents": "matproxy.ShouldOverrideProxy(${1:string name})"
    },
    {
      "trigger": "menubar.Init",
      "contents": "menubar.Init()"
    },
    {
      "trigger": "menu.RecordFrame",
      "contents": "menu.RecordFrame()"
    },
    {
      "trigger": "menubar.IsParent",
      "contents": "menubar.IsParent(${1:Panel pnl})"
    },
    {
      "trigger": "menubar.ParentTo",
      "contents": "menubar.ParentTo(${1:Panel pnl})"
    },
    {
      "trigger": "mesh.AdvanceVertex",
      "contents": "mesh.AdvanceVertex()"
    },
    {
      "trigger": "mesh.Begin",
      "contents": "mesh.Begin(${1:IMesh mesh = nil}, ${2:number primiteCount})"
    },
    {
      "trigger": "mesh.Color",
      "contents": "mesh.Color(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})"
    },
    {
      "trigger": "mesh.End",
      "contents": "mesh.End()"
    },
    {
      "trigger": "mesh.Normal",
      "contents": "mesh.Normal(${1:Vector normal})"
    },
    {
      "trigger": "mesh.Position",
      "contents": "mesh.Position(${1:Vector position})"
    },
    {
      "trigger": "mesh.Quad",
      "contents": "mesh.Quad(${1:Vector vertex1}, ${2:Vector vertex2}, ${3:Vector vertex3}, ${4:Vector vertex4})"
    },
    {
      "trigger": "mesh.QuadEasy",
      "contents": "mesh.QuadEasy(${1:Vector position}, ${2:Vector normal}, ${3:number sizeX}, ${4:number sizeY})"
    },
    {
      "trigger": "mesh.Specular",
      "contents": "mesh.Specular(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})"
    },
    {
      "trigger": "mesh.TangentS",
      "contents": "mesh.TangentS(${1:Vector sTanger})"
    },
    {
      "trigger": "mesh.TangentT",
      "contents": "mesh.TangentT(${1:Vector tTanger})"
    },
    {
      "trigger": "mesh.TexCoord",
      "contents": "mesh.TexCoord(${1:number stage}, ${2:number u}, ${3:number v})"
    },
    {
      "trigger": "mesh.UserData",
      "contents": "mesh.UserData(${1:number tangentX}, ${2:number tangentY}, ${3:number tangentZ}, ${4:number tangentHandedness})"
    },
    {
      "trigger": "mesh.VertexCount",
      "contents": "mesh.VertexCount()"
    },
    {
      "trigger": "motionsensor.BuildSkeleton",
      "contents": "motionsensor.BuildSkeleton(${1:table translator}, ${2:Player player}, ${3:Angle rotation})"
    },
    {
      "trigger": "motionsensor.ChooseBuilderFromEntity",
      "contents": "motionsensor.ChooseBuilderFromEntity(${1:Entity ent})"
    },
    {
      "trigger": "motionsensor.GetColourMaterial",
      "contents": "motionsensor.GetColourMaterial()"
    },
    {
      "trigger": "motionsensor.GetSkeleton",
      "contents": "motionsensor.GetSkeleton()"
    },
    {
      "trigger": "motionsensor.IsActive",
      "contents": "motionsensor.IsActive()"
    },
    {
      "trigger": "motionsensor.IsAvailable",
      "contents": "motionsensor.IsAvailable()"
    },
    {
      "trigger": "motionsensor.ProcessAngle",
      "contents": "motionsensor.ProcessAngle(${1:table translator}, ${2:table sensor}, ${3:Vector pos}, ${4:Angle ang}, ${5:table special_vectors}, ${6:number boneid}, ${7:table v})"
    },
    {
      "trigger": "motionsensor.ProcessAnglesTable",
      "contents": "motionsensor.ProcessAnglesTable(${1:table translator}, ${2:table sensor}, ${3:Vector pos}, ${4:Angle rotation})"
    },
    {
      "trigger": "motionsensor.ProcessPositionTable",
      "contents": "motionsensor.ProcessPositionTable(${1:table translator}, ${2:table sensor})"
    },
    {
      "trigger": "motionsensor.Stop",
      "contents": "motionsensor.Stop()"
    },
    {
      "trigger": "motionsensor.Start",
      "contents": "motionsensor.Start()"
    },
    {
      "trigger": "navmesh.AddWalkableSeed",
      "contents": "navmesh.AddWalkableSeed(${1:Vector pos}, ${2:Vector dir})"
    },
    {
      "trigger": "navmesh.ClearWalkableSeeds",
      "contents": "navmesh.ClearWalkableSeeds()"
    },
    {
      "trigger": "navmesh.BeginGeneration",
      "contents": "navmesh.BeginGeneration()"
    },
    {
      "trigger": "navmesh.CreateNavArea",
      "contents": "navmesh.CreateNavArea()"
    },
    {
      "trigger": "navmesh.Find",
      "contents": "navmesh.Find(${1:Vector pos}, ${2:number radius}, ${3:number stepdown}, ${4:number stepup})"
    },
    {
      "trigger": "navmesh.GetAllNavAreas",
      "contents": "navmesh.GetAllNavAreas()"
    },
    {
      "trigger": "navmesh.GetEditCursorPosition",
      "contents": "navmesh.GetEditCursorPosition()"
    },
    {
      "trigger": "navmesh.GetGroundHeight",
      "contents": "navmesh.GetGroundHeight(${1:Vector pos})"
    },
    {
      "trigger": "navmesh.GetMarkedArea",
      "contents": "navmesh.GetMarkedArea()"
    },
    {
      "trigger": "navmesh.GetMarkedLadder",
      "contents": "navmesh.GetMarkedLadder()"
    },
    {
      "trigger": "navmesh.GetNavAreaByID",
      "contents": "navmesh.GetNavAreaByID()"
    },
    {
      "trigger": "navmesh.GetNavArea",
      "contents": "navmesh.GetNavArea(${1:Vector pos}, ${2:number beneathLimit})"
    },
    {
      "trigger": "navmesh.GetNavAreaCount",
      "contents": "navmesh.GetNavAreaCount()"
    },
    {
      "trigger": "navmesh.GetNearestNavArea",
      "contents": "navmesh.GetNearestNavArea(${1:Vector pos}, ${2:boolean anyZ = false})"
    },
    {
      "trigger": "navmesh.GetNavLadderByID",
      "contents": "navmesh.GetNavLadderByID()"
    },
    {
      "trigger": "navmesh.IsGenerating",
      "contents": "navmesh.IsGenerating()"
    },
    {
      "trigger": "navmesh.GetPlayerSpawnName",
      "contents": "navmesh.GetPlayerSpawnName()"
    },
    {
      "trigger": "navmesh.Load",
      "contents": "navmesh.Load()"
    },
    {
      "trigger": "navmesh.Reset",
      "contents": "navmesh.Reset()"
    },
    {
      "trigger": "navmesh.Save",
      "contents": "navmesh.Save()"
    },
    {
      "trigger": "navmesh.SetMarkedArea",
      "contents": "navmesh.SetMarkedArea()"
    },
    {
      "trigger": "navmesh.SetMarkedLadder",
      "contents": "navmesh.SetMarkedLadder()"
    },
    {
      "trigger": "navmesh.SetPlayerSpawnName",
      "contents": "navmesh.SetPlayerSpawnName(${1:string spawnPointClass})"
    },
    {
      "trigger": "net.Broadcast",
      "contents": "net.Broadcast()"
    },
    {
      "trigger": "net.BytesLeft",
      "contents": "net.BytesLeft()"
    },
    {
      "trigger": "net.BytesWritten",
      "contents": "net.BytesWritten()"
    },
    {
      "trigger": "net.Incoming",
      "contents": "net.Incoming(${1:number length}, ${2:Player client})"
    },
    {
      "trigger": "net.ReadAngle",
      "contents": "net.ReadAngle()"
    },
    {
      "trigger": "net.ReadBit",
      "contents": "net.ReadBit()"
    },
    {
      "trigger": "net.ReadBool",
      "contents": "net.ReadBool()"
    },
    {
      "trigger": "navmesh.IsLoaded",
      "contents": "navmesh.IsLoaded()"
    },
    {
      "trigger": "net.ReadColor",
      "contents": "net.ReadColor()"
    },
    {
      "trigger": "net.ReadData",
      "contents": "net.ReadData(${1:number length})"
    },
    {
      "trigger": "net.ReadDouble",
      "contents": "net.ReadDouble()"
    },
    {
      "trigger": "net.ReadEntity",
      "contents": "net.ReadEntity()"
    },
    {
      "trigger": "net.ReadFloat",
      "contents": "net.ReadFloat()"
    },
    {
      "trigger": "net.ReadHeader",
      "contents": "net.ReadHeader()"
    },
    {
      "trigger": "net.ReadInt",
      "contents": "net.ReadInt()"
    },
    {
      "trigger": "net.ReadMatrix",
      "contents": "net.ReadMatrix()"
    },
    {
      "trigger": "net.ReadNormal",
      "contents": "net.ReadNormal()"
    },
    {
      "trigger": "net.ReadString",
      "contents": "net.ReadString()"
    },
    {
      "trigger": "net.ReadType",
      "contents": "net.ReadType()"
    },
    {
      "trigger": "net.ReadTable",
      "contents": "net.ReadTable()"
    },
    {
      "trigger": "net.ReadUInt",
      "contents": "net.ReadUInt(${1:number numberOfBits})"
    },
    {
      "trigger": "net.Receive",
      "contents": "net.Receive(${1:string messageName})"
    },
    {
      "trigger": "net.ReadVector",
      "contents": "net.ReadVector()"
    },
    {
      "trigger": "net.Send",
      "contents": "net.Send()"
    },
    {
      "trigger": "net.SendPAS",
      "contents": "net.SendPAS(${1:Vector position})"
    },
    {
      "trigger": "net.SendOmit",
      "contents": "net.SendOmit(${1:Player ply})"
    },
    {
      "trigger": "net.SendPVS",
      "contents": "net.SendPVS(${1:Vector position})"
    },
    {
      "trigger": "net.SendToServer",
      "contents": "net.SendToServer()"
    },
    {
      "trigger": "net.Start",
      "contents": "net.Start(${1:string messageName}, ${2:boolean unreliable = false})"
    },
    {
      "trigger": "net.WriteAngle",
      "contents": "net.WriteAngle(${1:Angle angle})"
    },
    {
      "trigger": "net.WriteBit",
      "contents": "net.WriteBit(${1:boolean boolean})"
    },
    {
      "trigger": "net.WriteBool",
      "contents": "net.WriteBool(${1:boolean boolean})"
    },
    {
      "trigger": "net.WriteColor",
      "contents": "net.WriteColor()"
    },
    {
      "trigger": "net.WriteData",
      "contents": "net.WriteData(${1:string binaryData}, ${2:number length})"
    },
    {
      "trigger": "net.WriteDouble",
      "contents": "net.WriteDouble(${1:number double})"
    },
    {
      "trigger": "net.WriteEntity",
      "contents": "net.WriteEntity(${1:Entity entity})"
    },
    {
      "trigger": "net.WriteInt",
      "contents": "net.WriteInt(${1:number integer})"
    },
    {
      "trigger": "net.WriteFloat",
      "contents": "net.WriteFloat(${1:number float})"
    },
    {
      "trigger": "net.WriteMatrix",
      "contents": "net.WriteMatrix(${1:VMatrix matrix})"
    },
    {
      "trigger": "net.WriteNormal",
      "contents": "net.WriteNormal(${1:Vector normal})"
    },
    {
      "trigger": "net.WriteString",
      "contents": "net.WriteString(${1:string string})"
    },
    {
      "trigger": "net.WriteTable",
      "contents": "net.WriteTable()"
    },
    {
      "trigger": "net.WriteType",
      "contents": "net.WriteType(${1:any Data})"
    },
    {
      "trigger": "net.WriteUInt",
      "contents": "net.WriteUInt(${1:number unsignedInteger}, ${2:number numberOfBits})"
    },
    {
      "trigger": "notification.AddLegacy",
      "contents": "notification.AddLegacy(${1:string text}, ${2:number length})"
    },
    {
      "trigger": "net.WriteVector",
      "contents": "net.WriteVector(${1:Vector vector})"
    },
    {
      "trigger": "notification.AddProgress",
      "contents": "notification.AddProgress(${1:any id}, ${2:string strText})"
    },
    {
      "trigger": "notification.Kill",
      "contents": "notification.Kill(${1:any uid})"
    },
    {
      "trigger": "numpad.Activate",
      "contents": "numpad.Activate(${1:Player ply})"
    },
    {
      "trigger": "numpad.Deactivate",
      "contents": "numpad.Deactivate(${1:Player ply})"
    },
    {
      "trigger": "numpad.FromButton",
      "contents": "numpad.FromButton()"
    },
    {
      "trigger": "numpad.OnDown",
      "contents": "numpad.OnDown(${1:Player ply})"
    },
    {
      "trigger": "numpad.OnUp",
      "contents": "numpad.OnUp(${1:Player ply})"
    },
    {
      "trigger": "numpad.Register",
      "contents": "numpad.Register(${1:string id})"
    },
    {
      "trigger": "numpad.Remove",
      "contents": "numpad.Remove()"
    },
    {
      "trigger": "numpad.Toggle",
      "contents": "numpad.Toggle(${1:Player ply})"
    },
    {
      "trigger": "os.clock",
      "contents": "os.clock()"
    },
    {
      "trigger": "os.date",
      "contents": "os.date(${1:number time})"
    },
    {
      "trigger": "os.difftime",
      "contents": "os.difftime(${1:number timeA}, ${2:number timeB})"
    },
    {
      "trigger": "os.time",
      "contents": "os.time()"
    },
    {
      "trigger": "physenv.AddSurfaceData",
      "contents": "physenv.AddSurfaceData(${1:string properties})"
    },
    {
      "trigger": "physenv.GetAirDensity",
      "contents": "physenv.GetAirDensity()"
    },
    {
      "trigger": "package.seeall",
      "contents": "package.seeall(${1:table module})"
    },
    {
      "trigger": "physenv.GetGravity",
      "contents": "physenv.GetGravity()"
    },
    {
      "trigger": "physenv.SetAirDensity",
      "contents": "physenv.SetAirDensity(${1:number airDensity})"
    },
    {
      "trigger": "physenv.GetPerformanceSettings",
      "contents": "physenv.GetPerformanceSettings()"
    },
    {
      "trigger": "physenv.SetGravity",
      "contents": "physenv.SetGravity(${1:Vector gravity})"
    },
    {
      "trigger": "physenv.SetPerformanceSettings",
      "contents": "physenv.SetPerformanceSettings()"
    },
    {
      "trigger": "player.CreateNextBot",
      "contents": "player.CreateNextBot(${1:string botName})"
    },
    {
      "trigger": "player.GetAll",
      "contents": "player.GetAll()"
    },
    {
      "trigger": "player.GetByAccountID",
      "contents": "player.GetByAccountID()"
    },
    {
      "trigger": "player.GetBots",
      "contents": "player.GetBots()"
    },
    {
      "trigger": "player.GetByID",
      "contents": "player.GetByID(${1:number connectionID})"
    },
    {
      "trigger": "player.GetBySteamID",
      "contents": "player.GetBySteamID()"
    },
    {
      "trigger": "player.GetByUniqueID",
      "contents": "player.GetByUniqueID()"
    },
    {
      "trigger": "player.GetCount",
      "contents": "player.GetCount()"
    },
    {
      "trigger": "player.GetHumans",
      "contents": "player.GetHumans()"
    },
    {
      "trigger": "presets.Add",
      "contents": "presets.Add(${1:string groupname}, ${2:string name}, ${3:table values})"
    },
    {
      "trigger": "presets.BadNameAlert",
      "contents": "presets.BadNameAlert()"
    },
    {
      "trigger": "presets.Exists",
      "contents": "presets.Exists(${1:string type}, ${2:string name})"
    },
    {
      "trigger": "presets.GetTable",
      "contents": "presets.GetTable(${1:string groupname})"
    },
    {
      "trigger": "presets.OverwritePresetPrompt",
      "contents": "presets.OverwritePresetPrompt(${1:function callback})"
    },
    {
      "trigger": "presets.Remove",
      "contents": "presets.Remove(${1:string groupname}, ${2:string name})"
    },
    {
      "trigger": "presets.Rename",
      "contents": "presets.Rename(${1:string groupname}, ${2:string oldname}, ${3:string newname})"
    },
    {
      "trigger": "properties.Add",
      "contents": "properties.Add(${1:string name})"
    },
    {
      "trigger": "properties.CanBeTargeted",
      "contents": "properties.CanBeTargeted(${1:Entity ent}, ${2:Player ply})"
    },
    {
      "trigger": "properties.GetHovered",
      "contents": "properties.GetHovered()"
    },
    {
      "trigger": "properties.OnScreenClick",
      "contents": "properties.OnScreenClick(${1:Vector eyepos}, ${2:Vector eyevec})"
    },
    {
      "trigger": "properties.OpenEntityMenu",
      "contents": "properties.OpenEntityMenu(${1:Entity ent}, ${2:table tr})"
    },
    {
      "trigger": "render.AddBeam",
      "contents": "render.AddBeam(${1:Vector startPos}, ${2:number width}, ${3:number textureEnd})"
    },
    {
      "trigger": "render.BlurRenderTarget",
      "contents": "render.BlurRenderTarget(${1:ITexture rendertarget}, ${2:number blurx}, ${3:number blury}, ${4:number passes})"
    },
    {
      "trigger": "render.BrushMaterialOverride",
      "contents": "render.BrushMaterialOverride(${1:IMaterial mat = nil})"
    },
    {
      "trigger": "render.Capture",
      "contents": "render.Capture()"
    },
    {
      "trigger": "render.CapturePixels",
      "contents": "render.CapturePixels()"
    },
    {
      "trigger": "render.Clear",
      "contents": "render.Clear(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a}, ${5:boolean clearDepth = false}, ${6:boolean clearStencil = false})"
    },
    {
      "trigger": "render.ClearBuffersObeyStencil",
      "contents": "render.ClearBuffersObeyStencil(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a}, ${5:boolean depth})"
    },
    {
      "trigger": "render.ClearDepth",
      "contents": "render.ClearDepth()"
    },
    {
      "trigger": "render.ClearRenderTarget",
      "contents": "render.ClearRenderTarget(${1:ITexture texture})"
    },
    {
      "trigger": "render.ClearStencil",
      "contents": "render.ClearStencil()"
    },
    {
      "trigger": "render.ClearStencilBufferRectangle",
      "contents": "render.ClearStencilBufferRectangle(${1:number originX}, ${2:number originY}, ${3:number endX}, ${4:number endY}, ${5:number stencilValue})"
    },
    {
      "trigger": "render.ComputeLighting",
      "contents": "render.ComputeLighting(${1:Vector position}, ${2:Vector normal})"
    },
    {
      "trigger": "render.ComputeDynamicLighting",
      "contents": "render.ComputeDynamicLighting(${1:Vector position}, ${2:Vector normal})"
    },
    {
      "trigger": "render.CopyRenderTargetToTexture",
      "contents": "render.CopyRenderTargetToTexture(${1:ITexture Target})"
    },
    {
      "trigger": "render.CullMode",
      "contents": "render.CullMode()"
    },
    {
      "trigger": "render.DepthRange",
      "contents": "render.DepthRange(${1:number depthmin}, ${2:number depthmax})"
    },
    {
      "trigger": "render.CopyTexture",
      "contents": "render.CopyTexture(${1:ITexture texture_from}, ${2:ITexture texture_to})"
    },
    {
      "trigger": "render.DrawBeam",
      "contents": "render.DrawBeam(${1:Vector startPos}, ${2:Vector endPos}, ${3:number width}, ${4:number textureStart}, ${5:number textureEnd})"
    },
    {
      "trigger": "render.DrawBox",
      "contents": "render.DrawBox(${1:Vector position}, ${2:Angle angles}, ${3:Vector mins}, ${4:Vector maxs})"
    },
    {
      "trigger": "render.DrawLine",
      "contents": "render.DrawLine(${1:Vector startPos}, ${2:Vector endPos})"
    },
    {
      "trigger": "render.DrawQuadEasy",
      "contents": "render.DrawQuadEasy(${1:Vector position}, ${2:Vector normal}, ${3:number width}, ${4:number height}, ${5:number rotation = 0})"
    },
    {
      "trigger": "render.DrawQuad",
      "contents": "render.DrawQuad(${1:Vector vert1}, ${2:Vector vert2}, ${3:Vector vert3}, ${4:Vector vert4})"
    },
    {
      "trigger": "render.DrawScreenQuad",
      "contents": "render.DrawScreenQuad()"
    },
    {
      "trigger": "render.DrawScreenQuadEx",
      "contents": "render.DrawScreenQuadEx(${1:number startX}, ${2:number startY}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "render.DrawSprite",
      "contents": "render.DrawSprite(${1:Vector position}, ${2:number width}, ${3:number height})"
    },
    {
      "trigger": "render.DrawSphere",
      "contents": "render.DrawSphere(${1:Vector position}, ${2:number radius}, ${3:number longitudeSteps}, ${4:number latitudeSteps})"
    },
    {
      "trigger": "render.DrawTextureToScreen",
      "contents": "render.DrawTextureToScreen(${1:ITexture tex})"
    },
    {
      "trigger": "render.DrawWireframeBox",
      "contents": "render.DrawWireframeBox(${1:Vector position}, ${2:Angle angle}, ${3:Vector mins}, ${4:Vector maxs}, ${5:boolean writeZ = false})"
    },
    {
      "trigger": "render.DrawTextureToScreenRect",
      "contents": "render.DrawTextureToScreenRect(${1:ITexture tex}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height})"
    },
    {
      "trigger": "render.DrawWireframeSphere",
      "contents": "render.DrawWireframeSphere(${1:Vector position}, ${2:number radius}, ${3:number longitudeSteps}, ${4:number latitudeSteps}, ${5:boolean writeZ = false})"
    },
    {
      "trigger": "render.EnableClipping",
      "contents": "render.EnableClipping(${1:boolean state})"
    },
    {
      "trigger": "render.EndBeam",
      "contents": "render.EndBeam()"
    },
    {
      "trigger": "render.FogColor",
      "contents": "render.FogColor(${1:number red}, ${2:number green}, ${3:number blue})"
    },
    {
      "trigger": "render.FogEnd",
      "contents": "render.FogEnd()"
    },
    {
      "trigger": "render.FogMode",
      "contents": "render.FogMode()"
    },
    {
      "trigger": "render.FogStart",
      "contents": "render.FogStart()"
    },
    {
      "trigger": "render.FogMaxDensity",
      "contents": "render.FogMaxDensity(${1:number maxDensity})"
    },
    {
      "trigger": "render.GetAmbientLightColor",
      "contents": "render.GetAmbientLightColor()"
    },
    {
      "trigger": "render.GetBlend",
      "contents": "render.GetBlend()"
    },
    {
      "trigger": "render.GetColorModulation",
      "contents": "render.GetColorModulation()"
    },
    {
      "trigger": "render.GetDXLevel",
      "contents": "render.GetDXLevel()"
    },
    {
      "trigger": "render.GetFogColor",
      "contents": "render.GetFogColor()"
    },
    {
      "trigger": "render.GetFogDistances",
      "contents": "render.GetFogDistances()"
    },
    {
      "trigger": "render.GetFogMode",
      "contents": "render.GetFogMode()"
    },
    {
      "trigger": "render.GetFullScreenDepthTexture",
      "contents": "render.GetFullScreenDepthTexture()"
    },
    {
      "trigger": "render.GetLightColor",
      "contents": "render.GetLightColor(${1:Vector position})"
    },
    {
      "trigger": "render.GetRefractTexture",
      "contents": "render.GetRefractTexture()"
    },
    {
      "trigger": "render.GetPowerOfTwoTexture",
      "contents": "render.GetPowerOfTwoTexture()"
    },
    {
      "trigger": "render.GetRenderTarget",
      "contents": "render.GetRenderTarget()"
    },
    {
      "trigger": "render.GetResolvedFullFrameDepth",
      "contents": "render.GetResolvedFullFrameDepth()"
    },
    {
      "trigger": "render.GetScreenEffectTexture",
      "contents": "render.GetScreenEffectTexture(${1:number textureIndex = 0})"
    },
    {
      "trigger": "render.GetSuperFPTex",
      "contents": "render.GetSuperFPTex()"
    },
    {
      "trigger": "render.GetToneMappingScaleLinear",
      "contents": "render.GetToneMappingScaleLinear()"
    },
    {
      "trigger": "render.GetSurfaceColor",
      "contents": "render.GetSurfaceColor(${1:Vector startPos}, ${2:Vector endPos})"
    },
    {
      "trigger": "render.MaterialOverride",
      "contents": "render.MaterialOverride(${1:IMaterial material})"
    },
    {
      "trigger": "render.MaterialOverrideByIndex",
      "contents": "render.MaterialOverrideByIndex(${1:number index}, ${2:IMaterial material})"
    },
    {
      "trigger": "render.MaxTextureHeight",
      "contents": "render.MaxTextureHeight()"
    },
    {
      "trigger": "render.MaxTextureWidth",
      "contents": "render.MaxTextureWidth()"
    },
    {
      "trigger": "render.Model",
      "contents": "render.Model()"
    },
    {
      "trigger": "render.OverrideAlphaWriteEnable",
      "contents": "render.OverrideAlphaWriteEnable(${1:boolean enable}, ${2:boolean shouldWrite})"
    },
    {
      "trigger": "render.ModelMaterialOverride",
      "contents": "render.ModelMaterialOverride(${1:IMaterial material})"
    },
    {
      "trigger": "render.OverrideBlend",
      "contents": "render.OverrideBlend(${1:boolean enabled})"
    },
    {
      "trigger": "render.OverrideBlendFunc",
      "contents": "render.OverrideBlendFunc(${1:boolean enabled}, ${2:number destBlend}, ${3:number destBlendAlpha = nil})"
    },
    {
      "trigger": "render.OverrideColorWriteEnable",
      "contents": "render.OverrideColorWriteEnable(${1:boolean enable}, ${2:boolean shouldWrite})"
    },
    {
      "trigger": "render.OverrideDepthEnable",
      "contents": "render.OverrideDepthEnable(${1:boolean enable}, ${2:boolean shouldWrite})"
    },
    {
      "trigger": "render.PerformFullScreenStencilOperation",
      "contents": "render.PerformFullScreenStencilOperation()"
    },
    {
      "trigger": "render.PopCustomClipPlane",
      "contents": "render.PopCustomClipPlane()"
    },
    {
      "trigger": "render.PopFilterMag",
      "contents": "render.PopFilterMag()"
    },
    {
      "trigger": "render.PopFilterMin",
      "contents": "render.PopFilterMin()"
    },
    {
      "trigger": "render.PopFlashlightMode",
      "contents": "render.PopFlashlightMode()"
    },
    {
      "trigger": "render.PopRenderTarget",
      "contents": "render.PopRenderTarget()"
    },
    {
      "trigger": "render.PushCustomClipPlane",
      "contents": "render.PushCustomClipPlane(${1:Vector normal})"
    },
    {
      "trigger": "render.PushFilterMag",
      "contents": "render.PushFilterMag()"
    },
    {
      "trigger": "render.PushFilterMin",
      "contents": "render.PushFilterMin()"
    },
    {
      "trigger": "render.ReadPixel",
      "contents": "render.ReadPixel(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "render.PushFlashlightMode",
      "contents": "render.PushFlashlightMode(${1:boolean enable = false})"
    },
    {
      "trigger": "render.PushRenderTarget",
      "contents": "render.PushRenderTarget(${1:ITexture texture}, ${2:number x = 0}, ${3:number y = 0}, ${4:number w = texture:Width()}, ${5:number h = texture:Height()})"
    },
    {
      "trigger": "render.RedownloadAllLightmaps",
      "contents": "render.RedownloadAllLightmaps(${1:boolean DoStaticProps = false})"
    },
    {
      "trigger": "render.RenderView",
      "contents": "render.RenderView()"
    },
    {
      "trigger": "render.RenderHUD",
      "contents": "render.RenderHUD(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "render.ResetModelLighting",
      "contents": "render.ResetModelLighting(${1:number r}, ${2:number g}, ${3:number b})"
    },
    {
      "trigger": "render.ResetToneMappingScale",
      "contents": "render.ResetToneMappingScale(${1:number scale})"
    },
    {
      "trigger": "render.SetAmbientLight",
      "contents": "render.SetAmbientLight(${1:number r}, ${2:number g}, ${3:number b})"
    },
    {
      "trigger": "render.SetColorMaterial",
      "contents": "render.SetColorMaterial()"
    },
    {
      "trigger": "render.SetBlend",
      "contents": "render.SetBlend(${1:number blending})"
    },
    {
      "trigger": "render.SetColorMaterialIgnoreZ",
      "contents": "render.SetColorMaterialIgnoreZ()"
    },
    {
      "trigger": "render.SetColorModulation",
      "contents": "render.SetColorModulation(${1:number r}, ${2:number g}, ${3:number b})"
    },
    {
      "trigger": "render.SetFogZ",
      "contents": "render.SetFogZ(${1:number fogZ})"
    },
    {
      "trigger": "render.SetGoalToneMappingScale",
      "contents": "render.SetGoalToneMappingScale(${1:number scale})"
    },
    {
      "trigger": "render.SetLightingMode",
      "contents": "render.SetLightingMode(${1:number Mode})"
    },
    {
      "trigger": "render.SetLightingOrigin",
      "contents": "render.SetLightingOrigin(${1:Vector lightingOrigin})"
    },
    {
      "trigger": "render.SetLightmapTexture",
      "contents": "render.SetLightmapTexture(${1:ITexture tex})"
    },
    {
      "trigger": "render.SetLocalModelLights",
      "contents": "render.SetLocalModelLights()"
    },
    {
      "trigger": "render.SetMaterial",
      "contents": "render.SetMaterial(${1:IMaterial mat})"
    },
    {
      "trigger": "render.SetModelLighting",
      "contents": "render.SetModelLighting(${1:number red}, ${2:number green}, ${3:number blue})"
    },
    {
      "trigger": "render.SetRenderTarget",
      "contents": "render.SetRenderTarget(${1:ITexture texture})"
    },
    {
      "trigger": "render.SetRenderTargetEx",
      "contents": "render.SetRenderTargetEx(${1:number rtIndex}, ${2:ITexture texture})"
    },
    {
      "trigger": "render.SetScissorRect",
      "contents": "render.SetScissorRect(${1:number startX}, ${2:number startY}, ${3:number endX}, ${4:number endY}, ${5:boolean enable})"
    },
    {
      "trigger": "render.SetShadowColor",
      "contents": "render.SetShadowColor(${1:number red}, ${2:number green}, ${3:number blue})"
    },
    {
      "trigger": "render.SetShadowDirection",
      "contents": "render.SetShadowDirection(${1:Vector shadowDirections})"
    },
    {
      "trigger": "render.SetShadowDistance",
      "contents": "render.SetShadowDistance(${1:number shadowDistance})"
    },
    {
      "trigger": "render.SetShadowsDisabled",
      "contents": "render.SetShadowsDisabled(${1:boolean newState})"
    },
    {
      "trigger": "render.SetStencilCompareFunction",
      "contents": "render.SetStencilCompareFunction()"
    },
    {
      "trigger": "render.SetStencilEnable",
      "contents": "render.SetStencilEnable(${1:boolean newState})"
    },
    {
      "trigger": "render.SetStencilPassOperation",
      "contents": "render.SetStencilPassOperation()"
    },
    {
      "trigger": "render.SetStencilFailOperation",
      "contents": "render.SetStencilFailOperation()"
    },
    {
      "trigger": "render.SetStencilReferenceValue",
      "contents": "render.SetStencilReferenceValue(${1:number referenceValue})"
    },
    {
      "trigger": "render.SetStencilZFailOperation",
      "contents": "render.SetStencilZFailOperation()"
    },
    {
      "trigger": "render.SetStencilTestMask",
      "contents": "render.SetStencilTestMask(${1:number mask})"
    },
    {
      "trigger": "render.SetStencilWriteMask",
      "contents": "render.SetStencilWriteMask(${1:number mask})"
    },
    {
      "trigger": "render.SetWriteDepthToDestAlpha",
      "contents": "render.SetWriteDepthToDestAlpha(${1:boolean enable})"
    },
    {
      "trigger": "render.SetViewPort",
      "contents": "render.SetViewPort(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "render.SetToneMappingScaleLinear",
      "contents": "render.SetToneMappingScaleLinear(${1:Vector vec})"
    },
    {
      "trigger": "render.Spin",
      "contents": "render.Spin()"
    },
    {
      "trigger": "render.StartBeam",
      "contents": "render.StartBeam(${1:number segmentCount})"
    },
    {
      "trigger": "render.SupportsHDR",
      "contents": "render.SupportsHDR()"
    },
    {
      "trigger": "render.SuppressEngineLighting",
      "contents": "render.SuppressEngineLighting(${1:boolean suppressLighting})"
    },
    {
      "trigger": "render.TurnOnToneMapping",
      "contents": "render.TurnOnToneMapping()"
    },
    {
      "trigger": "render.UpdateFullScreenDepthTexture",
      "contents": "render.UpdateFullScreenDepthTexture()"
    },
    {
      "trigger": "render.UpdatePowerOfTwoTexture",
      "contents": "render.UpdatePowerOfTwoTexture()"
    },
    {
      "trigger": "render.UpdateRefractTexture",
      "contents": "render.UpdateRefractTexture()"
    },
    {
      "trigger": "render.UpdateScreenEffectTexture",
      "contents": "render.UpdateScreenEffectTexture()"
    },
    {
      "trigger": "resource.AddSingleFile",
      "contents": "resource.AddSingleFile(${1:string path})"
    },
    {
      "trigger": "resource.AddFile",
      "contents": "resource.AddFile(${1:string path})"
    },
    {
      "trigger": "resource.AddWorkshop",
      "contents": "resource.AddWorkshop(${1:string workshopid})"
    },
    {
      "trigger": "saverestore.AddRestoreHook",
      "contents": "saverestore.AddRestoreHook(${1:string identifier})"
    },
    {
      "trigger": "saverestore.AddSaveHook",
      "contents": "saverestore.AddSaveHook(${1:string identifier})"
    },
    {
      "trigger": "saverestore.LoadEntity",
      "contents": "saverestore.LoadEntity(${1:Entity ent})"
    },
    {
      "trigger": "saverestore.LoadGlobal",
      "contents": "saverestore.LoadGlobal(${1:IRestore save})"
    },
    {
      "trigger": "saverestore.PreRestore",
      "contents": "saverestore.PreRestore()"
    },
    {
      "trigger": "saverestore.PreSave",
      "contents": "saverestore.PreSave()"
    },
    {
      "trigger": "saverestore.ReadTable",
      "contents": "saverestore.ReadTable(${1:IRestore save})"
    },
    {
      "trigger": "saverestore.ReadVar",
      "contents": "saverestore.ReadVar(${1:IRestore save})"
    },
    {
      "trigger": "saverestore.SaveGlobal",
      "contents": "saverestore.SaveGlobal(${1:ISave save})"
    },
    {
      "trigger": "saverestore.SaveEntity",
      "contents": "saverestore.SaveEntity()"
    },
    {
      "trigger": "saverestore.WritableKeysInTable",
      "contents": "saverestore.WritableKeysInTable(${1:table table})"
    },
    {
      "trigger": "saverestore.WriteTable",
      "contents": "saverestore.WriteTable(${1:table table}, ${2:ISave save})"
    },
    {
      "trigger": "saverestore.WriteVar",
      "contents": "saverestore.WriteVar(${1:ISave save})"
    },
    {
      "trigger": "search.AddProvider",
      "contents": "search.AddProvider(${1:string id = nil})"
    },
    {
      "trigger": "search.GetResults",
      "contents": "search.GetResults(${1:string query})"
    },
    {
      "trigger": "serverlist.AddCurrentServerToFavorites",
      "contents": "serverlist.AddCurrentServerToFavorites()"
    },
    {
      "trigger": "serverlist.PlayerList",
      "contents": "serverlist.PlayerList(${1:string ip})"
    },
    {
      "trigger": "serverlist.Query",
      "contents": "serverlist.Query()"
    },
    {
      "trigger": "sound.Add",
      "contents": "sound.Add()"
    },
    {
      "trigger": "sound.AddSoundOverrides",
      "contents": "sound.AddSoundOverrides(${1:string filepath})"
    },
    {
      "trigger": "sound.Generate",
      "contents": "sound.Generate(${1:string indentifier}, ${2:number samplerate}, ${3:number length}, ${4:function callback})"
    },
    {
      "trigger": "sound.GetProperties",
      "contents": "sound.GetProperties(${1:string name})"
    },
    {
      "trigger": "sound.GetTable",
      "contents": "sound.GetTable()"
    },
    {
      "trigger": "sound.Play",
      "contents": "sound.Play(${1:string Name}, ${2:Vector Pos}, ${3:number Level}, ${4:number Pitch}, ${5:number Volume})"
    },
    {
      "trigger": "sound.PlayFile",
      "contents": "sound.PlayFile(${1:string path})"
    },
    {
      "trigger": "sound.PlayURL",
      "contents": "sound.PlayURL(${1:string url})"
    },
    {
      "trigger": "spawnmenu.ActivateTool",
      "contents": "spawnmenu.ActivateTool(${1:string tool})"
    },
    {
      "trigger": "spawnmenu.ActivateToolPanel",
      "contents": "spawnmenu.ActivateToolPanel(${1:number tab}, ${2:Panel cp})"
    },
    {
      "trigger": "spawnmenu.ActiveControlPanel",
      "contents": "spawnmenu.ActiveControlPanel()"
    },
    {
      "trigger": "spawnmenu.AddContentType",
      "contents": "spawnmenu.AddContentType(${1:string name})"
    },
    {
      "trigger": "spawnmenu.AddPropCategory",
      "contents": "spawnmenu.AddPropCategory(${1:string classname}, ${2:string name}, ${3:string icon}, ${4:number id = 1000}, ${5:number parentID = 0}, ${6:string needsApp = \"\"})"
    },
    {
      "trigger": "spawnmenu.AddCreationTab",
      "contents": "spawnmenu.AddCreationTab(${1:string name}, ${2:function function}, ${3:string material = \"icon16/exclamation.png\"}, ${4:number order = 1000}, ${5:string tooltip = nil})"
    },
    {
      "trigger": "spawnmenu.AddToolMenuOption",
      "contents": "spawnmenu.AddToolMenuOption(${1:string tab}, ${2:string category}, ${3:string class}, ${4:string name}, ${5:string cmd})"
    },
    {
      "trigger": "spawnmenu.AddToolCategory",
      "contents": "spawnmenu.AddToolCategory(${1:string RealName}, ${2:string PrintName})"
    },
    {
      "trigger": "spawnmenu.AddToolTab",
      "contents": "spawnmenu.AddToolTab(${1:string name}, ${2:string icon = \"icon16/wrench.png\"})"
    },
    {
      "trigger": "spawnmenu.ClearToolMenus",
      "contents": "spawnmenu.ClearToolMenus()"
    },
    {
      "trigger": "spawnmenu.CreateContentIcon",
      "contents": "spawnmenu.CreateContentIcon(${1:string type}, ${2:Panel parent})"
    },
    {
      "trigger": "spawnmenu.DoSaveToTextFiles",
      "contents": "spawnmenu.DoSaveToTextFiles(${1:table spawnlists})"
    },
    {
      "trigger": "spawnmenu.GetContentType",
      "contents": "spawnmenu.GetContentType(${1:string contentType})"
    },
    {
      "trigger": "spawnmenu.GetCustomPropTable",
      "contents": "spawnmenu.GetCustomPropTable()"
    },
    {
      "trigger": "spawnmenu.GetCreationTabs",
      "contents": "spawnmenu.GetCreationTabs()"
    },
    {
      "trigger": "spawnmenu.GetToolMenu",
      "contents": "spawnmenu.GetToolMenu(${1:string name}, ${2:string label = name}, ${3:string icon = \"icon16/wrench.png\"})"
    },
    {
      "trigger": "spawnmenu.GetPropTable",
      "contents": "spawnmenu.GetPropTable()"
    },
    {
      "trigger": "spawnmenu.GetTools",
      "contents": "spawnmenu.GetTools()"
    },
    {
      "trigger": "spawnmenu.PopulateFromEngineTextFiles",
      "contents": "spawnmenu.PopulateFromEngineTextFiles()"
    },
    {
      "trigger": "spawnmenu.PopulateFromTextFiles",
      "contents": "spawnmenu.PopulateFromTextFiles(${1:function callback})"
    },
    {
      "trigger": "spawnmenu.SaveToTextFiles",
      "contents": "spawnmenu.SaveToTextFiles(${1:table spawnlists})"
    },
    {
      "trigger": "spawnmenu.SetActiveControlPanel",
      "contents": "spawnmenu.SetActiveControlPanel(${1:Panel pnl})"
    },
    {
      "trigger": "spawnmenu.SwitchToolTab",
      "contents": "spawnmenu.SwitchToolTab(${1:number id})"
    },
    {
      "trigger": "sql.Begin",
      "contents": "sql.Begin()"
    },
    {
      "trigger": "sql.LastError",
      "contents": "sql.LastError()"
    },
    {
      "trigger": "sql.Commit",
      "contents": "sql.Commit()"
    },
    {
      "trigger": "sql.Query",
      "contents": "sql.Query(${1:string query})"
    },
    {
      "trigger": "sql.QueryRow",
      "contents": "sql.QueryRow(${1:string query}, ${2:number row = 1})"
    },
    {
      "trigger": "sql.QueryValue",
      "contents": "sql.QueryValue(${1:string query})"
    },
    {
      "trigger": "sql.SQLStr",
      "contents": "sql.SQLStr(${1:string string}, ${2:boolean bNoQuotes = false})"
    },
    {
      "trigger": "sql.TableExists",
      "contents": "sql.TableExists(${1:string tableName})"
    },
    {
      "trigger": "steamworks.ApplyAddons",
      "contents": "steamworks.ApplyAddons()"
    },
    {
      "trigger": "steamworks.Download",
      "contents": "steamworks.Download(${1:string workshopPreviewID}, ${2:boolean uncompress}, ${3:function resultCallback})"
    },
    {
      "trigger": "steamworks.FileInfo",
      "contents": "steamworks.FileInfo(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.GetList",
      "contents": "steamworks.GetList(${1:string type}, ${2:table tags}, ${3:number offset}, ${4:number numRetrieve}, ${5:number days}, ${6:string userID}, ${7:function resultCallback})"
    },
    {
      "trigger": "steamworks.GetPlayerName",
      "contents": "steamworks.GetPlayerName(${1:string steamID64})"
    },
    {
      "trigger": "steamworks.OpenWorkshop",
      "contents": "steamworks.OpenWorkshop()"
    },
    {
      "trigger": "steamworks.IsSubscribed",
      "contents": "steamworks.IsSubscribed(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.Publish",
      "contents": "steamworks.Publish(${1:table tags}, ${2:string filename}, ${3:string image}, ${4:string name}, ${5:string desc})"
    },
    {
      "trigger": "steamworks.SetFilePlayed",
      "contents": "steamworks.SetFilePlayed(${1:string workshopid})"
    },
    {
      "trigger": "steamworks.RequestPlayerInfo",
      "contents": "steamworks.RequestPlayerInfo(${1:string steamID64})"
    },
    {
      "trigger": "steamworks.SetFileCompleted",
      "contents": "steamworks.SetFileCompleted(${1:string workshopid})"
    },
    {
      "trigger": "steamworks.SetShouldMountAddon",
      "contents": "steamworks.SetShouldMountAddon(${1:string workshopItemID}, ${2:boolean shouldMount})"
    },
    {
      "trigger": "steamworks.ShouldMountAddon",
      "contents": "steamworks.ShouldMountAddon(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.Subscribe",
      "contents": "steamworks.Subscribe(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.Unsubscribe",
      "contents": "steamworks.Unsubscribe(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.ViewFile",
      "contents": "steamworks.ViewFile(${1:string workshopItemID})"
    },
    {
      "trigger": "steamworks.Vote",
      "contents": "steamworks.Vote(${1:string workshopItemID}, ${2:boolean upOrDown})"
    },
    {
      "trigger": "steamworks.VoteInfo",
      "contents": "steamworks.VoteInfo(${1:string workshopItemID}, ${2:function resultCallback})"
    },
    {
      "trigger": "string.byte",
      "contents": "string.byte(${1:string string}, ${2:number startPos = 1}, ${3:number endPos = startPos})"
    },
    {
      "trigger": "string.char",
      "contents": "string.char(${1:vararg bytes})"
    },
    {
      "trigger": "string.Comma",
      "contents": "string.Comma(${1:number InputNumber})"
    },
    {
      "trigger": "string.dump",
      "contents": "string.dump(${1:function func}, ${2:boolean stripDebugInfo = false})"
    },
    {
      "trigger": "string.EndsWith",
      "contents": "string.EndsWith(${1:string str}, ${2:string end})"
    },
    {
      "trigger": "string.Explode",
      "contents": "string.Explode(${1:string separator}, ${2:string str}, ${3:boolean use_patterns})"
    },
    {
      "trigger": "string.find",
      "contents": "string.find(${1:string haystack}, ${2:string needle}, ${3:number startPos = 1}, ${4:boolean noPatterns = false})"
    },
    {
      "trigger": "string.format",
      "contents": "string.format(${1:string format}, ${2:vararg formatParameters})"
    },
    {
      "trigger": "string.FormattedTime",
      "contents": "string.FormattedTime(${1:number float}, ${2:string format = nil})"
    },
    {
      "trigger": "string.FromColor",
      "contents": "string.FromColor(${1:table color})"
    },
    {
      "trigger": "string.GetExtensionFromFilename",
      "contents": "string.GetExtensionFromFilename(${1:string file})"
    },
    {
      "trigger": "string.GetChar",
      "contents": "string.GetChar(${1:string str}, ${2:number index})"
    },
    {
      "trigger": "string.gfind",
      "contents": "string.gfind(${1:string data}, ${2:string pattern})"
    },
    {
      "trigger": "string.GetPathFromFilename",
      "contents": "string.GetPathFromFilename(${1:string Inputstring})"
    },
    {
      "trigger": "string.GetFileFromFilename",
      "contents": "string.GetFileFromFilename(${1:string pathString})"
    },
    {
      "trigger": "string.gsub",
      "contents": "string.gsub(${1:string string}, ${2:string pattern}, ${3:string replacement}, ${4:number maxReplaces = nil})"
    },
    {
      "trigger": "string.gmatch",
      "contents": "string.gmatch(${1:string data}, ${2:string pattern})"
    },
    {
      "trigger": "string.JavascriptSafe",
      "contents": "string.JavascriptSafe(${1:string str})"
    },
    {
      "trigger": "string.Implode",
      "contents": "string.Implode(${1:string separator = \"\"}, ${2:table pieces})"
    },
    {
      "trigger": "string.Left",
      "contents": "string.Left(${1:string str}, ${2:number num})"
    },
    {
      "trigger": "string.len",
      "contents": "string.len(${1:string str})"
    },
    {
      "trigger": "string.lower",
      "contents": "string.lower(${1:string str})"
    },
    {
      "trigger": "string.NiceSize",
      "contents": "string.NiceSize(${1:number bytes})"
    },
    {
      "trigger": "string.match",
      "contents": "string.match(${1:string string}, ${2:string pattern}, ${3:number startPosition = 1})"
    },
    {
      "trigger": "string.PatternSafe",
      "contents": "string.PatternSafe(${1:string str})"
    },
    {
      "trigger": "string.NiceTime",
      "contents": "string.NiceTime(${1:number num})"
    },
    {
      "trigger": "string.rep",
      "contents": "string.rep(${1:string str}, ${2:number repetitions}, ${3:string separator = \"\"})"
    },
    {
      "trigger": "string.Replace",
      "contents": "string.Replace(${1:string str}, ${2:string find}, ${3:string replace})"
    },
    {
      "trigger": "string.reverse",
      "contents": "string.reverse(${1:string str})"
    },
    {
      "trigger": "string.Right",
      "contents": "string.Right(${1:string str}, ${2:number num})"
    },
    {
      "trigger": "string.SetChar",
      "contents": "string.SetChar(${1:string InputString}, ${2:number Index}, ${3:string ReplacementChar})"
    },
    {
      "trigger": "string.Split",
      "contents": "string.Split(${1:string Inputstring}, ${2:string Separator})"
    },
    {
      "trigger": "string.StartWith",
      "contents": "string.StartWith(${1:string inputStr}, ${2:string start})"
    },
    {
      "trigger": "string.StripExtension",
      "contents": "string.StripExtension(${1:string Inputstring})"
    },
    {
      "trigger": "string.sub",
      "contents": "string.sub(${1:string string}, ${2:number StartPos}, ${3:number EndPos = nil})"
    },
    {
      "trigger": "string.ToColor",
      "contents": "string.ToColor(${1:string Inputstring})"
    },
    {
      "trigger": "string.ToMinutesSecondsMilliseconds",
      "contents": "string.ToMinutesSecondsMilliseconds(${1:number time})"
    },
    {
      "trigger": "string.ToMinutesSeconds",
      "contents": "string.ToMinutesSeconds(${1:number time})"
    },
    {
      "trigger": "string.ToTable",
      "contents": "string.ToTable(${1:string str})"
    },
    {
      "trigger": "string.TrimLeft",
      "contents": "string.TrimLeft(${1:string str}, ${2:string char = \" \"})"
    },
    {
      "trigger": "string.Trim",
      "contents": "string.Trim(${1:string Inputstring}, ${2:string Char = \" \"})"
    },
    {
      "trigger": "string.TrimRight",
      "contents": "string.TrimRight(${1:string str}, ${2:string char = \" \"})"
    },
    {
      "trigger": "string.upper",
      "contents": "string.upper(${1:string str})"
    },
    {
      "trigger": "surface.CreateFont",
      "contents": "surface.CreateFont(${1:string fontName})"
    },
    {
      "trigger": "surface.DisableClipping",
      "contents": "surface.DisableClipping(${1:boolean disable})"
    },
    {
      "trigger": "surface.DrawCircle",
      "contents": "surface.DrawCircle(${1:number originX}, ${2:number originY}, ${3:number radius})"
    },
    {
      "trigger": "surface.DrawLine",
      "contents": "surface.DrawLine(${1:number startX}, ${2:number startY}, ${3:number endX}, ${4:number endY})"
    },
    {
      "trigger": "surface.DrawOutlinedRect",
      "contents": "surface.DrawOutlinedRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "surface.DrawPoly",
      "contents": "surface.DrawPoly()"
    },
    {
      "trigger": "surface.DrawText",
      "contents": "surface.DrawText(${1:string text})"
    },
    {
      "trigger": "surface.DrawRect",
      "contents": "surface.DrawRect(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "surface.DrawTexturedRect",
      "contents": "surface.DrawTexturedRect(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "surface.DrawTexturedRectRotated",
      "contents": "surface.DrawTexturedRectRotated(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number rotation})"
    },
    {
      "trigger": "surface.DrawTexturedRectUV",
      "contents": "surface.DrawTexturedRectUV(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number startU}, ${6:number startV}, ${7:number endU}, ${8:number endV})"
    },
    {
      "trigger": "surface.GetAlphaMultiplier",
      "contents": "surface.GetAlphaMultiplier()"
    },
    {
      "trigger": "surface.GetDrawColor",
      "contents": "surface.GetDrawColor()"
    },
    {
      "trigger": "surface.GetHUDTexture",
      "contents": "surface.GetHUDTexture(${1:string name})"
    },
    {
      "trigger": "surface.GetTextColor",
      "contents": "surface.GetTextColor()"
    },
    {
      "trigger": "surface.GetTextSize",
      "contents": "surface.GetTextSize(${1:string text})"
    },
    {
      "trigger": "surface.GetTextureID",
      "contents": "surface.GetTextureID(${1:string name/path})"
    },
    {
      "trigger": "surface.GetTextureSize",
      "contents": "surface.GetTextureSize()"
    },
    {
      "trigger": "surface.PlaySound",
      "contents": "surface.PlaySound(${1:string soundfile})"
    },
    {
      "trigger": "surface.ScreenHeight",
      "contents": "surface.ScreenHeight()"
    },
    {
      "trigger": "surface.SetAlphaMultiplier",
      "contents": "surface.SetAlphaMultiplier(${1:number multiplier})"
    },
    {
      "trigger": "surface.SetDrawColor",
      "contents": "surface.SetDrawColor()"
    },
    {
      "trigger": "surface.SetFont",
      "contents": "surface.SetFont(${1:string fontName})"
    },
    {
      "trigger": "surface.SetMaterial",
      "contents": "surface.SetMaterial(${1:IMaterial material})"
    },
    {
      "trigger": "surface.SetTextColor",
      "contents": "surface.SetTextColor(${1:number g}, ${2:number b}, ${3:number a = 255})"
    },
    {
      "trigger": "surface.SetTextPos",
      "contents": "surface.SetTextPos(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "surface.SetTexture",
      "contents": "surface.SetTexture()"
    },
    {
      "trigger": "system.AppTime",
      "contents": "system.AppTime()"
    },
    {
      "trigger": "system.BatteryPower",
      "contents": "system.BatteryPower()"
    },
    {
      "trigger": "system.FlashWindow",
      "contents": "system.FlashWindow()"
    },
    {
      "trigger": "system.GetCountry",
      "contents": "system.GetCountry()"
    },
    {
      "trigger": "system.HasFocus",
      "contents": "system.HasFocus()"
    },
    {
      "trigger": "system.IsLinux",
      "contents": "system.IsLinux()"
    },
    {
      "trigger": "system.IsOSX",
      "contents": "system.IsOSX()"
    },
    {
      "trigger": "system.IsWindowed",
      "contents": "system.IsWindowed()"
    },
    {
      "trigger": "system.IsWindows",
      "contents": "system.IsWindows()"
    },
    {
      "trigger": "surface.ScreenWidth",
      "contents": "surface.ScreenWidth()"
    },
    {
      "trigger": "system.SteamTime",
      "contents": "system.SteamTime()"
    },
    {
      "trigger": "system.UpTime",
      "contents": "system.UpTime()"
    },
    {
      "trigger": "table.Add",
      "contents": "table.Add(${1:table target}, ${2:table source})"
    },
    {
      "trigger": "table.ClearKeys",
      "contents": "table.ClearKeys(${1:table table}, ${2:boolean saveKeys = false})"
    },
    {
      "trigger": "table.CollapseKeyValue",
      "contents": "table.CollapseKeyValue(${1:table input})"
    },
    {
      "trigger": "table.concat",
      "contents": "table.concat(${1:table tbl}, ${2:string concatenator = \"\"}, ${3:number startPos = 1}, ${4:number endPos = #tbl})"
    },
    {
      "trigger": "table.Copy",
      "contents": "table.Copy(${1:table originalTable})"
    },
    {
      "trigger": "table.CopyFromTo",
      "contents": "table.CopyFromTo(${1:table source}, ${2:table target})"
    },
    {
      "trigger": "table.Count",
      "contents": "table.Count(${1:table tbl})"
    },
    {
      "trigger": "table.DeSanitise",
      "contents": "table.DeSanitise(${1:table tbl})"
    },
    {
      "trigger": "table.Empty",
      "contents": "table.Empty(${1:table tbl})"
    },
    {
      "trigger": "table.FindNext",
      "contents": "table.FindNext(${1:table tbl}, ${2:any value})"
    },
    {
      "trigger": "table.FindPrev",
      "contents": "table.FindPrev(${1:table tbl}, ${2:any value})"
    },
    {
      "trigger": "table.ForceInsert",
      "contents": "table.ForceInsert(${1:any value})"
    },
    {
      "trigger": "table.foreach",
      "contents": "table.foreach(${1:table tbl}, ${2:function callback})"
    },
    {
      "trigger": "table.ForEach",
      "contents": "table.ForEach(${1:table tab})"
    },
    {
      "trigger": "table.GetFirstKey",
      "contents": "table.GetFirstKey(${1:table tab})"
    },
    {
      "trigger": "table.foreachi",
      "contents": "table.foreachi(${1:table table}, ${2:function func})"
    },
    {
      "trigger": "table.GetFirstValue",
      "contents": "table.GetFirstValue(${1:table tab})"
    },
    {
      "trigger": "table.GetKeys",
      "contents": "table.GetKeys(${1:table tabl})"
    },
    {
      "trigger": "table.GetLastKey",
      "contents": "table.GetLastKey(${1:table tab})"
    },
    {
      "trigger": "table.GetLastValue",
      "contents": "table.GetLastValue(${1:table tab})"
    },
    {
      "trigger": "table.getn",
      "contents": "table.getn(${1:table tbl})"
    },
    {
      "trigger": "table.GetWinningKey",
      "contents": "table.GetWinningKey(${1:table inputTable})"
    },
    {
      "trigger": "table.HasValue",
      "contents": "table.HasValue(${1:table tbl}, ${2:any value})"
    },
    {
      "trigger": "table.Inherit",
      "contents": "table.Inherit(${1:table target}, ${2:table base})"
    },
    {
      "trigger": "table.insert",
      "contents": "table.insert(${1:table tbl}, ${2:number position}, ${3:any value})"
    },
    {
      "trigger": "table.IsEmpty",
      "contents": "table.IsEmpty(${1:table tab})"
    },
    {
      "trigger": "table.IsSequential",
      "contents": "table.IsSequential(${1:table tab})"
    },
    {
      "trigger": "table.KeyFromValue",
      "contents": "table.KeyFromValue(${1:table tab}, ${2:any value})"
    },
    {
      "trigger": "table.KeysFromValue",
      "contents": "table.KeysFromValue(${1:table tab}, ${2:any value})"
    },
    {
      "trigger": "table.LowerKeyNames",
      "contents": "table.LowerKeyNames(${1:table tbl})"
    },
    {
      "trigger": "table.maxn",
      "contents": "table.maxn(${1:table tbl})"
    },
    {
      "trigger": "table.Merge",
      "contents": "table.Merge(${1:table destination}, ${2:table source})"
    },
    {
      "trigger": "table.Random",
      "contents": "table.Random(${1:table haystack})"
    },
    {
      "trigger": "table.remove",
      "contents": "table.remove(${1:table tbl}, ${2:number index = #tbl})"
    },
    {
      "trigger": "table.Reverse",
      "contents": "table.Reverse(${1:table tbl})"
    },
    {
      "trigger": "table.RemoveByValue",
      "contents": "table.RemoveByValue(${1:table tbl}, ${2:any val})"
    },
    {
      "trigger": "table.Sanitise",
      "contents": "table.Sanitise(${1:table tab})"
    },
    {
      "trigger": "table.sort",
      "contents": "table.sort(${1:table tbl}, ${2:function sorter})"
    },
    {
      "trigger": "table.SortByKey",
      "contents": "table.SortByKey(${1:table tab}, ${2:boolean descending = false})"
    },
    {
      "trigger": "table.SortByMember",
      "contents": "table.SortByMember(${1:table tab}, ${2:any memberKey}, ${3:boolean ascending = false})"
    },
    {
      "trigger": "table.SortDesc",
      "contents": "table.SortDesc(${1:table tbl})"
    },
    {
      "trigger": "table.ToString",
      "contents": "table.ToString(${1:table tbl}, ${2:string displayName}, ${3:boolean niceFormatting})"
    },
    {
      "trigger": "team.AddScore",
      "contents": "team.AddScore(${1:number index}, ${2:number increment})"
    },
    {
      "trigger": "team.BestAutoJoinTeam",
      "contents": "team.BestAutoJoinTeam()"
    },
    {
      "trigger": "team.GetAllTeams",
      "contents": "team.GetAllTeams()"
    },
    {
      "trigger": "team.GetClass",
      "contents": "team.GetClass(${1:number index})"
    },
    {
      "trigger": "team.GetColor",
      "contents": "team.GetColor(${1:number teamIndex})"
    },
    {
      "trigger": "team.GetName",
      "contents": "team.GetName(${1:number teamIndex})"
    },
    {
      "trigger": "team.GetPlayers",
      "contents": "team.GetPlayers(${1:number teamIndex})"
    },
    {
      "trigger": "team.GetScore",
      "contents": "team.GetScore(${1:number teamIndex})"
    },
    {
      "trigger": "team.GetSpawnPoint",
      "contents": "team.GetSpawnPoint(${1:number index})"
    },
    {
      "trigger": "team.GetSpawnPoints",
      "contents": "team.GetSpawnPoints(${1:number index})"
    },
    {
      "trigger": "team.NumPlayers",
      "contents": "team.NumPlayers(${1:number teamIndex})"
    },
    {
      "trigger": "team.Joinable",
      "contents": "team.Joinable(${1:number index})"
    },
    {
      "trigger": "team.SetClass",
      "contents": "team.SetClass(${1:number index}, ${2:any classes})"
    },
    {
      "trigger": "team.SetScore",
      "contents": "team.SetScore(${1:number index}, ${2:number score})"
    },
    {
      "trigger": "team.SetColor",
      "contents": "team.SetColor(${1:number teamIndex})"
    },
    {
      "trigger": "team.SetSpawnPoint",
      "contents": "team.SetSpawnPoint(${1:number index}, ${2:any classes})"
    },
    {
      "trigger": "team.SetUp",
      "contents": "team.SetUp(${1:number teamIndex}, ${2:string teamName}, ${3:boolean isJoinable = true})"
    },
    {
      "trigger": "team.TotalDeaths",
      "contents": "team.TotalDeaths(${1:number teamIndex})"
    },
    {
      "trigger": "team.TotalFrags",
      "contents": "team.TotalFrags(${1:Entity Entity or number})"
    },
    {
      "trigger": "team.Valid",
      "contents": "team.Valid(${1:number index})"
    },
    {
      "trigger": "timer.Adjust",
      "contents": "timer.Adjust(${1:any identifier}, ${2:number delay}, ${3:number repetitions}, ${4:function func})"
    },
    {
      "trigger": "timer.Create",
      "contents": "timer.Create(${1:string identifier}, ${2:number delay}, ${3:number repetitions}, ${4:function func})"
    },
    {
      "trigger": "timer.Check",
      "contents": "timer.Check()"
    },
    {
      "trigger": "timer.Destroy",
      "contents": "timer.Destroy(${1:string identifier})"
    },
    {
      "trigger": "timer.Exists",
      "contents": "timer.Exists(${1:string identifier})"
    },
    {
      "trigger": "timer.Pause",
      "contents": "timer.Pause(${1:any identifier})"
    },
    {
      "trigger": "timer.Remove",
      "contents": "timer.Remove(${1:string identifier})"
    },
    {
      "trigger": "timer.Simple",
      "contents": "timer.Simple(${1:function func})"
    },
    {
      "trigger": "timer.RepsLeft",
      "contents": "timer.RepsLeft(${1:any identifier})"
    },
    {
      "trigger": "timer.Start",
      "contents": "timer.Start(${1:any identifier})"
    },
    {
      "trigger": "timer.Stop",
      "contents": "timer.Stop(${1:any identifier})"
    },
    {
      "trigger": "timer.TimeLeft",
      "contents": "timer.TimeLeft(${1:any identifier})"
    },
    {
      "trigger": "timer.Toggle",
      "contents": "timer.Toggle(${1:any identifier})"
    },
    {
      "trigger": "timer.UnPause",
      "contents": "timer.UnPause(${1:any identifier})"
    },
    {
      "trigger": "umsg.Angle",
      "contents": "umsg.Angle(${1:Angle angle})"
    },
    {
      "trigger": "umsg.Bool",
      "contents": "umsg.Bool(${1:boolean bool})"
    },
    {
      "trigger": "umsg.Char",
      "contents": "umsg.Char(${1:number char})"
    },
    {
      "trigger": "umsg.End",
      "contents": "umsg.End()"
    },
    {
      "trigger": "umsg.Entity",
      "contents": "umsg.Entity(${1:Entity entity})"
    },
    {
      "trigger": "umsg.Float",
      "contents": "umsg.Float(${1:number float})"
    },
    {
      "trigger": "umsg.Long",
      "contents": "umsg.Long(${1:number int})"
    },
    {
      "trigger": "umsg.PoolString",
      "contents": "umsg.PoolString(${1:string string})"
    },
    {
      "trigger": "umsg.Short",
      "contents": "umsg.Short(${1:number short})"
    },
    {
      "trigger": "umsg.Start",
      "contents": "umsg.Start(${1:string name})"
    },
    {
      "trigger": "umsg.String",
      "contents": "umsg.String(${1:string string})"
    },
    {
      "trigger": "umsg.Vector",
      "contents": "umsg.Vector(${1:Vector vector})"
    },
    {
      "trigger": "umsg.VectorNormal",
      "contents": "umsg.VectorNormal(${1:Vector normal})"
    },
    {
      "trigger": "undo.AddEntity",
      "contents": "undo.AddEntity(${1:Entity ent})"
    },
    {
      "trigger": "undo.Create",
      "contents": "undo.Create(${1:string name})"
    },
    {
      "trigger": "undo.AddFunction",
      "contents": "undo.AddFunction(${1:function func}, ${2:vararg arguments})"
    },
    {
      "trigger": "undo.Finish",
      "contents": "undo.Finish()"
    },
    {
      "trigger": "undo.GetTable",
      "contents": "undo.GetTable()"
    },
    {
      "trigger": "undo.ReplaceEntity",
      "contents": "undo.ReplaceEntity(${1:Entity from}, ${2:Entity to})"
    },
    {
      "trigger": "undo.MakeUIDirty",
      "contents": "undo.MakeUIDirty()"
    },
    {
      "trigger": "undo.SetCustomUndoText",
      "contents": "undo.SetCustomUndoText(${1:string customText})"
    },
    {
      "trigger": "undo.SetPlayer",
      "contents": "undo.SetPlayer(${1:Player ply})"
    },
    {
      "trigger": "undo.SetupUI",
      "contents": "undo.SetupUI()"
    },
    {
      "trigger": "usermessage.GetTable",
      "contents": "usermessage.GetTable()"
    },
    {
      "trigger": "usermessage.Hook",
      "contents": "usermessage.Hook(${1:string name}, ${2:vararg preArgs = nil})"
    },
    {
      "trigger": "util.AddNetworkString",
      "contents": "util.AddNetworkString(${1:string str})"
    },
    {
      "trigger": "usermessage.IncomingMessage",
      "contents": "usermessage.IncomingMessage(${1:string name}, ${2:bf_read msg})"
    },
    {
      "trigger": "util.AimVector",
      "contents": "util.AimVector(${1:Angle ViewAngles}, ${2:number ViewFOV}, ${3:number x}, ${4:number y}, ${5:number scrWidth}, ${6:number scrHeight})"
    },
    {
      "trigger": "util.BlastDamage",
      "contents": "util.BlastDamage(${1:Entity inflictor}, ${2:Entity attacker}, ${3:Vector damageOrigin}, ${4:number damageRadius}, ${5:number damage})"
    },
    {
      "trigger": "util.BlastDamageInfo",
      "contents": "util.BlastDamageInfo(${1:CTakeDamageInfo dmg}, ${2:Vector damageOrigin}, ${3:number damageRadius})"
    },
    {
      "trigger": "util.Compress",
      "contents": "util.Compress(${1:string str})"
    },
    {
      "trigger": "util.DateStamp",
      "contents": "util.DateStamp()"
    },
    {
      "trigger": "util.CRC",
      "contents": "util.CRC(${1:string stringToHash})"
    },
    {
      "trigger": "util.Decal",
      "contents": "util.Decal(${1:string name}, ${2:Vector start}, ${3:Vector end}, ${4:Entity filter = NULL})"
    },
    {
      "trigger": "util.DecalEx",
      "contents": "util.DecalEx(${1:Entity ent}, ${2:Vector position}, ${3:Vector normal}, ${4:number w}, ${5:number h})"
    },
    {
      "trigger": "util.DecalMaterial",
      "contents": "util.DecalMaterial(${1:string decalName})"
    },
    {
      "trigger": "util.Decompress",
      "contents": "util.Decompress(${1:string compressedString}, ${2:number maxSize = nil})"
    },
    {
      "trigger": "util.DistanceToLine",
      "contents": "util.DistanceToLine(${1:Vector lineStart}, ${2:Vector lineEnd}, ${3:Vector pointPos})"
    },
    {
      "trigger": "util.Effect",
      "contents": "util.Effect(${1:string effectName}, ${2:CEffectData effectData}, ${3:boolean allowOverride = true})"
    },
    {
      "trigger": "util.GetModelInfo",
      "contents": "util.GetModelInfo(${1:string mdl})"
    },
    {
      "trigger": "util.GetModelMeshes",
      "contents": "util.GetModelMeshes(${1:string model}, ${2:number lod = 0}, ${3:number bodygroupMask = 0})"
    },
    {
      "trigger": "util.GetPData",
      "contents": "util.GetPData(${1:string steamID}, ${2:string name}, ${3:string default})"
    },
    {
      "trigger": "util.GetPixelVisibleHandle",
      "contents": "util.GetPixelVisibleHandle()"
    },
    {
      "trigger": "util.GetPlayerTrace",
      "contents": "util.GetPlayerTrace(${1:Player ply}, ${2:Vector dir = ply:GetAimVector()})"
    },
    {
      "trigger": "util.GetSunInfo",
      "contents": "util.GetSunInfo()"
    },
    {
      "trigger": "util.GetSurfaceData",
      "contents": "util.GetSurfaceData()"
    },
    {
      "trigger": "util.GetSurfaceIndex",
      "contents": "util.GetSurfaceIndex(${1:string surfaceName})"
    },
    {
      "trigger": "util.GetSurfacePropName",
      "contents": "util.GetSurfacePropName()"
    },
    {
      "trigger": "util.GetUserGroups",
      "contents": "util.GetUserGroups()"
    },
    {
      "trigger": "util.IntersectRayWithPlane",
      "contents": "util.IntersectRayWithPlane(${1:Vector rayOrigin}, ${2:Vector rayDirection}, ${3:Vector planePosition}, ${4:Vector planeNormal})"
    },
    {
      "trigger": "util.IntersectRayWithOBB",
      "contents": "util.IntersectRayWithOBB(${1:Vector rayStart}, ${2:Vector rayDelta}, ${3:Vector boxOrigin}, ${4:Angle boxAngles}, ${5:Vector boxMins}, ${6:Vector boxMaxs})"
    },
    {
      "trigger": "util.IsInWorld",
      "contents": "util.IsInWorld(${1:Vector position})"
    },
    {
      "trigger": "util.IsModelLoaded",
      "contents": "util.IsModelLoaded(${1:string modelName})"
    },
    {
      "trigger": "util.IsSkyboxVisibleFromPoint",
      "contents": "util.IsSkyboxVisibleFromPoint(${1:Vector position})"
    },
    {
      "trigger": "util.IsValidModel",
      "contents": "util.IsValidModel(${1:string modelName})"
    },
    {
      "trigger": "util.IsValidPhysicsObject",
      "contents": "util.IsValidPhysicsObject(${1:Entity ent}, ${2:number physobj})"
    },
    {
      "trigger": "util.IsValidProp",
      "contents": "util.IsValidProp(${1:string modelName})"
    },
    {
      "trigger": "util.IsValidRagdoll",
      "contents": "util.IsValidRagdoll(${1:string ragdollName})"
    },
    {
      "trigger": "util.JSONToTable",
      "contents": "util.JSONToTable(${1:string json})"
    },
    {
      "trigger": "util.KeyValuesToTable",
      "contents": "util.KeyValuesToTable(${1:string keyValues}, ${2:boolean usesEscapeSequences = false}, ${3:boolean preserveKeyCase = false})"
    },
    {
      "trigger": "util.KeyValuesToTablePreserveOrder",
      "contents": "util.KeyValuesToTablePreserveOrder(${1:string keyvals}, ${2:boolean usesEscapeSequences = false}, ${3:boolean preserveKeyCase = false})"
    },
    {
      "trigger": "util.LocalToWorld",
      "contents": "util.LocalToWorld(${1:Entity ent}, ${2:Vector lpos}, ${3:number bonenum})"
    },
    {
      "trigger": "util.NetworkIDToString",
      "contents": "util.NetworkIDToString(${1:number stringTableID})"
    },
    {
      "trigger": "util.NetworkStringToID",
      "contents": "util.NetworkStringToID(${1:string networkString})"
    },
    {
      "trigger": "util.NiceFloat",
      "contents": "util.NiceFloat(${1:number float})"
    },
    {
      "trigger": "util.ParticleTracer",
      "contents": "util.ParticleTracer(${1:string name}, ${2:Vector startPos}, ${3:Vector endPos}, ${4:boolean doWhiz})"
    },
    {
      "trigger": "util.ParticleTracerEx",
      "contents": "util.ParticleTracerEx(${1:string name}, ${2:Vector startPos}, ${3:Vector endPos}, ${4:boolean doWhiz}, ${5:number entityIndex}, ${6:number attachmentIndex})"
    },
    {
      "trigger": "util.PixelVisible",
      "contents": "util.PixelVisible(${1:Vector position}, ${2:number radius})"
    },
    {
      "trigger": "util.PrecacheModel",
      "contents": "util.PrecacheModel(${1:string modelName})"
    },
    {
      "trigger": "util.PointContents",
      "contents": "util.PointContents(${1:Vector position})"
    },
    {
      "trigger": "util.PrecacheSound",
      "contents": "util.PrecacheSound(${1:string soundName})"
    },
    {
      "trigger": "util.RelativePathToFull",
      "contents": "util.RelativePathToFull(${1:string file})"
    },
    {
      "trigger": "util.QuickTrace",
      "contents": "util.QuickTrace(${1:Vector origin}, ${2:Vector endpos})"
    },
    {
      "trigger": "util.RemovePData",
      "contents": "util.RemovePData(${1:string steamID}, ${2:string name})"
    },
    {
      "trigger": "util.SharedRandom",
      "contents": "util.SharedRandom(${1:string uniqueName}, ${2:number min}, ${3:number max}, ${4:number additionalSeed = 0})"
    },
    {
      "trigger": "util.SetPData",
      "contents": "util.SetPData(${1:string steamID}, ${2:string name}, ${3:any value})"
    },
    {
      "trigger": "util.ScreenShake",
      "contents": "util.ScreenShake(${1:number amplitude}, ${2:number frequency}, ${3:number duration})"
    },
    {
      "trigger": "util.StringToType",
      "contents": "util.StringToType(${1:string str}, ${2:string typename})"
    },
    {
      "trigger": "util.SpriteTrail",
      "contents": "util.SpriteTrail(${1:Entity ent}, ${2:number attachmentID}, ${3:boolean additive}, ${4:number startWidth}, ${5:number endWidth}, ${6:number lifetime}, ${7:number textureRes}, ${8:string texture})"
    },
    {
      "trigger": "util.Stack",
      "contents": "util.Stack()"
    },
    {
      "trigger": "util.TableToJSON",
      "contents": "util.TableToJSON(${1:table table}, ${2:boolean prettyPrint = false})"
    },
    {
      "trigger": "util.Timer",
      "contents": "util.Timer(${1:number startdelay = 0})"
    },
    {
      "trigger": "util.TableToKeyValues",
      "contents": "util.TableToKeyValues(${1:table table})"
    },
    {
      "trigger": "util.tobool",
      "contents": "util.tobool(${1:any input})"
    },
    {
      "trigger": "util.TraceEntity",
      "contents": "util.TraceEntity(${1:Entity ent})"
    },
    {
      "trigger": "util.TimerCycle",
      "contents": "util.TimerCycle()"
    },
    {
      "trigger": "util.TraceHull",
      "contents": "util.TraceHull()"
    },
    {
      "trigger": "util.TraceEntityHull",
      "contents": "util.TraceEntityHull(${1:Entity ent1}, ${2:Entity ent2})"
    },
    {
      "trigger": "util.TraceLine",
      "contents": "util.TraceLine()"
    },
    {
      "trigger": "vgui.Create",
      "contents": "vgui.Create(${1:string classname}, ${2:Panel parent = nil}, ${3:string name = nil})"
    },
    {
      "trigger": "util.TypeToString",
      "contents": "util.TypeToString(${1:any input})"
    },
    {
      "trigger": "vgui.CreateFromTable",
      "contents": "vgui.CreateFromTable(${1:table metatable}, ${2:Panel parent = nil}, ${3:string name = nil})"
    },
    {
      "trigger": "vgui.CursorVisible",
      "contents": "vgui.CursorVisible()"
    },
    {
      "trigger": "vgui.CreateX",
      "contents": "vgui.CreateX(${1:string class}, ${2:Panel parent = nil}, ${3:string name = nil})"
    },
    {
      "trigger": "vgui.FocusedHasParent",
      "contents": "vgui.FocusedHasParent(${1:Panel parent})"
    },
    {
      "trigger": "vgui.GetHoveredPanel",
      "contents": "vgui.GetHoveredPanel()"
    },
    {
      "trigger": "vgui.GetControlTable",
      "contents": "vgui.GetControlTable(${1:string Panelname})"
    },
    {
      "trigger": "vgui.GetKeyboardFocus",
      "contents": "vgui.GetKeyboardFocus()"
    },
    {
      "trigger": "vgui.GetWorldPanel",
      "contents": "vgui.GetWorldPanel()"
    },
    {
      "trigger": "vgui.IsHoveringWorld",
      "contents": "vgui.IsHoveringWorld()"
    },
    {
      "trigger": "vgui.Register",
      "contents": "vgui.Register(${1:string classname}, ${2:table panelTable}, ${3:string baseName})"
    },
    {
      "trigger": "vgui.RegisterFile",
      "contents": "vgui.RegisterFile(${1:string file})"
    },
    {
      "trigger": "vgui.RegisterTable",
      "contents": "vgui.RegisterTable(${1:table panel}, ${2:string base = Panel})"
    },
    {
      "trigger": "weapons.Get",
      "contents": "weapons.Get(${1:string classname})"
    },
    {
      "trigger": "video.Record",
      "contents": "video.Record()"
    },
    {
      "trigger": "weapons.GetList",
      "contents": "weapons.GetList()"
    },
    {
      "trigger": "weapons.GetStored",
      "contents": "weapons.GetStored(${1:string weapon_class})"
    },
    {
      "trigger": "weapons.IsBasedOn",
      "contents": "weapons.IsBasedOn(${1:string name}, ${2:string base})"
    },
    {
      "trigger": "weapons.OnLoaded",
      "contents": "weapons.OnLoaded()"
    },
    {
      "trigger": "weapons.Register",
      "contents": "weapons.Register(${1:table swep_table}, ${2:string classname})"
    },
    {
      "trigger": "widgets.PlayerTick",
      "contents": "widgets.PlayerTick(${1:Player ply}, ${2:CMoveData mv})"
    },
    {
      "trigger": "widgets.RenderMe",
      "contents": "widgets.RenderMe(${1:Entity ent})"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetContentType",
      "contents": "GetContentType()"
    },
    {
      "trigger": "GetNPCWeapon",
      "contents": "GetNPCWeapon()"
    },
    {
      "trigger": "GetSpawnName",
      "contents": "GetSpawnName()"
    },
    {
      "trigger": "SetAdminOnly",
      "contents": "SetAdminOnly(${1:boolean adminOnly})"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu()"
    },
    {
      "trigger": "SetContentType",
      "contents": "SetContentType(${1:string type})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string path})"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})"
    },
    {
      "trigger": "SetNPCWeapon",
      "contents": "SetNPCWeapon(${1:table weapons})"
    },
    {
      "trigger": "SetSpawnName",
      "contents": "SetSpawnName(${1:string name})"
    },
    {
      "trigger": "ControlValues",
      "contents": "ControlValues()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar()"
    },
    {
      "trigger": "ConVar",
      "contents": "ConVar()"
    },
    {
      "trigger": "TestForChanges",
      "contents": "TestForChanges()"
    },
    {
      "trigger": "AddControl",
      "contents": "AddControl(${1:string type})"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel panel})"
    },
    {
      "trigger": "FillViaFunction",
      "contents": "FillViaFunction()"
    },
    {
      "trigger": "GetEmbeddedPanel",
      "contents": "GetEmbeddedPanel()"
    },
    {
      "trigger": "ControlValues",
      "contents": "ControlValues()"
    },
    {
      "trigger": "MatSelect",
      "contents": "MatSelect()"
    },
    {
      "trigger": "AddConVar",
      "contents": "AddConVar(${1:string convar})"
    },
    {
      "trigger": "GetConVars",
      "contents": "GetConVars()"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string name})"
    },
    {
      "trigger": "FirstPersonControls",
      "contents": "FirstPersonControls()"
    },
    {
      "trigger": "CaptureMouse",
      "contents": "CaptureMouse()"
    },
    {
      "trigger": "GetFirstPerson",
      "contents": "GetFirstPerson()"
    },
    {
      "trigger": "SetFirstPerson",
      "contents": "SetFirstPerson()"
    },
    {
      "trigger": "GetBarColor",
      "contents": "GetBarColor()"
    },
    {
      "trigger": "SetBarColor",
      "contents": "SetBarColor()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:number alpha})"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number alpha})"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()"
    },
    {
      "trigger": "GetSelectedNumber",
      "contents": "GetSelectedNumber()"
    },
    {
      "trigger": "SetSelectedNumber",
      "contents": "SetSelectedNumber()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue()"
    },
    {
      "trigger": "OpenForPos",
      "contents": "OpenForPos(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()"
    },
    {
      "trigger": "UpdateText",
      "contents": "UpdateText()"
    },
    {
      "trigger": "IsDown",
      "contents": "IsDown()"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled()"
    },
    {
      "trigger": "SetConsoleCommand",
      "contents": "SetConsoleCommand(${1:string command}, ${2:string args})"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean draw})"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:string img = nil})"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string img = nil})"
    },
    {
      "trigger": "UpdateColours",
      "contents": "UpdateColours(${1:table skin})"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:string categoryName})"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel element})"
    },
    {
      "trigger": "UnselectAll",
      "contents": "UnselectAll()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:boolean bVal})"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:boolean checked})"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()"
    },
    {
      "trigger": "GetIndent",
      "contents": "GetIndent()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:boolean bVal})"
    },
    {
      "trigger": "SetBright",
      "contents": "SetBright(${1:boolean bright})"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string convar})"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean darkify})"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont(${1:string font})"
    },
    {
      "trigger": "SetIndent",
      "contents": "SetIndent(${1:number ident})"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor()"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:boolean checked})"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()"
    },
    {
      "trigger": "AnimSlide",
      "contents": "AnimSlide(${1:table anim}, ${2:number delta}, ${3:table data})"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:string name})"
    },
    {
      "trigger": "DoExpansion",
      "contents": "DoExpansion(${1:boolean expand})"
    },
    {
      "trigger": "GetAnimTime",
      "contents": "GetAnimTime()"
    },
    {
      "trigger": "GetExpanded",
      "contents": "GetExpanded()"
    },
    {
      "trigger": "GetList",
      "contents": "GetList()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()"
    },
    {
      "trigger": "GetStartHeight",
      "contents": "GetStartHeight()"
    },
    {
      "trigger": "OnToggle",
      "contents": "OnToggle()"
    },
    {
      "trigger": "SetAnimTime",
      "contents": "SetAnimTime(${1:number time})"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents(${1:Panel pnl})"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean expanded = true})"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string label})"
    },
    {
      "trigger": "SetList",
      "contents": "SetList(${1:Panel pnl})"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean paint})"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding})"
    },
    {
      "trigger": "SetStartHeight",
      "contents": "SetStartHeight(${1:number height})"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()"
    },
    {
      "trigger": "UnselectAll",
      "contents": "UnselectAll()"
    },
    {
      "trigger": "UpdateAltLines",
      "contents": "UpdateAltLines()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()"
    },
    {
      "trigger": "IsDown",
      "contents": "IsDown()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:boolean noTooltip = false})"
    },
    {
      "trigger": "SetID",
      "contents": "SetID(${1:number id})"
    },
    {
      "trigger": "BuildControls",
      "contents": "BuildControls()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:table newcol})"
    },
    {
      "trigger": "GetBaseRGB",
      "contents": "GetBaseRGB()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "GetHue",
      "contents": "GetHue()"
    },
    {
      "trigger": "GetRGB",
      "contents": "GetRGB()"
    },
    {
      "trigger": "OnUserChanged",
      "contents": "OnUserChanged()"
    },
    {
      "trigger": "SetBaseRGB",
      "contents": "SetBaseRGB()"
    },
    {
      "trigger": "SetHue",
      "contents": "SetHue(${1:number hue})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetRGB",
      "contents": "SetRGB()"
    },
    {
      "trigger": "UpdateColor",
      "contents": "UpdateColor(${1:number x = nil}, ${2:number y = nil})"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "GetAlphaBar",
      "contents": "GetAlphaBar()"
    },
    {
      "trigger": "DoConVarThink",
      "contents": "DoConVarThink(${1:string cvar})"
    },
    {
      "trigger": "ConVarThink",
      "contents": "ConVarThink()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetConVarA",
      "contents": "GetConVarA()"
    },
    {
      "trigger": "GetConVarB",
      "contents": "GetConVarB()"
    },
    {
      "trigger": "GetConVarR",
      "contents": "GetConVarR()"
    },
    {
      "trigger": "GetConVarG",
      "contents": "GetConVarG()"
    },
    {
      "trigger": "GetPalette",
      "contents": "GetPalette()"
    },
    {
      "trigger": "GetVector",
      "contents": "GetVector()"
    },
    {
      "trigger": "SetAlphaBar",
      "contents": "SetAlphaBar(${1:boolean show})"
    },
    {
      "trigger": "GetWangs",
      "contents": "GetWangs()"
    },
    {
      "trigger": "SetBaseColor",
      "contents": "SetBaseColor()"
    },
    {
      "trigger": "SetConVarA",
      "contents": "SetConVarA()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetConVarB",
      "contents": "SetConVarB()"
    },
    {
      "trigger": "SetConVarG",
      "contents": "SetConVarG()"
    },
    {
      "trigger": "SetConVarR",
      "contents": "SetConVarR()"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string text = nil})"
    },
    {
      "trigger": "SetPalette",
      "contents": "SetPalette(${1:boolean enabled})"
    },
    {
      "trigger": "SetVector",
      "contents": "SetVector(${1:Vector vec})"
    },
    {
      "trigger": "SetWangs",
      "contents": "SetWangs(${1:boolean show})"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues()"
    },
    {
      "trigger": "UpdateColor",
      "contents": "UpdateColor(${1:table clr})"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar(${1:string part})"
    },
    {
      "trigger": "UpdateConVars",
      "contents": "UpdateConVars()"
    },
    {
      "trigger": "ValueChanged",
      "contents": "ValueChanged()"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()"
    },
    {
      "trigger": "GetButtonSize",
      "contents": "GetButtonSize()"
    },
    {
      "trigger": "GetConVarA",
      "contents": "GetConVarA()"
    },
    {
      "trigger": "GetConVarB",
      "contents": "GetConVarB()"
    },
    {
      "trigger": "GetConVarG",
      "contents": "GetConVarG()"
    },
    {
      "trigger": "GetConVarR",
      "contents": "GetConVarR()"
    },
    {
      "trigger": "GetNumRows",
      "contents": "GetNumRows()"
    },
    {
      "trigger": "NetworkColorChange",
      "contents": "NetworkColorChange()"
    },
    {
      "trigger": "OnRightClickButton",
      "contents": "OnRightClickButton()"
    },
    {
      "trigger": "Reset",
      "contents": "Reset()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged()"
    },
    {
      "trigger": "ResetSavedColors",
      "contents": "ResetSavedColors()"
    },
    {
      "trigger": "SetButtonSize",
      "contents": "SetButtonSize(${1:number size})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table clr})"
    },
    {
      "trigger": "SaveColor",
      "contents": "SaveColor(${1:Panel btn}, ${2:table clr})"
    },
    {
      "trigger": "SetColorButtons",
      "contents": "SetColorButtons()"
    },
    {
      "trigger": "SetConVarA",
      "contents": "SetConVarA()"
    },
    {
      "trigger": "SetConVarB",
      "contents": "SetConVarB()"
    },
    {
      "trigger": "SetConVarG",
      "contents": "SetConVarG()"
    },
    {
      "trigger": "SetConVarR",
      "contents": "SetConVarR()"
    },
    {
      "trigger": "SetNumRows",
      "contents": "SetNumRows(${1:number rows})"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar(${1:string name}, ${2:string key})"
    },
    {
      "trigger": "UpdateConVars",
      "contents": "UpdateConVars()"
    },
    {
      "trigger": "AddSheet",
      "contents": "AddSheet(${1:string name}, ${2:string icon = nil})"
    },
    {
      "trigger": "GetActiveButton",
      "contents": "GetActiveButton()"
    },
    {
      "trigger": "UseButtonOnlyStyle",
      "contents": "UseButtonOnlyStyle()"
    },
    {
      "trigger": "SetActiveButton",
      "contents": "SetActiveButton(${1:Panel active})"
    },
    {
      "trigger": "AddChoice",
      "contents": "AddChoice(${1:string value}, ${2:boolean select = false}, ${3:Panel icon = nil})"
    },
    {
      "trigger": "ChooseOption",
      "contents": "ChooseOption(${1:string value}, ${2:number index})"
    },
    {
      "trigger": "ChooseOptionID",
      "contents": "ChooseOptionID(${1:number index})"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()"
    },
    {
      "trigger": "GetOptionData",
      "contents": "GetOptionData(${1:number index})"
    },
    {
      "trigger": "CloseMenu",
      "contents": "CloseMenu()"
    },
    {
      "trigger": "GetOptionText",
      "contents": "GetOptionText(${1:number index})"
    },
    {
      "trigger": "GetOptionTextByData",
      "contents": "GetOptionTextByData()"
    },
    {
      "trigger": "GetSelected",
      "contents": "GetSelected()"
    },
    {
      "trigger": "GetSelectedID",
      "contents": "GetSelectedID()"
    },
    {
      "trigger": "IsMenuOpen",
      "contents": "IsMenuOpen()"
    },
    {
      "trigger": "OnSelect",
      "contents": "OnSelect(${1:string value}, ${2:any data})"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu()"
    },
    {
      "trigger": "SetSortItems",
      "contents": "SetSortItems(${1:boolean sort})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:string value})"
    },
    {
      "trigger": "GetDnD",
      "contents": "GetDnD()"
    },
    {
      "trigger": "GetUseLiveDrag",
      "contents": "GetUseLiveDrag()"
    },
    {
      "trigger": "MakeDroppable",
      "contents": "MakeDroppable(${1:string name})"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()"
    },
    {
      "trigger": "SetDnD",
      "contents": "SetDnD(${1:string name})"
    },
    {
      "trigger": "SetDropPos",
      "contents": "SetDropPos(${1:string pos = 5})"
    },
    {
      "trigger": "GetSortItems",
      "contents": "GetSortItems()"
    },
    {
      "trigger": "SetUseLiveDrag",
      "contents": "SetUseLiveDrag(${1:boolean newState})"
    },
    {
      "trigger": "UpdateDropTarget",
      "contents": "UpdateDropTarget(${1:number drop}, ${2:Panel pnl})"
    },
    {
      "trigger": "Close",
      "contents": "Close()"
    },
    {
      "trigger": "GetOpenTime",
      "contents": "GetOpenTime()"
    },
    {
      "trigger": "GetOpenSize",
      "contents": "GetOpenSize()"
    },
    {
      "trigger": "Open",
      "contents": "Open()"
    },
    {
      "trigger": "SetOpenTime",
      "contents": "SetOpenTime(${1:number value})"
    },
    {
      "trigger": "SetOpenSize",
      "contents": "SetOpenSize(${1:number Value})"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()"
    },
    {
      "trigger": "EditVariable",
      "contents": "EditVariable(${1:string varname}, ${2:table editdata})"
    },
    {
      "trigger": "EntityLost",
      "contents": "EntityLost()"
    },
    {
      "trigger": "RebuildControls",
      "contents": "RebuildControls()"
    },
    {
      "trigger": "OnEntityLost",
      "contents": "OnEntityLost()"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity ent})"
    },
    {
      "trigger": "GetExpanded",
      "contents": "GetExpanded()"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean expanded})"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()"
    },
    {
      "trigger": "GetCurrentFolder",
      "contents": "GetCurrentFolder()"
    },
    {
      "trigger": "GetBaseFolder",
      "contents": "GetBaseFolder()"
    },
    {
      "trigger": "GetFileTypes",
      "contents": "GetFileTypes()"
    },
    {
      "trigger": "GetModels",
      "contents": "GetModels()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "GetFolderNode",
      "contents": "GetFolderNode()"
    },
    {
      "trigger": "GetOpen",
      "contents": "GetOpen()"
    },
    {
      "trigger": "GetSearch",
      "contents": "GetSearch()"
    },
    {
      "trigger": "GetPath",
      "contents": "GetPath()"
    },
    {
      "trigger": "OnSelect",
      "contents": "OnSelect(${1:string filePath})"
    },
    {
      "trigger": "OnRightClick",
      "contents": "OnRightClick(${1:string filePath})"
    },
    {
      "trigger": "OnDoubleClick",
      "contents": "OnDoubleClick(${1:string filePath})"
    },
    {
      "trigger": "SetBaseFolder",
      "contents": "SetBaseFolder(${1:string baseDir})"
    },
    {
      "trigger": "SetCurrentFolder",
      "contents": "SetCurrentFolder(${1:string currentDir})"
    },
    {
      "trigger": "SetFileTypes",
      "contents": "SetFileTypes(${1:string fileTypes = \"*.*\"})"
    },
    {
      "trigger": "SetModels",
      "contents": "SetModels()"
    },
    {
      "trigger": "SetOpen",
      "contents": "SetOpen(${1:boolean open = false})"
    },
    {
      "trigger": "SetName",
      "contents": "SetName()"
    },
    {
      "trigger": "SetPath",
      "contents": "SetPath(${1:string path})"
    },
    {
      "trigger": "Setup",
      "contents": "Setup()"
    },
    {
      "trigger": "SetSearch",
      "contents": "SetSearch(${1:string filter = \"*\"})"
    },
    {
      "trigger": "SetupFiles",
      "contents": "SetupFiles()"
    },
    {
      "trigger": "ShowFolder",
      "contents": "ShowFolder(${1:string currentDir})"
    },
    {
      "trigger": "SetupTree",
      "contents": "SetupTree()"
    },
    {
      "trigger": "SortFiles",
      "contents": "SortFiles(${1:boolean descending = false})"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel left}, ${2:Panel right = nil})"
    },
    {
      "trigger": "Button",
      "contents": "Button(${1:string text}, ${2:string concmd}, ${3:vararg concmd args})"
    },
    {
      "trigger": "ComboBox",
      "contents": "ComboBox(${1:string title}, ${2:string convar})"
    },
    {
      "trigger": "CheckBox",
      "contents": "CheckBox(${1:string label}, ${2:string convar})"
    },
    {
      "trigger": "ControlHelp",
      "contents": "ControlHelp(${1:string help})"
    },
    {
      "trigger": "Help",
      "contents": "Help(${1:string help})"
    },
    {
      "trigger": "ListBox",
      "contents": "ListBox(${1:string label})"
    },
    {
      "trigger": "NumberWang",
      "contents": "NumberWang(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals = nil})"
    },
    {
      "trigger": "NumSlider",
      "contents": "NumSlider(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals = nil})"
    },
    {
      "trigger": "PanelSelect",
      "contents": "PanelSelect()"
    },
    {
      "trigger": "Rebuild",
      "contents": "Rebuild()"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})"
    },
    {
      "trigger": "TextEntry",
      "contents": "TextEntry(${1:string label}, ${2:string convar})"
    },
    {
      "trigger": "Center",
      "contents": "Center()"
    },
    {
      "trigger": "Close",
      "contents": "Close()"
    },
    {
      "trigger": "GetBackgroundBlur",
      "contents": "GetBackgroundBlur()"
    },
    {
      "trigger": "GetDeleteOnClose",
      "contents": "GetDeleteOnClose()"
    },
    {
      "trigger": "GetDraggable",
      "contents": "GetDraggable()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()"
    },
    {
      "trigger": "GetMinHeight",
      "contents": "GetMinHeight()"
    },
    {
      "trigger": "GetMinWidth",
      "contents": "GetMinWidth()"
    },
    {
      "trigger": "GetPaintShadow",
      "contents": "GetPaintShadow()"
    },
    {
      "trigger": "GetSizable",
      "contents": "GetSizable()"
    },
    {
      "trigger": "GetScreenLock",
      "contents": "GetScreenLock()"
    },
    {
      "trigger": "GetTitle",
      "contents": "GetTitle()"
    },
    {
      "trigger": "OnClose",
      "contents": "OnClose()"
    },
    {
      "trigger": "SetBackgroundBlur",
      "contents": "SetBackgroundBlur(${1:boolean blur})"
    },
    {
      "trigger": "SetDeleteOnClose",
      "contents": "SetDeleteOnClose(${1:boolean shouldDelete})"
    },
    {
      "trigger": "SetDraggable",
      "contents": "SetDraggable(${1:boolean draggable})"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:string path})"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})"
    },
    {
      "trigger": "SetMinHeight",
      "contents": "SetMinHeight(${1:number minH})"
    },
    {
      "trigger": "SetPaintShadow",
      "contents": "SetPaintShadow(${1:boolean shouldPaint})"
    },
    {
      "trigger": "SetMinWidth",
      "contents": "SetMinWidth(${1:number minW})"
    },
    {
      "trigger": "SetScreenLock",
      "contents": "SetScreenLock(${1:boolean lock})"
    },
    {
      "trigger": "SetSizable",
      "contents": "SetSizable(${1:boolean sizeable})"
    },
    {
      "trigger": "IsActive",
      "contents": "IsActive()"
    },
    {
      "trigger": "SetTitle",
      "contents": "SetTitle(${1:string title})"
    },
    {
      "trigger": "ShowCloseButton",
      "contents": "ShowCloseButton(${1:boolean show})"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem()"
    },
    {
      "trigger": "GetCols",
      "contents": "GetCols()"
    },
    {
      "trigger": "GetColWide",
      "contents": "GetColWide()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()"
    },
    {
      "trigger": "GetRowHeight",
      "contents": "GetRowHeight()"
    },
    {
      "trigger": "RemoveItem",
      "contents": "RemoveItem(${1:Panel item})"
    },
    {
      "trigger": "SetCols",
      "contents": "SetCols(${1:number cols})"
    },
    {
      "trigger": "SetColWide",
      "contents": "SetColWide(${1:number colWidth})"
    },
    {
      "trigger": "SortByMember",
      "contents": "SortByMember(${1:boolean desc = true})"
    },
    {
      "trigger": "GetDividerWidth",
      "contents": "GetDividerWidth()"
    },
    {
      "trigger": "SetRowHeight",
      "contents": "SetRowHeight(${1:number rowHeight})"
    },
    {
      "trigger": "GetHoldPos",
      "contents": "GetHoldPos()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()"
    },
    {
      "trigger": "GetLeft",
      "contents": "GetLeft()"
    },
    {
      "trigger": "GetLeftMin",
      "contents": "GetLeftMin()"
    },
    {
      "trigger": "GetLeftWidth",
      "contents": "GetLeftWidth()"
    },
    {
      "trigger": "GetMiddle",
      "contents": "GetMiddle()"
    },
    {
      "trigger": "GetRightMin",
      "contents": "GetRightMin()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()"
    },
    {
      "trigger": "SetDividerWidth",
      "contents": "SetDividerWidth(${1:number width})"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean dragonot})"
    },
    {
      "trigger": "SetHoldPos",
      "contents": "SetHoldPos(${1:number x})"
    },
    {
      "trigger": "SetLeft",
      "contents": "SetLeft(${1:Panel pnl})"
    },
    {
      "trigger": "SetLeftMin",
      "contents": "SetLeftMin(${1:number minWidth})"
    },
    {
      "trigger": "SetLeftWidth",
      "contents": "SetLeftWidth(${1:number width})"
    },
    {
      "trigger": "SetMiddle",
      "contents": "SetMiddle(${1:Panel middle})"
    },
    {
      "trigger": "SetRight",
      "contents": "SetRight(${1:Panel pnl})"
    },
    {
      "trigger": "SetRightMin",
      "contents": "SetRightMin(${1:number minWidth})"
    },
    {
      "trigger": "StartGrab",
      "contents": "StartGrab()"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl})"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()"
    },
    {
      "trigger": "GetOverlap",
      "contents": "GetOverlap()"
    },
    {
      "trigger": "GetShowDropTargets",
      "contents": "GetShowDropTargets()"
    },
    {
      "trigger": "MakeDroppable",
      "contents": "MakeDroppable(${1:string name})"
    },
    {
      "trigger": "OnDragModified",
      "contents": "OnDragModified()"
    },
    {
      "trigger": "ScrollToChild",
      "contents": "ScrollToChild()"
    },
    {
      "trigger": "SetOverlap",
      "contents": "SetOverlap(${1:number overlap})"
    },
    {
      "trigger": "SetScroll",
      "contents": "SetScroll(${1:number scroll})"
    },
    {
      "trigger": "SetShowDropTargets",
      "contents": "SetShowDropTargets(${1:boolean newState})"
    },
    {
      "trigger": "SetUseLiveDrag",
      "contents": "SetUseLiveDrag(${1:boolean newState})"
    },
    {
      "trigger": "AddFunction",
      "contents": "AddFunction(${1:string library}, ${2:string name}, ${3:function callback})"
    },
    {
      "trigger": "Call",
      "contents": "Call(${1:string js})"
    },
    {
      "trigger": "ConsoleMessage",
      "contents": "ConsoleMessage(${1:string msg})"
    },
    {
      "trigger": "GetAllowLua",
      "contents": "GetAllowLua()"
    },
    {
      "trigger": "QueueJavascript",
      "contents": "QueueJavascript(${1:string js})"
    },
    {
      "trigger": "SetAllowLua",
      "contents": "SetAllowLua(${1:boolean allow = false})"
    },
    {
      "trigger": "SetScrollbars",
      "contents": "SetScrollbars(${1:boolean show})"
    },
    {
      "trigger": "StopLoading",
      "contents": "StopLoading()"
    },
    {
      "trigger": "SetButtonColor",
      "contents": "SetButtonColor()"
    },
    {
      "trigger": "FinishedLoading",
      "contents": "FinishedLoading()"
    },
    {
      "trigger": "SetHTML",
      "contents": "SetHTML(${1:Panel dhtml})"
    },
    {
      "trigger": "StartedLoading",
      "contents": "StartedLoading()"
    },
    {
      "trigger": "UpdateHistory",
      "contents": "UpdateHistory(${1:string url})"
    },
    {
      "trigger": "UpdateNavButtonStatus",
      "contents": "UpdateNavButtonStatus()"
    },
    {
      "trigger": "Fill",
      "contents": "Fill()"
    },
    {
      "trigger": "GetManual",
      "contents": "GetManual()"
    },
    {
      "trigger": "FilterByText",
      "contents": "FilterByText(${1:string text})"
    },
    {
      "trigger": "GetSelectedIcon",
      "contents": "GetSelectedIcon()"
    },
    {
      "trigger": "OnChangeInternal",
      "contents": "OnChangeInternal()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()"
    },
    {
      "trigger": "ScrollToSelected",
      "contents": "ScrollToSelected()"
    },
    {
      "trigger": "SetManual",
      "contents": "SetManual(${1:boolean manual})"
    },
    {
      "trigger": "SelectIcon",
      "contents": "SelectIcon(${1:string icon})"
    },
    {
      "trigger": "SetSelectedIcon",
      "contents": "SetSelectedIcon(${1:string str})"
    },
    {
      "trigger": "Copy",
      "contents": "Copy()"
    },
    {
      "trigger": "CopyContents",
      "contents": "CopyContents()"
    },
    {
      "trigger": "GetLayoutDir",
      "contents": "GetLayoutDir()"
    },
    {
      "trigger": "GetBorder",
      "contents": "GetBorder()"
    },
    {
      "trigger": "GetSpaceX",
      "contents": "GetSpaceX()"
    },
    {
      "trigger": "GetSpaceY",
      "contents": "GetSpaceY()"
    },
    {
      "trigger": "GetStretchHeight",
      "contents": "GetStretchHeight()"
    },
    {
      "trigger": "GetStretchWidth",
      "contents": "GetStretchWidth()"
    },
    {
      "trigger": "Layout",
      "contents": "Layout()"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()"
    },
    {
      "trigger": "SetBorder",
      "contents": "SetBorder(${1:number width})"
    },
    {
      "trigger": "SetLayoutDir",
      "contents": "SetLayoutDir()"
    },
    {
      "trigger": "SetSpaceX",
      "contents": "SetSpaceX(${1:number xSpacing})"
    },
    {
      "trigger": "SetSpaceY",
      "contents": "SetSpaceY(${1:number ySpacing})"
    },
    {
      "trigger": "SetStretchHeight",
      "contents": "SetStretchHeight(${1:boolean do_stretch})"
    },
    {
      "trigger": "SetStretchWidth",
      "contents": "SetStretchWidth(${1:boolean stretchW})"
    },
    {
      "trigger": "DoLoadMaterial",
      "contents": "DoLoadMaterial()"
    },
    {
      "trigger": "FixVertexLitMaterial",
      "contents": "FixVertexLitMaterial()"
    },
    {
      "trigger": "GetFailsafeMatName",
      "contents": "GetFailsafeMatName()"
    },
    {
      "trigger": "GetImage",
      "contents": "GetImage()"
    },
    {
      "trigger": "GetImageColor",
      "contents": "GetImageColor()"
    },
    {
      "trigger": "GetKeepAspect",
      "contents": "GetKeepAspect()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()"
    },
    {
      "trigger": "GetMatName",
      "contents": "GetMatName()"
    },
    {
      "trigger": "LoadMaterial",
      "contents": "LoadMaterial()"
    },
    {
      "trigger": "PaintAt",
      "contents": "PaintAt(${1:number posX}, ${2:number posY}, ${3:number width}, ${4:number height})"
    },
    {
      "trigger": "SetFailsafeMatName",
      "contents": "SetFailsafeMatName(${1:string backupMat})"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string strImage}, ${2:string strBackup = nil})"
    },
    {
      "trigger": "SetImageColor",
      "contents": "SetImageColor()"
    },
    {
      "trigger": "SetKeepAspect",
      "contents": "SetKeepAspect(${1:boolean keep})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial mat})"
    },
    {
      "trigger": "SetMatName",
      "contents": "SetMatName(${1:string mat})"
    },
    {
      "trigger": "SetOnViewMaterial",
      "contents": "SetOnViewMaterial(${1:string mat}, ${2:string backupMat})"
    },
    {
      "trigger": "Unloaded",
      "contents": "Unloaded()"
    },
    {
      "trigger": "GetImage",
      "contents": "GetImage()"
    },
    {
      "trigger": "GetStretchToFit",
      "contents": "GetStretchToFit()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon()"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string strImage}, ${2:string strBackup})"
    },
    {
      "trigger": "SetImageVisible",
      "contents": "SetImageVisible(${1:boolean visible})"
    },
    {
      "trigger": "SetKeepAspect",
      "contents": "SetKeepAspect(${1:boolean keep})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial mat})"
    },
    {
      "trigger": "SetOnViewMaterial",
      "contents": "SetOnViewMaterial(${1:string mat}, ${2:string backup})"
    },
    {
      "trigger": "SetStretchToFit",
      "contents": "SetStretchToFit(${1:boolean stretch})"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string iconName})"
    },
    {
      "trigger": "DoClickInternal",
      "contents": "DoClickInternal()"
    },
    {
      "trigger": "DoDoubleClick",
      "contents": "DoDoubleClick()"
    },
    {
      "trigger": "DoDoubleClickInternal",
      "contents": "DoDoubleClickInternal()"
    },
    {
      "trigger": "DoMiddleClick",
      "contents": "DoMiddleClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()"
    },
    {
      "trigger": "GetBright",
      "contents": "GetBright()"
    },
    {
      "trigger": "GetAutoStretchVertical",
      "contents": "GetAutoStretchVertical()"
    },
    {
      "trigger": "GetDark",
      "contents": "GetDark()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()"
    },
    {
      "trigger": "GetDoubleClickingEnabled",
      "contents": "GetDoubleClickingEnabled()"
    },
    {
      "trigger": "GetHighlight",
      "contents": "GetHighlight()"
    },
    {
      "trigger": "GetFont",
      "contents": "GetFont()"
    },
    {
      "trigger": "GetIsToggle",
      "contents": "GetIsToggle()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()"
    },
    {
      "trigger": "GetTextStyleColor",
      "contents": "GetTextStyleColor()"
    },
    {
      "trigger": "GetToggle",
      "contents": "GetToggle()"
    },
    {
      "trigger": "OnDepressed",
      "contents": "OnDepressed()"
    },
    {
      "trigger": "OnReleased",
      "contents": "OnReleased()"
    },
    {
      "trigger": "OnToggled",
      "contents": "OnToggled(${1:boolean toggleState})"
    },
    {
      "trigger": "SetAutoStretchVertical",
      "contents": "SetAutoStretchVertical(${1:boolean stretch})"
    },
    {
      "trigger": "SetBright",
      "contents": "SetBright(${1:boolean bright})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disable})"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean dark})"
    },
    {
      "trigger": "SetDoubleClickingEnabled",
      "contents": "SetDoubleClickingEnabled(${1:boolean enable})"
    },
    {
      "trigger": "SetHighlight",
      "contents": "SetHighlight(${1:boolean highlight})"
    },
    {
      "trigger": "SetIsToggle",
      "contents": "SetIsToggle(${1:boolean allowToggle})"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont()"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor()"
    },
    {
      "trigger": "SetTextStyleColor",
      "contents": "SetTextStyleColor()"
    },
    {
      "trigger": "SetToggle",
      "contents": "SetToggle(${1:boolean toggleState})"
    },
    {
      "trigger": "UpdateColours",
      "contents": "UpdateColours(${1:table skin})"
    },
    {
      "trigger": "UpdateFGColor",
      "contents": "UpdateFGColor()"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()"
    },
    {
      "trigger": "OnLabelTextChanged",
      "contents": "OnLabelTextChanged(${1:string txt})"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()"
    },
    {
      "trigger": "GetTextStyleColor",
      "contents": "GetTextStyleColor()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor()"
    },
    {
      "trigger": "SetTextStyleColor",
      "contents": "SetTextStyleColor()"
    },
    {
      "trigger": "AddColumn",
      "contents": "AddColumn(${1:string column}, ${2:number position})"
    },
    {
      "trigger": "AddLine",
      "contents": "AddLine(${1:vararg text})"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()"
    },
    {
      "trigger": "ClearSelection",
      "contents": "ClearSelection()"
    },
    {
      "trigger": "ColumnWidth",
      "contents": "ColumnWidth(${1:number column})"
    },
    {
      "trigger": "DataLayout",
      "contents": "DataLayout()"
    },
    {
      "trigger": "DisableScrollbar",
      "contents": "DisableScrollbar()"
    },
    {
      "trigger": "FixColumnsLayout",
      "contents": "FixColumnsLayout()"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()"
    },
    {
      "trigger": "DoDoubleClick",
      "contents": "DoDoubleClick(${1:number lineID})"
    },
    {
      "trigger": "GetDataHeight",
      "contents": "GetDataHeight()"
    },
    {
      "trigger": "GetHeaderHeight",
      "contents": "GetHeaderHeight()"
    },
    {
      "trigger": "GetDirty",
      "contents": "GetDirty()"
    },
    {
      "trigger": "GetHideHeaders",
      "contents": "GetHideHeaders()"
    },
    {
      "trigger": "GetInnerTall",
      "contents": "GetInnerTall()"
    },
    {
      "trigger": "GetLine",
      "contents": "GetLine(${1:number id})"
    },
    {
      "trigger": "GetLines",
      "contents": "GetLines()"
    },
    {
      "trigger": "GetSelected",
      "contents": "GetSelected()"
    },
    {
      "trigger": "GetMultiSelect",
      "contents": "GetMultiSelect()"
    },
    {
      "trigger": "GetSortable",
      "contents": "GetSortable()"
    },
    {
      "trigger": "GetSelectedLine",
      "contents": "GetSelectedLine()"
    },
    {
      "trigger": "GetSortedID",
      "contents": "GetSortedID()"
    },
    {
      "trigger": "OnClickLine",
      "contents": "OnClickLine(${1:Panel line}, ${2:boolean isSelected})"
    },
    {
      "trigger": "OnRowRightClick",
      "contents": "OnRowRightClick(${1:number lineID})"
    },
    {
      "trigger": "OnRequestResize",
      "contents": "OnRequestResize(${1:Panel column}, ${2:number size})"
    },
    {
      "trigger": "OnRowSelected",
      "contents": "OnRowSelected(${1:number rowIndex})"
    },
    {
      "trigger": "RemoveLine",
      "contents": "RemoveLine()"
    },
    {
      "trigger": "SelectFirstItem",
      "contents": "SelectFirstItem()"
    },
    {
      "trigger": "SelectItem",
      "contents": "SelectItem(${1:Panel Line})"
    },
    {
      "trigger": "SetDirty",
      "contents": "SetDirty(${1:boolean isDirty})"
    },
    {
      "trigger": "SetDataHeight",
      "contents": "SetDataHeight(${1:number height})"
    },
    {
      "trigger": "SetHideHeaders",
      "contents": "SetHideHeaders(${1:boolean hide})"
    },
    {
      "trigger": "SetHeaderHeight",
      "contents": "SetHeaderHeight(${1:number height})"
    },
    {
      "trigger": "SetMultiSelect",
      "contents": "SetMultiSelect(${1:boolean allowMultiSelect})"
    },
    {
      "trigger": "SortByColumn",
      "contents": "SortByColumn(${1:number columnIndex}, ${2:boolean descending = false})"
    },
    {
      "trigger": "SetSortable",
      "contents": "SetSortable(${1:boolean isSortable})"
    },
    {
      "trigger": "SortByColumns",
      "contents": "SortByColumns(${1:number column1 = nil}, ${2:boolean descrending1 = false}, ${3:number column2 = nil}, ${4:boolean descrending2 = false}, ${5:number column3 = nil}, ${6:boolean descrending3 = false}, ${7:number column4 = nil}, ${8:boolean descrending4 = false})"
    },
    {
      "trigger": "AddCVar",
      "contents": "AddCVar(${1:string strText}, ${2:string convar}, ${3:string on}, ${4:string off})"
    },
    {
      "trigger": "AddOption",
      "contents": "AddOption(${1:string name}, ${2:function func = nil})"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl})"
    },
    {
      "trigger": "AddSpacer",
      "contents": "AddSpacer()"
    },
    {
      "trigger": "AddSubMenu",
      "contents": "AddSubMenu(${1:string Name}, ${2:function func = nil})"
    },
    {
      "trigger": "ChildCount",
      "contents": "ChildCount()"
    },
    {
      "trigger": "ClearHighlights",
      "contents": "ClearHighlights()"
    },
    {
      "trigger": "CloseSubMenu",
      "contents": "CloseSubMenu(${1:Panel menu})"
    },
    {
      "trigger": "GetChild",
      "contents": "GetChild()"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()"
    },
    {
      "trigger": "GetDeleteSelf",
      "contents": "GetDeleteSelf()"
    },
    {
      "trigger": "GetDrawColumn",
      "contents": "GetDrawColumn()"
    },
    {
      "trigger": "GetMinimumWidth",
      "contents": "GetMinimumWidth()"
    },
    {
      "trigger": "GetMaxHeight",
      "contents": "GetMaxHeight()"
    },
    {
      "trigger": "GetOpenSubMenu",
      "contents": "GetOpenSubMenu()"
    },
    {
      "trigger": "HighlightItem",
      "contents": "HighlightItem(${1:Panel item})"
    },
    {
      "trigger": "Hide",
      "contents": "Hide()"
    },
    {
      "trigger": "Open",
      "contents": "Open(${1:number x = gui.MouseX()}, ${2:number y = gui.MouseY()}, ${3:any skipanimation}, ${4:Panel ownerpanel})"
    },
    {
      "trigger": "OpenSubMenu",
      "contents": "OpenSubMenu(${1:Panel menu = nil})"
    },
    {
      "trigger": "OptionSelected",
      "contents": "OptionSelected(${1:string optionText})"
    },
    {
      "trigger": "OptionSelectedInternal",
      "contents": "OptionSelectedInternal()"
    },
    {
      "trigger": "SetDeleteSelf",
      "contents": "SetDeleteSelf(${1:boolean newState})"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean nil})"
    },
    {
      "trigger": "SetDrawColumn",
      "contents": "SetDrawColumn(${1:boolean draw})"
    },
    {
      "trigger": "SetMaxHeight",
      "contents": "SetMaxHeight()"
    },
    {
      "trigger": "SetMinimumWidth",
      "contents": "SetMinimumWidth()"
    },
    {
      "trigger": "AddMenu",
      "contents": "AddMenu(${1:string label})"
    },
    {
      "trigger": "SetOpenSubMenu",
      "contents": "SetOpenSubMenu(${1:Panel item})"
    },
    {
      "trigger": "AddOrGetMenu",
      "contents": "AddOrGetMenu(${1:string label})"
    },
    {
      "trigger": "GetBackgroundColor",
      "contents": "GetBackgroundColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()"
    },
    {
      "trigger": "GetOpenMenu",
      "contents": "GetOpenMenu()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()"
    },
    {
      "trigger": "SetBackgroundColor",
      "contents": "SetBackgroundColor()"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disable})"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean shouldPaint})"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})"
    },
    {
      "trigger": "AddSubMenu",
      "contents": "AddSubMenu()"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean shouldPaint})"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()"
    },
    {
      "trigger": "GetMenu",
      "contents": "GetMenu()"
    },
    {
      "trigger": "GetIsCheckable",
      "contents": "GetIsCheckable()"
    },
    {
      "trigger": "OnChecked",
      "contents": "OnChecked(${1:boolean checked})"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})"
    },
    {
      "trigger": "SetIsCheckable",
      "contents": "SetIsCheckable(${1:boolean checkable})"
    },
    {
      "trigger": "SetMenu",
      "contents": "SetMenu(${1:Panel pnl})"
    },
    {
      "trigger": "SetSubMenu",
      "contents": "SetSubMenu(${1:Panel menu})"
    },
    {
      "trigger": "ToggleCheck",
      "contents": "ToggleCheck()"
    },
    {
      "trigger": "GetConVar",
      "contents": "GetConVar()"
    },
    {
      "trigger": "GetValueOff",
      "contents": "GetValueOff()"
    },
    {
      "trigger": "GetValueOn",
      "contents": "GetValueOn()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string cvar})"
    },
    {
      "trigger": "SetValueOn",
      "contents": "SetValueOn(${1:string value})"
    },
    {
      "trigger": "SetValueOff",
      "contents": "SetValueOff(${1:string value})"
    },
    {
      "trigger": "DrawModel",
      "contents": "DrawModel()"
    },
    {
      "trigger": "GetAmbientLight",
      "contents": "GetAmbientLight()"
    },
    {
      "trigger": "GetAnimated",
      "contents": "GetAnimated()"
    },
    {
      "trigger": "GetAnimSpeed",
      "contents": "GetAnimSpeed()"
    },
    {
      "trigger": "GetCamPos",
      "contents": "GetCamPos()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()"
    },
    {
      "trigger": "GetFOV",
      "contents": "GetFOV()"
    },
    {
      "trigger": "GetLookAng",
      "contents": "GetLookAng()"
    },
    {
      "trigger": "GetLookAt",
      "contents": "GetLookAt()"
    },
    {
      "trigger": "GetModel",
      "contents": "GetModel()"
    },
    {
      "trigger": "LayoutEntity",
      "contents": "LayoutEntity(${1:Entity entity})"
    },
    {
      "trigger": "PostDrawModel",
      "contents": "PostDrawModel()"
    },
    {
      "trigger": "PreDrawModel",
      "contents": "PreDrawModel()"
    },
    {
      "trigger": "RunAnimation",
      "contents": "RunAnimation()"
    },
    {
      "trigger": "SetAmbientLight",
      "contents": "SetAmbientLight(${1:table color})"
    },
    {
      "trigger": "SetAnimated",
      "contents": "SetAnimated(${1:boolean animated})"
    },
    {
      "trigger": "SetAnimSpeed",
      "contents": "SetAnimSpeed(${1:number animSpeed})"
    },
    {
      "trigger": "SetCamPos",
      "contents": "SetCamPos(${1:Vector pos})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity ent})"
    },
    {
      "trigger": "SetDirectionalLight",
      "contents": "SetDirectionalLight(${1:table color})"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov})"
    },
    {
      "trigger": "SetLookAng",
      "contents": "SetLookAng(${1:Angle ang})"
    },
    {
      "trigger": "SetLookAt",
      "contents": "SetLookAt(${1:Vector pos})"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string model})"
    },
    {
      "trigger": "StartScene",
      "contents": "StartScene(${1:string path})"
    },
    {
      "trigger": "SetHeight",
      "contents": "SetHeight(${1:number num = 2})"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl})"
    },
    {
      "trigger": "GetAlignment",
      "contents": "GetAlignment()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()"
    },
    {
      "trigger": "GetLife",
      "contents": "GetLife()"
    },
    {
      "trigger": "GetSpacing",
      "contents": "GetSpacing()"
    },
    {
      "trigger": "SetAlignment",
      "contents": "SetAlignment(${1:number alignment})"
    },
    {
      "trigger": "SetLife",
      "contents": "SetLife(${1:number time})"
    },
    {
      "trigger": "SetSpacing",
      "contents": "SetSpacing(${1:number spacing})"
    },
    {
      "trigger": "Shuffle",
      "contents": "Shuffle()"
    },
    {
      "trigger": "DrawNotches",
      "contents": "DrawNotches(${1:number level}, ${2:number x}, ${3:number y}, ${4:number w}, ${5:number h}, ${6:number range}, ${7:number value}, ${8:number min}, ${9:number max})"
    },
    {
      "trigger": "DrawScreen",
      "contents": "DrawScreen(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "SetModelList",
      "contents": "SetModelList(${1:table models}, ${2:string convar}, ${3:boolean dontSort}, ${4:boolean DontCallListConVars})"
    },
    {
      "trigger": "GetActive",
      "contents": "GetActive()"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()"
    },
    {
      "trigger": "GetFloatValue",
      "contents": "GetFloatValue()"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()"
    },
    {
      "trigger": "GetRange",
      "contents": "GetRange()"
    },
    {
      "trigger": "GetShouldDrawScreen",
      "contents": "GetShouldDrawScreen()"
    },
    {
      "trigger": "GetTextValue",
      "contents": "GetTextValue()"
    },
    {
      "trigger": "GetZoom",
      "contents": "GetZoom()"
    },
    {
      "trigger": "IdealZoom",
      "contents": "IdealZoom()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "LockCursor",
      "contents": "LockCursor()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number newValue})"
    },
    {
      "trigger": "PaintScratchWindow",
      "contents": "PaintScratchWindow()"
    },
    {
      "trigger": "SetActive",
      "contents": "SetActive(${1:boolean active})"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number decimals})"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number frac})"
    },
    {
      "trigger": "SetFloatValue",
      "contents": "SetFloatValue(${1:number val})"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})"
    },
    {
      "trigger": "SetShouldDrawScreen",
      "contents": "SetShouldDrawScreen(${1:boolean shouldDraw})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})"
    },
    {
      "trigger": "SetZoom",
      "contents": "SetZoom(${1:number zoom})"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar()"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()"
    },
    {
      "trigger": "GetFloatValue",
      "contents": "GetFloatValue()"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction(${1:number val})"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()"
    },
    {
      "trigger": "GetTextArea",
      "contents": "GetTextArea()"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number num})"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number val})"
    },
    {
      "trigger": "HideWang",
      "contents": "HideWang()"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number val})"
    },
    {
      "trigger": "SetFloatValue",
      "contents": "SetFloatValue(${1:number val})"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})"
    },
    {
      "trigger": "SetMinMax",
      "contents": "SetMinMax(${1:number min}, ${2:number max})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})"
    },
    {
      "trigger": "GetDefaultValue",
      "contents": "GetDefaultValue()"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()"
    },
    {
      "trigger": "GetRange",
      "contents": "GetRange()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()"
    },
    {
      "trigger": "GetTextArea",
      "contents": "GetTextArea()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number value})"
    },
    {
      "trigger": "ResetToDefaultValue",
      "contents": "ResetToDefaultValue()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar()"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean dark})"
    },
    {
      "trigger": "SetDefaultValue",
      "contents": "SetDefaultValue(${1:number default})"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number decimals})"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})"
    },
    {
      "trigger": "SetMinMax",
      "contents": "SetMinMax(${1:number min}, ${2:number max})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})"
    },
    {
      "trigger": "TranslateSliderValues",
      "contents": "TranslateSliderValues(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "UpdateNotches",
      "contents": "UpdateNotches()"
    },
    {
      "trigger": "ValueChanged",
      "contents": "ValueChanged(${1:number value})"
    },
    {
      "trigger": "GetBackgroundColor",
      "contents": "GetBackgroundColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()"
    },
    {
      "trigger": "SetBackgroundColor",
      "contents": "SetBackgroundColor(${1:table color})"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disabled})"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean paint})"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl}, ${2:string state = nil})"
    },
    {
      "trigger": "EnableVerticalScrollbar",
      "contents": "EnableVerticalScrollbar()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()"
    },
    {
      "trigger": "GetSpacing",
      "contents": "GetSpacing()"
    },
    {
      "trigger": "InsertAtTop",
      "contents": "InsertAtTop(${1:Panel insert}, ${2:string strLineState})"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number Offset})"
    },
    {
      "trigger": "SetSpacing",
      "contents": "SetSpacing(${1:number Distance})"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "PaintDifferentColours",
      "contents": "PaintDifferentColours(${1:table cola}, ${2:table colb}, ${3:table colc}, ${4:table cold}, ${5:number size})"
    },
    {
      "trigger": "GetType",
      "contents": "GetType()"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean draw})"
    },
    {
      "trigger": "PaintInnerCorners",
      "contents": "PaintInnerCorners(${1:number size})"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetType",
      "contents": "SetType(${1:number type})"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number fraction})"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction()"
    },
    {
      "trigger": "CreateRow",
      "contents": "CreateRow(${1:string category}, ${2:string name})"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()"
    },
    {
      "trigger": "GetCategory",
      "contents": "GetCategory(${1:string name}, ${2:boolean create})"
    },
    {
      "trigger": "AddSheet",
      "contents": "AddSheet(${1:string name}, ${2:string icon = nil}, ${3:string tooltip = nil})"
    },
    {
      "trigger": "CloseTab",
      "contents": "CloseTab(${1:boolean removePanel})"
    },
    {
      "trigger": "CrossFade",
      "contents": "CrossFade(${1:table anim}, ${2:number delta}, ${3:table data})"
    },
    {
      "trigger": "GetActiveTab",
      "contents": "GetActiveTab()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()"
    },
    {
      "trigger": "GetFadeTime",
      "contents": "GetFadeTime()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()"
    },
    {
      "trigger": "GetShowIcons",
      "contents": "GetShowIcons()"
    },
    {
      "trigger": "OnActiveTabChanged",
      "contents": "OnActiveTabChanged()"
    },
    {
      "trigger": "SetActiveTab",
      "contents": "SetActiveTab()"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding = 8})"
    },
    {
      "trigger": "SetFadeTime",
      "contents": "SetFadeTime(${1:number time = 0.1})"
    },
    {
      "trigger": "SetShowIcons",
      "contents": "SetShowIcons(${1:boolean show})"
    },
    {
      "trigger": "SizeToContentWidth",
      "contents": "SizeToContentWidth()"
    },
    {
      "trigger": "SetupCloseButton",
      "contents": "SetupCloseButton(${1:function func})"
    },
    {
      "trigger": "SwitchToName",
      "contents": "SwitchToName(${1:string name})"
    },
    {
      "trigger": "GetRGB",
      "contents": "GetRGB()"
    },
    {
      "trigger": "GetPosColor",
      "contents": "GetPosColor(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl})"
    },
    {
      "trigger": "SetRGB",
      "contents": "SetRGB()"
    },
    {
      "trigger": "GetVBar",
      "contents": "GetVBar()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()"
    },
    {
      "trigger": "InnerWidth",
      "contents": "InnerWidth()"
    },
    {
      "trigger": "Rebuild",
      "contents": "Rebuild()"
    },
    {
      "trigger": "ScrollToChild",
      "contents": "ScrollToChild(${1:Panel panel})"
    },
    {
      "trigger": "SetCanvas",
      "contents": "SetCanvas(${1:Panel canvas})"
    },
    {
      "trigger": "GetBorderColor",
      "contents": "GetBorderColor()"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding})"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "SetBorderColor",
      "contents": "SetBorderColor()"
    },
    {
      "trigger": "GetType",
      "contents": "GetType()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "SetType",
      "contents": "SetType()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()"
    },
    {
      "trigger": "GetLockX",
      "contents": "GetLockX()"
    },
    {
      "trigger": "GetLockY",
      "contents": "GetLockY()"
    },
    {
      "trigger": "GetNotches",
      "contents": "GetNotches()"
    },
    {
      "trigger": "GetNumSlider",
      "contents": "GetNumSlider()"
    },
    {
      "trigger": "GetSlideX",
      "contents": "GetSlideX()"
    },
    {
      "trigger": "GetSlideY",
      "contents": "GetSlideY()"
    },
    {
      "trigger": "GetTrapInside",
      "contents": "GetTrapInside()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "SetBackground",
      "contents": "SetBackground(${1:string path})"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean dragging})"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage()"
    },
    {
      "trigger": "SetImageColor",
      "contents": "SetImageColor()"
    },
    {
      "trigger": "SetLockX",
      "contents": "SetLockX(${1:number lockX = nil})"
    },
    {
      "trigger": "SetLockY",
      "contents": "SetLockY(${1:number lockY = nil})"
    },
    {
      "trigger": "SetNumSlider",
      "contents": "SetNumSlider(${1:any slider})"
    },
    {
      "trigger": "SetNotches",
      "contents": "SetNotches(${1:number notches})"
    },
    {
      "trigger": "SetSlideY",
      "contents": "SetSlideY(${1:number y})"
    },
    {
      "trigger": "SetTrapInside",
      "contents": "SetTrapInside(${1:boolean trap})"
    },
    {
      "trigger": "SetSlideX",
      "contents": "SetSlideX(${1:number x})"
    },
    {
      "trigger": "GetHandle",
      "contents": "GetHandle()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "GetRotation",
      "contents": "GetRotation()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()"
    },
    {
      "trigger": "SetRotation",
      "contents": "SetRotation(${1:number ang})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial material})"
    },
    {
      "trigger": "SetHandle",
      "contents": "SetHandle(${1:Vector vec})"
    },
    {
      "trigger": "GetAutoComplete",
      "contents": "GetAutoComplete(${1:string inputText})"
    },
    {
      "trigger": "AllowInput",
      "contents": "AllowInput(${1:string char})"
    },
    {
      "trigger": "CheckNumeric",
      "contents": "CheckNumeric(${1:string strValue})"
    },
    {
      "trigger": "GetCursorColor",
      "contents": "GetCursorColor()"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat()"
    },
    {
      "trigger": "GetEnterAllowed",
      "contents": "GetEnterAllowed()"
    },
    {
      "trigger": "GetNumeric",
      "contents": "GetNumeric()"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt()"
    },
    {
      "trigger": "GetPlaceholderColor",
      "contents": "GetPlaceholderColor()"
    },
    {
      "trigger": "GetUpdateOnType",
      "contents": "GetUpdateOnType()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()"
    },
    {
      "trigger": "OnEnter",
      "contents": "OnEnter()"
    },
    {
      "trigger": "OnKeyCodeTyped",
      "contents": "OnKeyCodeTyped()"
    },
    {
      "trigger": "OnTextChanged",
      "contents": "OnTextChanged(${1:boolean noMenuRemoval})"
    },
    {
      "trigger": "OnValueChange",
      "contents": "OnValueChange(${1:string value})"
    },
    {
      "trigger": "OpenAutoComplete",
      "contents": "OpenAutoComplete()"
    },
    {
      "trigger": "SetEditable",
      "contents": "SetEditable(${1:boolean enabled})"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disabled})"
    },
    {
      "trigger": "SetEnterAllowed",
      "contents": "SetEnterAllowed()"
    },
    {
      "trigger": "SetNumeric",
      "contents": "SetNumeric(${1:boolean numericOnly})"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont(${1:string font})"
    },
    {
      "trigger": "SetPlaceholderText",
      "contents": "SetPlaceholderText(${1:string text = nil})"
    },
    {
      "trigger": "SetPlaceholderColor",
      "contents": "SetPlaceholderColor()"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor()"
    },
    {
      "trigger": "SetUpdateOnType",
      "contents": "SetUpdateOnType(${1:boolean updateOnType})"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:string text})"
    },
    {
      "trigger": "ClearTiles",
      "contents": "ClearTiles()"
    },
    {
      "trigger": "ConsumeTiles",
      "contents": "ConsumeTiles(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "Copy",
      "contents": "Copy()"
    },
    {
      "trigger": "CopyContents",
      "contents": "CopyContents(${1:Panel source})"
    },
    {
      "trigger": "FindFreeTile",
      "contents": "FindFreeTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "FitsInTile",
      "contents": "FitsInTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})"
    },
    {
      "trigger": "GetBaseSize",
      "contents": "GetBaseSize()"
    },
    {
      "trigger": "GetBorder",
      "contents": "GetBorder()"
    },
    {
      "trigger": "GetMinHeight",
      "contents": "GetMinHeight()"
    },
    {
      "trigger": "GetSpaceX",
      "contents": "GetSpaceX()"
    },
    {
      "trigger": "GetSpaceY",
      "contents": "GetSpaceY()"
    },
    {
      "trigger": "GetTile",
      "contents": "GetTile(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "Layout",
      "contents": "Layout()"
    },
    {
      "trigger": "LayoutTiles",
      "contents": "LayoutTiles()"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()"
    },
    {
      "trigger": "SetBaseSize",
      "contents": "SetBaseSize(${1:number size})"
    },
    {
      "trigger": "SetBorder",
      "contents": "SetBorder(${1:number border})"
    },
    {
      "trigger": "SetMinHeight",
      "contents": "SetMinHeight(${1:number minH})"
    },
    {
      "trigger": "SetTile",
      "contents": "SetTile(${1:number x}, ${2:number y}, ${3:any state})"
    },
    {
      "trigger": "SetSpaceX",
      "contents": "SetSpaceX(${1:number spacingX})"
    },
    {
      "trigger": "SetSpaceY",
      "contents": "SetSpaceY(${1:number spaceY})"
    },
    {
      "trigger": "Close",
      "contents": "Close()"
    },
    {
      "trigger": "DrawArrow",
      "contents": "DrawArrow(${1:number x}, ${2:number y})"
    },
    {
      "trigger": "OpenForPanel",
      "contents": "OpenForPanel(${1:Panel pnl})"
    },
    {
      "trigger": "PositionTooltip",
      "contents": "PositionTooltip()"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents(${1:Panel panel})"
    },
    {
      "trigger": "AddNode",
      "contents": "AddNode(${1:string name}, ${2:string icon = \"icon16/folder.png\"})"
    },
    {
      "trigger": "ChildExpanded",
      "contents": "ChildExpanded(${1:boolean bExpand})"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()"
    },
    {
      "trigger": "ExpandTo",
      "contents": "ExpandTo(${1:boolean bExpand})"
    },
    {
      "trigger": "GetClickOnDragHover",
      "contents": "GetClickOnDragHover()"
    },
    {
      "trigger": "GetIndentSize",
      "contents": "GetIndentSize()"
    },
    {
      "trigger": "GetSelectedItem",
      "contents": "GetSelectedItem()"
    },
    {
      "trigger": "GetLineHeight",
      "contents": "GetLineHeight()"
    },
    {
      "trigger": "GetShowIcons",
      "contents": "GetShowIcons()"
    },
    {
      "trigger": "LayoutTree",
      "contents": "LayoutTree()"
    },
    {
      "trigger": "MoveChildTo",
      "contents": "MoveChildTo(${1:Panel child})"
    },
    {
      "trigger": "OnNodeSelected",
      "contents": "OnNodeSelected(${1:Panel node})"
    },
    {
      "trigger": "Root",
      "contents": "Root()"
    },
    {
      "trigger": "SetClickOnDragHover",
      "contents": "SetClickOnDragHover(${1:boolean enable})"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean bExpand})"
    },
    {
      "trigger": "SetLineHeight",
      "contents": "SetLineHeight(${1:number h})"
    },
    {
      "trigger": "SetIndentSize",
      "contents": "SetIndentSize(${1:number size})"
    },
    {
      "trigger": "SetSelectedItem",
      "contents": "SetSelectedItem()"
    },
    {
      "trigger": "SetShowIcons",
      "contents": "SetShowIcons(${1:boolean show})"
    },
    {
      "trigger": "ShowIcons",
      "contents": "ShowIcons()"
    },
    {
      "trigger": "GetBottom",
      "contents": "GetBottom()"
    },
    {
      "trigger": "GetDividerHeight",
      "contents": "GetDividerHeight()"
    },
    {
      "trigger": "GetBottomMin",
      "contents": "GetBottomMin()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()"
    },
    {
      "trigger": "GetHoldPos",
      "contents": "GetHoldPos()"
    },
    {
      "trigger": "GetMiddle",
      "contents": "GetMiddle()"
    },
    {
      "trigger": "GetTop",
      "contents": "GetTop()"
    },
    {
      "trigger": "GetTopHeight",
      "contents": "GetTopHeight()"
    },
    {
      "trigger": "GetTopMax",
      "contents": "GetTopMax()"
    },
    {
      "trigger": "GetTopMin",
      "contents": "GetTopMin()"
    },
    {
      "trigger": "SetBottom",
      "contents": "SetBottom(${1:Panel pnl})"
    },
    {
      "trigger": "SetBottomMin",
      "contents": "SetBottomMin(${1:number height})"
    },
    {
      "trigger": "SetDividerHeight",
      "contents": "SetDividerHeight(${1:number height})"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean isDragging})"
    },
    {
      "trigger": "SetHoldPos",
      "contents": "SetHoldPos(${1:number y})"
    },
    {
      "trigger": "SetMiddle",
      "contents": "SetMiddle(${1:Panel pnl})"
    },
    {
      "trigger": "SetTop",
      "contents": "SetTop(${1:Panel pnl})"
    },
    {
      "trigger": "SetTopMax",
      "contents": "SetTopMax(${1:number height})"
    },
    {
      "trigger": "SetTopHeight",
      "contents": "SetTopHeight(${1:number height})"
    },
    {
      "trigger": "SetTopMin",
      "contents": "SetTopMin(${1:number height})"
    },
    {
      "trigger": "StartGrab",
      "contents": "StartGrab()"
    },
    {
      "trigger": "AddScroll",
      "contents": "AddScroll(${1:number add})"
    },
    {
      "trigger": "AnimateTo",
      "contents": "AnimateTo(${1:number scroll}, ${2:number length}, ${3:number delay = 0})"
    },
    {
      "trigger": "BarScale",
      "contents": "BarScale()"
    },
    {
      "trigger": "GetHideButtons",
      "contents": "GetHideButtons()"
    },
    {
      "trigger": "GetOffset",
      "contents": "GetOffset()"
    },
    {
      "trigger": "GetScroll",
      "contents": "GetScroll()"
    },
    {
      "trigger": "Grip",
      "contents": "Grip()"
    },
    {
      "trigger": "SetHideButtons",
      "contents": "SetHideButtons(${1:boolean hide})"
    },
    {
      "trigger": "SetScroll",
      "contents": "SetScroll(${1:number scroll})"
    },
    {
      "trigger": "SetUp",
      "contents": "SetUp(${1:number barSize}, ${2:number cavasSize})"
    },
    {
      "trigger": "Value",
      "contents": "Value()"
    },
    {
      "trigger": "AboveLayout",
      "contents": "AboveLayout()"
    },
    {
      "trigger": "BestGuessLayout",
      "contents": "BestGuessLayout()"
    },
    {
      "trigger": "FillAnimations",
      "contents": "FillAnimations(${1:Entity ent})"
    },
    {
      "trigger": "FullFrontalLayout",
      "contents": "FullFrontalLayout()"
    },
    {
      "trigger": "OriginLayout",
      "contents": "OriginLayout()"
    },
    {
      "trigger": "Refresh",
      "contents": "Refresh()"
    },
    {
      "trigger": "RenderIcon",
      "contents": "RenderIcon()"
    },
    {
      "trigger": "RightLayout",
      "contents": "RightLayout()"
    },
    {
      "trigger": "SetDefaultLighting",
      "contents": "SetDefaultLighting()"
    },
    {
      "trigger": "SetFromEntity",
      "contents": "SetFromEntity(${1:Entity ent})"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon()"
    },
    {
      "trigger": "UpdateEntity",
      "contents": "UpdateEntity(${1:Entity ent})"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:boolean OnOff})"
    },
    {
      "trigger": "SetAlpha",
      "contents": "SetAlpha(${1:number alpha})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string mat})"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean bOn})"
    },
    {
      "trigger": "LoadTGAImage",
      "contents": "LoadTGAImage(${1:string imageName}, ${2:string strPath})"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string matname})"
    },
  ]
}
